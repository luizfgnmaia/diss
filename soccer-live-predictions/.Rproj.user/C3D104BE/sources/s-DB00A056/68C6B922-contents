---
title: "$f(t) = t^2$"
output: pdf_document
---

```{r, warning = FALSE, message = FALSE}
options(scipen = 999)

library(dplyr)
library(ggplot2)
library(CVXR)

load("scrape/data/reds.RData")
load("2015-2020/data/input.RData")
```

$$ \lambda_k^*(t) = A_\lambda t^2 $$
where $$A_\lambda = \begin{cases}
 A_\lambda^1, \text{ if half = 1;}  \\
 A_\lambda^2, \text{ if half = 2.}
\end{cases}$$
$$ \mu_k^*(t) = A_\mu t^2 $$
where $$A_\mu = \begin{cases}
 A_\mu^1, \text{ if half = 1;}  \\
 A_\mu^2, \text{ if half = 2.}
\end{cases}$$

```{r}
int_reds_1 = list(); int_reds_2 = list();
for(k in 1:N) {
  tmp_int_reds_1 = NULL
  for(l in 1:(length(I1s[[k]])-1)) {
    t1 = I1s[[k]][l]
    t2 = I1s[[k]][l+1]
    tmp_int_reds_1[l] = 1/3*(t2^3 - t1^3) # <---
  }
  int_reds_1[[k]] = tmp_int_reds_1
}
for(k in 1:N) {
  tmp_int_reds_2 = NULL
  for(l in 1:(length(I2s[[k]])-1)) {
    t1 = I2s[[k]][l]
    t2 = I2s[[k]][l+1]
    tmp_int_reds_2[l] = 1/3*(t2^3 - t1^3) # <---
  }
  int_reds_2[[k]] = tmp_int_reds_2
}
int_reds_1 = unlist(int_reds_1)
int_reds_2 = unlist(int_reds_2)

a_lambda = Variable(2)
a_mu = Variable(2)

loglambda1s = log(int_reds_1) + a_lambda[1]
logmu1s = log(int_reds_1) + a_mu[1]
loglambda2s = log(int_reds_2) + a_lambda[2]
logmu2s = log(int_reds_2) + a_mu[2]

log_lik_reds = sum_entries(
  - exp(loglambda1s) - exp(logmu1s) +
    H1s*loglambda1s + A1s*logmu1s) +
  sum_entries(
    - exp(loglambda2s) - exp(logmu2s) +
      + H2s*loglambda2s + A2s*logmu2s)

objective = Maximize(log_lik_reds)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
A_lambda = exp(as.vector(solution$getValue(a_lambda)))
A_mu = exp(as.vector(solution$getValue(a_mu)))
A_lambda
A_mu
```

```{r}
solution$value
```

```{r, warning = FALSE, message = FALSE}
reds$Stoppage_Time[which(is.na(reds$Stoppage_Time))] = 0

reds = reds %>%
  mutate(Minute = Minute + Stoppage_Time)

reds$Minute[which(reds$Minute > 50)] = 50

tib_zeros = tibble(Team = c(rep(1, 100), rep(2, 100)),
                   Half = c(rep(1, 50), rep(2, 50), rep(1, 50), rep(2, 50)),
                   Minute = c(1:50, 1:50, 1:50, 1:50),
                   n = 0L)
complete_zeros <- function(tib_count) {
  tib_count %>%
    full_join(tib_zeros, by = c("Team", "Half", "Minute", "n")) %>%
    group_by(Team, Minute, Half) %>%
    summarise(n = sum(n))
}

tmp = reds %>%
  count(Team, Half, Minute) %>%
  complete_zeros() %>%
  mutate(rate = n/N)
```

```{r}
t = seq(0, 45, by = 0.01)
rate = A_lambda[1] * t^2 # <---

tmp %>%
  filter(Team == 1, Half == 1, Minute <= 45) %>%
  ggplot(aes(x = Minute, y = rate)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  theme_bw() +
  ylab("Rate") +
  scale_x_continuous(breaks = seq(from = 0, to = 45, by = 5)) +
  geom_line(data = tibble(t, rate), aes(x = t, y = rate),
            col = "red", size = 1) +
  ggtitle("Home team, first half")
```

```{r}
rate = A_mu[1] * t^2 # <---

tmp %>%
  filter(Team == 2, Half == 1, Minute <= 45) %>%
  ggplot(aes(x = Minute, y = rate)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  theme_bw() +
  ylab("Rate") +
  scale_x_continuous(breaks = seq(from = 0, to = 45, by = 5)) +
  geom_line(data = tibble(t, rate), aes(x = t, y = rate),
            col = "red", size = 1) +
  ggtitle("Away team, first half")
```

```{r}
rate = A_lambda[2] * t^2 # <---

tmp %>%
  filter(Team == 1, Half == 2, Minute <= 45) %>%
  ggplot(aes(x = Minute, y = rate)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  theme_bw() +
  ylab("Rate") +
  scale_x_continuous(breaks = seq(from = 0, to = 45, by = 5)) +
  geom_line(data = tibble(t, rate), aes(x = t, y = rate),
            col = "red", size = 1) +
  ggtitle("Home team, second half")
```

```{r}
rate = A_mu[2] * t^2 # <---

tmp %>%
  filter(Team == 2, Half == 2, Minute <= 45) %>%
  ggplot(aes(x = Minute, y = rate)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  theme_bw() +
  ylab("Rate") +
  scale_x_continuous(breaks = seq(from = 0, to = 45, by = 5)) +
  geom_line(data = tibble(t, rate), aes(x = t, y = rate),
            col = "red", size = 1) +
  ggtitle("Away team, second half")
```