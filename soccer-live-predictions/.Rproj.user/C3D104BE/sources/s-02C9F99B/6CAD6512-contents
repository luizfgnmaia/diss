
load("2020/data/mod_1.RData")

pred_mod_1 <- function(n = 10000, home_team, away_team, score_home = 0, score_away = 0, reds_home = 0, reds_away = 0, minute = 0, half = 1, reds_home_1 = 0, reds_away_1 = 0, end_minute = 45, end_half = 2, stoppage_time = TRUE) {
  
  pred <- function(home_team, away_team, score_home, score_away, reds_home, reds_away, minute, half, reds_home_1, reds_away_1) {
    
    if(end_minute < 45) {
      stoppage_time = FALSE
    }
    
    if(end_half == 1) {
      half = 1
    }
    
    if(half == 2) {
      end_half = 2
    }
    
    # Passo 1: tempo regulamentar do primeiro tempo
    if(half == 1) {
      
      if(end_half == 1) {
        end_1st = end_minute
      } else {
        end_1st = 45
      }
      
      # Gerando expulsões para o time mandante
      t = minute
      s = (1/2)*A_lambda_1*t^2 # começando do minuto t
      t_reds_home = NULL
      while(t < end_1st) { # antes de calcular os acréscimos
        u = runif(1)
        s = s - log(u)
        t = inv_lambda_1(s)
        if(t < end_1st) {
          t_reds_home = c(t_reds_home, t)
        }
      }
      
      # Gerando expulsões para o time visitante
      t = minute
      s = (1/2)*A_mu_1*t^2 # começando do minuto t
      t_reds_away = NULL
      while(t < end_1st) { # antes de calcular os acréscimos
        u = runif(1)
        s = s - log(u)
        t = inv_mu_1(s)
        if(t < end_1st) {
          t_reds_away = c(t_reds_away, t)
        }
      }
      
      # Gerando gols para ambos os times
      while(minute < end_1st) {
        
        lambda = exp(alpha_i+beta_j+gamma)*exp(score_home*mod_1$omega["lambda_x"])*exp(score_away*mod_1$omega["lambda_y"])*exp(reds_home*mod_1$omega["lambda_x^s"])*exp(reds_away*mod_1$omega["lambda_y^s"])
        mu = exp(alpha_j+beta_i)*exp(score_home*mod_1$omega["mu_x"])*exp(score_away*mod_1$omega["mu_y"])*exp(reds_home*mod_1$omega["mu_x^s"])*exp(reds_away*mod_1$omega["mu_y^s"])
        next_home_goal = rexp(1, rate = lambda) + minute
        next_away_goal = rexp(1, rate = mu) + minute
        next_home_red = t_reds_home[t_reds_home > minute][1]
        if(length(next_home_red) == 0) {
          next_home_red = Inf
        } else if(is.na(next_home_red)) {
          next_home_red = Inf
        }
        next_away_red = t_reds_away[t_reds_away > minute][1]
        next_event = min(next_home_goal, next_away_goal, next_home_red, next_away_red, na.rm = TRUE)
        
        if(next_event < end_1st) {
          minute = next_event
          if(next_home_goal == minute) {
            score_home = score_home + 1
          } else if(next_away_goal == minute) {
            score_away = score_away + 1
          } else if(next_home_red == minute) {
            reds_home = reds_home + 1
          } else {
            reds_away = reds_away + 1
          }
        } else {
          minute = end_1st
        }
      }
      
      # Passo 2: acréscimos do primeiro tempo
      if(stoppage_time == TRUE) {
        
        U1 = rpois(1, lambda = mod_1$eta[1] + mod_1$rho[1]*(reds_home + reds_away))
        
        # Gerando expulsões para o time mandante
        t = minute
        s = (1/2)*A_lambda_1*45^2 # começando do minuto 45
        t_reds_home_st = NULL
        while(t < 45+U1) {
          u = runif(1)
          s = s - log(u)
          t = inv_lambda_1(s)
          if(t < 45) {
            t_reds_home_st = c(t_reds_home_st, t)
          }
        }
        
        # Gerando expulsões para o time visitante
        t = minute
        s = (1/2)*A_mu_1*45^2 # começando do minuto 45
        t_reds_away_st = NULL
        while(t < 45+U1) {
          u = runif(1)
          s = s - log(u)
          t = inv_mu_1(s)
          if(t < 45+U1) {
            t_reds_away_st = c(t_reds_away, t)
          }
        }
        
        # Gerando gols para ambos os times
        while(minute < 45+U1) {
          
          lambda = exp(alpha_i+beta_j+gamma)*exp(score_home*mod_1$omega["lambda_x"])*exp(score_away*mod_1$omega["lambda_y"])*exp(reds_home*mod_1$omega["lambda_x^s"])*exp(reds_away*mod_1$omega["lambda_y^s"])
          mu = exp(alpha_j+beta_i)*exp(score_home*mod_1$omega["mu_x"])*exp(score_away*mod_1$omega["mu_y"])*exp(reds_home*mod_1$omega["mu_x^s"])*exp(reds_away*mod_1$omega["mu_y^s"])
          next_home_goal = rexp(1, rate = lambda) + minute
          next_away_goal = rexp(1, rate = mu) + minute
          next_home_red = t_reds_home[t_reds_home > minute][1]
          if(length(next_home_red) == 0) {
            next_home_red = Inf
          } else if(is.na(next_home_red)) {
            next_home_red = Inf
          }
          next_away_red = t_reds_away[t_reds_away > minute][1]
          next_event = min(next_home_goal, next_away_goal, next_home_red, next_away_red, na.rm = TRUE)
          
          if(next_event < 45+U1) {
            minute = next_event
            if(next_home_goal == minute) {
              score_home = score_home + 1
            } else if(next_away_goal == minute) {
              score_away = score_away + 1
            } else if(next_home_red == minute) {
              reds_home = reds_home + 1
            } else {
              reds_away = reds_away + 1
            }
          } else {
            minute = 45+U1
            half = 2
          }
        }
        minute = 0
        reds_home_1 = reds_home
        reds_away_1 = reds_away
      }
    }
    
    # Passo 3: tempo regulamentar do segundo tempo
    if(end_half == 2) {
      
      end_2nd = end_minute
      
      # Gerando expulsões para o time mandante
      t = minute
      s = (1/2)*A_lambda_2*t^2 # começando do minuto t
      t_reds_home = NULL
      while(t < end_2nd) { # antes de calcular os acréscimos
        u = runif(1)
        s = s - log(u)
        t = inv_lambda_2(s)
        if(t < end_2nd) {
          t_reds_home = c(t_reds_home, t)
        }
      }
      
      # Gerando expulsões para o time visitante
      t = minute
      s = (1/2)*A_mu_2*t^2 # começando do minuto t
      t_reds_away = NULL
      while(t < end_2nd) { # antes de calcular os acréscimos
        u = runif(1)
        s = s - log(u)
        t = inv_mu_2(s)
        if(t < end_2nd) {
          t_reds_away = c(t_reds_away, t)
        }
      }
      
      # Gerando gols para ambos os times
      while(minute < end_2nd) {
        
        lambda = exp(alpha_i+beta_j+gamma+tau)*exp(score_home*mod_1$omega["lambda_x"])*exp(score_away*mod_1$omega["lambda_y"])*exp(reds_home*mod_1$omega["lambda_x^s"])*exp(reds_away*mod_1$omega["lambda_y^s"])
        mu = exp(alpha_j+beta_i+tau)*exp(score_home*mod_1$omega["mu_x"])*exp(score_away*mod_1$omega["mu_y"])*exp(reds_home*mod_1$omega["mu_x^s"])*exp(reds_away*mod_1$omega["mu_y^s"])
        next_home_goal = rexp(1, rate = lambda) + minute
        next_away_goal = rexp(1, rate = mu) + minute
        next_home_red = t_reds_home[t_reds_home > minute][1]
        if(length(next_home_red) == 0) {
          next_home_red = Inf
        } else if(is.na(next_home_red)) {
          next_home_red = Inf
        }
        next_away_red = t_reds_away[t_reds_away > minute][1]
        next_event = min(next_home_goal, next_away_goal, next_home_red, next_away_red, na.rm = TRUE)
        
        if(next_event < end_2nd) {
          minute = next_event
          if(next_home_goal == minute) {
            score_home = score_home + 1
          } else if(next_away_goal == minute) {
            score_away = score_away + 1
          } else if(next_home_red == minute) {
            reds_home = reds_home + 1
          } else {
            reds_away = reds_away + 1
          }
        } else {
          minute = end_2nd
        }
      }
      
      # Passo 4: acréscimos do segundo
      if(stoppage_time == TRUE) {
        
        U2 = rpois(1, lambda = mod_1$eta[2] + mod_1$rho[2]*(reds_home + reds_away - reds_home_1 - reds_away_1))
        
        # Gerando expulsões para o time mandante
        t = minute
        s = (1/2)*A_lambda_2*45^2 # começando do minuto 45
        t_reds_home_st = NULL
        while(t < 45+U2) {
          u = runif(1)
          s = s - log(u)
          t = inv_lambda_2(s)
          if(t < 45) {
            t_reds_home_st = c(t_reds_home_st, t)
          }
        }
        
        # Gerando expulsões para o time visitante
        t = minute
        s = (1/2)*A_mu_2*45^2 # começando do minuto 45
        t_reds_away_st = NULL
        while(t < 45+U2) {
          u = runif(1)
          s = s - log(u)
          t = inv_mu_2(s)
          if(t < 45+U2) {
            t_reds_away_st = c(t_reds_away, t)
          }
        }
        
        # Gerando gols para ambos os times
        while(minute < 45+U2) {
          
          lambda = exp(alpha_i+beta_j+gamma+tau)*exp(score_home*mod_1$omega["lambda_x"])*exp(score_away*mod_1$omega["lambda_y"])*exp(reds_home*mod_1$omega["lambda_x^s"])*exp(reds_away*mod_1$omega["lambda_y^s"])
          mu = exp(alpha_j+beta_i+tau)*exp(score_home*mod_1$omega["mu_x"])*exp(score_away*mod_1$omega["mu_y"])*exp(reds_home*mod_1$omega["mu_x^s"])*exp(reds_away*mod_1$omega["mu_y^s"])
          next_home_goal = rexp(1, rate = lambda) + minute
          next_away_goal = rexp(1, rate = mu) + minute
          next_home_red = t_reds_home[t_reds_home > minute][1]
          if(length(next_home_red) == 0) {
            next_home_red = Inf
          } else if(is.na(next_home_red)) {
            next_home_red = Inf
          }
          next_away_red = t_reds_away[t_reds_away > minute][1]
          next_event = min(next_home_goal, next_away_goal, next_home_red, next_away_red, na.rm = TRUE)
          
          if(next_event < 45+U2) {
            minute = next_event
            if(next_home_goal == minute) {
              score_home = score_home + 1
            } else if(next_away_goal == minute) {
              score_away = score_away + 1
            } else if(next_home_red == minute) {
              reds_home = reds_home + 1
            } else {
              reds_away = reds_away + 1
            }
          } else {
            minute = 45+U2
          }
        }
      }
    }
    c(score_home, score_away)
  }
  
  inv_lambda_1 <- function(x) {
    (2*x/A_lambda_1)^(1/2)
  }
  
  inv_lambda_2 <- function(x) {
    (2*x/A_lambda_2)^(1/2)
  }
  
  inv_mu_1 <- function(x) {
    (2*x/A_mu_1)^(1/2)
  }
  
  inv_mu_2 <- function(x) {
    (2*x/A_mu_2)^(1/2)
  }
  
  gamma = mod_1$gamma
  tau = mod_1$tau
  A_lambda_1 = exp(mod_1$a_lambda[1])
  A_lambda_2 = exp(mod_1$a_lambda[2])
  A_mu_1 = exp(mod_1$a_mu[1])
  A_mu_2 = exp(mod_1$a_mu[2])
  alpha_i = mod_1$alpha[home_team]
  beta_i = mod_1$beta[home_team]
  alpha_j = mod_1$alpha[away_team]
  beta_j = mod_1$beta[away_team]
  
  lst = list()
  set.seed(1)
  for(i in 1:n) {
    lst[[i]] = pred(home_team, away_team, score_home, score_away, reds_home, reds_away, minute, half, reds_home_1, reds_away_1)
  }
  scores = do.call(rbind, lst)
  colnames(scores) = c(home_team, away_team)
  
  home_win = sum(scores[,1] > scores[,2])/n
  away_win = sum(scores[,1] < scores[,2])/n
  tie = 1 - home_win - away_win
  winner = c(home_win, tie, away_win)
  names(winner) = c(home_team, "Tie", away_team)
  
  freq_scores = head(sort(table(paste0(scores[,1], "-", scores[,2])), decreasing = TRUE), 10)/n
  freq_scores[11] = 1 - sum(freq_scores)
  names(freq_scores)[11] = "other"
  
  list("Result" = winner, "Score" = freq_scores)
}
