---
title: "Rates Série A 2014-2019"
output: pdf_document
---

# From [Dixon & Robinson, 1998](https://betgps.com/betting-library/Dixon-Robinson-A-Birth-Process-Model-for-Association-Football-Matches.pdf)
In a match picked a random, let $T_{xy}$ be the time to the next goal while the current score is $(x,y)$ for $x, \ y = 0, \ 1, \ 2, \ ...,$ and let $\delta_{xy}$ be a censoring indicator that is 0 if the match ends before the next goal is scored and 1 if a goal is observed. Then, assuming $T_{xy} \sim \exp(\nu_{xy})$, standart survival analysis give the maximum likelihood estimate of $\nu_{xy}$ as
$$ \hat{\nu}_{xy} = \frac{\sum_{i=1}^N \delta_{xy,i}}  {\sum_{i=1}^N t_{xy,i}}$$
where $N$ is the number of matches, $t_{xy,i}$ and $\delta_{xy,i}$ are the observed times to the next goal and censoring indicators respectively, at score $(x, y)$ in match $i$. 

```{r, warning = FALSE, message = FALSE}
options(knitr.kable.NA = "–",
        scipen = 999)

library(dplyr)
library(knitr)
library(reshape2)
library(ggplot2)

load("input_2014_2019.RData")

x = list(); y = list(); xy = list()
for(i in 1:N) {
  x[[i]] = c(x1[[i]], x2[[i]])
  y[[i]] = c(y1[[i]], y2[[i]])
  xy[[i]] = paste(x[[i]], y[[i]], sep = "-")
}

tables = lapply(xy, table)

scores = NULL
c = 0
for(i in 0:3) {
  for(j in 0:3) {
    c = c + 1
    scores[c] = paste(i, j, sep = "-")
  }
}

delta_home = list(); delta_away = list(); t = list()

for(i in 1:length(scores)) {
  tmp_delta_home = NULL; tmp_delta_away = NULL; tmp_t = NULL
  for(k in 1:N) {
    if(scores[i] %in% names(tables[[k]])) {
      next_score = names(tables[[k]])[which(names(tables[[k]]) == 
                                              names(tables[[k]][scores[i]])) + 1]
      if(is.na(next_score)) {
        tmp_delta_home[k] = 0
        tmp_delta_away[k] = 0
      } else {
        if(as.integer(substr(next_score, 1, 1)) > as.integer(substr(scores[i], 1, 1))) {
          tmp_delta_home[k] = 1
          tmp_delta_away[k] = 0
        } else {
          tmp_delta_home[k] = 0
          tmp_delta_away[k] = 1
        }
      }
      tmp_t[k] = tables[[k]][scores[i]]
    } else {
      tmp_delta_home[k] = 0
      tmp_delta_away[k] = 0
      tmp_t[k] = 0
    }
  }
  delta_home[[i]] = tmp_delta_home
  delta_away[[i]] = tmp_delta_away
  t[[i]] = tmp_t
}

rates = NULL; rates_home = NULL; rates_away = NULL
for(i in 1:length(scores)) {
  rates[i] = (sum(delta_home[[i]]) + sum(delta_away[[i]])) / sum(t[[i]])
  rates_home[i] = sum(delta_home[[i]]) / sum(t[[i]])
  rates_away[i] = sum(delta_away[[i]]) / sum(t[[i]])
}

# Crowder pag 66
sd_home = NULL; sd_away = NULL; sd = NULL
for(i in 1:length(scores)) {
  sd[i] = rates[i] / sqrt(sum(delta_home[[i]]) + sum(delta_away[[i]]))
  sd_home[i] = rates_home[i] / sqrt(sum(delta_home[[i]]))
  sd_away[i] = rates_away[i] / sqrt(sum(delta_away[[i]]))
} 

tib = tibble(Rate = paste0("$\\nu_{", stringr::str_replace(scores, "-", ""), "}$"), 
             `Est.(both)` = rates, `Est.(home)` = rates_home, `Est.(away)` = rates_away,
             `S.e.(both)` = sd, `S.e.(home)` = sd_home, `S.e.(away)` = sd_away)
```

```{r, warning = FALSE, message = FALSE}
kable(tib, digits = 4, caption = "Estimates and standard errors of the rate of the time 
      to the next goal")
```

```{r}
names(rates) = scores
names(rates_home) = scores
names(rates_away) = scores

mat = matrix(NA, nrow = 4, ncol = 4)
rownames(mat) = paste0(0:3)
colnames(mat) = paste0(0:3)
mat_home = mat
mat_away = mat
for(i in 1:4) {
  for(j in 1:4) {
    mat[i,j] = rates[paste(i-1, j-1, sep = "-")]
    mat_home[i,j] = rates_home[paste(i-1, j-1, sep = "-")]
    mat_away[i,j] = rates_away[paste(i-1, j-1, sep = "-")]
  }
}

melted_mat = melt(mat) %>%
  rename(x = Var1, y = Var2)
melted_mat_home = melt(mat_home) %>%
  rename(x = Var1, y = Var2)
melted_mat_away = melt(mat_away) %>%
  rename(x = Var1, y = Var2)
```

```{r}
ggplot(data = melted_mat, aes(x, y, fill = value)) + 
  geom_tile() +
  scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
                       midpoint = 0.029, limit = c(0.016, 0.042),
                       name = "",
                       breaks = c(0.02, 0.04)) +
  geom_text(aes(x, y, label = round(value, 4)), color = "black") +
  theme(panel.grid.major = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank(),
        axis.ticks = element_blank()) +
  ggtitle("Rate of the time to the next goal while the score is (x, y)")
```

\clearpage
```{r}
ggplot(data = melted_mat_home, aes(x, y, fill = value)) + 
  geom_tile() +
  scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
                       midpoint = 0.0145, limit = c(0.008, 0.021),
                       name = "",
                       breaks = c(0.01, 0.02)) +
  geom_text(aes(x, y, label = round(value, 4)), color = "black") +
  theme(panel.grid.major = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank(),
        axis.ticks = element_blank()) +
  ggtitle("Rate of the time to the next home goal while the score is (x, y)")
```

\clearpage
```{r}
ggplot(data = melted_mat_away, aes(x, y, fill = value)) + 
  geom_tile() +
  scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
                       midpoint = 0.0145, limit = c(0.008, 0.021), 
                       name = "",
                       breaks = c(0.01, 0.02)) +
  geom_text(aes(x, y, label = round(value, 4)), color = "black") +
  theme(panel.grid.major = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank(),
        axis.ticks = element_blank()) +
  ggtitle("Rate of the time to the away goal while the score is (x, y)")
```

\clearpage

```{r}
ts = NULL; Js = NULL;
for(k in 1:N) {
  ts[[k]] = c(t1s[[k]], t2s[[k]]+45+U1[[k]])
  Js[[k]] = c(J1s[[k]], J2s[[k]])
}

delta_home = list(); delta_away = list(); t = list()

for(i in 1:length(scores)) {
  tmp_delta_home = NULL; tmp_delta_away = NULL; tmp_t = NULL
  for(k in 1:N) {
    if(scores[i] %in% names(tables[[k]])) {
      w = which(xy[[k]] == scores[i])
      start = w[1]
      end = w[length(w)]
      tmp_t[k] = end - start
      tmp_delta_home[k] = sum((ts[[k]] %in% start:end) * !Js[[k]])
      tmp_delta_away[k] = sum((ts[[k]] %in% start:end) * Js[[k]])
    } else {
      tmp_delta_home[k] = 0
      tmp_delta_away[k] = 0
      tmp_t[k] = 0
    }
  }
  delta_home[[i]] = tmp_delta_home
  delta_away[[i]] = tmp_delta_away
  t[[i]] = tmp_t
}

rates = NULL; rates_home = NULL; rates_away = NULL
for(i in 1:length(scores)) {
  rates[i] = (sum(delta_home[[i]]) + sum(delta_away[[i]])) / sum(t[[i]])
  rates_home[i] = sum(delta_home[[i]]) / sum(t[[i]])
  rates_away[i] = sum(delta_away[[i]]) / sum(t[[i]])
}

sd_home = NULL; sd_away = NULL; sd = NULL
for(i in 1:length(scores)) {
  sd[i] = rates[i] / sqrt(sum(delta_home[[i]]) + sum(delta_away[[i]]))
  sd_home[i] = rates_home[i] / sqrt(sum(delta_home[[i]]))
  sd_away[i] = rates_away[i] / sqrt(sum(delta_away[[i]]))
}

rates_away[which(rates_away == 0)] = NA

tib = tibble(Rate = paste0("$\\rho_{", stringr::str_replace(scores, "-", ""), "}$"), 
             `Est.(both)` = rates, `Est.(home)` = rates_home, `Est.(away)` = rates_away,
             `S.e.(both)` = sd, `S.e.(home)` = sd_home, `S.e.(away)` = sd_away)
```

\clearpage
```{r}
kable(tib, digits = 4, caption = "Estimates and standard errors of the rate of the time
to the next goal")
```
```{r}
names(rates) = scores
names(rates_home) = scores
names(rates_away) = scores

mat = matrix(NA, nrow = 4, ncol = 4)
rownames(mat) = paste0(0:3)
colnames(mat) = paste0(0:3)
mat_home = mat
mat_away = mat
for(i in 1:4) {
  for(j in 1:4) {
    mat[i,j] = rates[paste(i-1, j-1, sep = "-")]
    mat_home[i,j] = rates_home[paste(i-1, j-1, sep = "-")]
    mat_away[i,j] = rates_away[paste(i-1, j-1, sep = "-")]
  }
}

melted_mat = melt(mat) %>%
  rename(x = Var1, y = Var2)
melted_mat_home = melt(mat_home) %>%
  rename(x = Var1, y = Var2)
melted_mat_away = melt(mat_away) %>%
  rename(x = Var1, y = Var2)
```

\clearpage
```{r}
ggplot(data = melted_mat, aes(x, y, fill = value)) + 
  geom_tile() +
  scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
                       midpoint = 0.01, limit = c(0, 0.02),
                       name = "",
                       breaks = c(0, 0.02)) +
  geom_text(aes(x, y, label = round(value, 4)), color = "black") +
  theme(panel.grid.major = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank(),
        axis.ticks = element_blank()) +
  ggtitle("Rate of the time to the next red card while the score is (x, y)")
```

\clearpage
```{r}
ggplot(data = melted_mat_home, aes(x, y, fill = value)) + 
  geom_tile() +
  scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
                       midpoint = 0.005, limit = c(0, 0.01),
                       name = "",
                       breaks = c(0, 0.01)) +
  geom_text(aes(x, y, label = round(value, 4)), color = "black") +
  theme(panel.grid.major = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank(),
        axis.ticks = element_blank()) +
  ggtitle("Rate of the time to the next red card of the home team \n while the score is (x, y)")
```

\clearpage
```{r, warning = FALSE}
ggplot(data = melted_mat_away, aes(x, y, fill = value)) + 
  geom_tile() +
  scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
                       midpoint = 0.005, limit = c(0, 0.01),
                       name = "",
                       breaks = c(0, 0.01)) +
  geom_text(aes(x, y, label = round(value, 4)), color = "black") +
  theme(panel.grid.major = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank(),
        axis.ticks = element_blank()) +
  ggtitle("Rate of the time to the next red card of the away team \n while the score is (x, y)")
```