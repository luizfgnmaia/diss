zero_2 = rep(0, L2)
M1_lambda = cbind(M1_lambda, vet_x1, vet_y1, zero_1, zero_1)
colnames(M1_lambda)[(2*n+3):(ncol(M1_lambda))] = c("x", "y", "0", "0")
M1_mu = cbind(M1_mu, zero_1, zero_1, vet_x1, vet_y1)
colnames(M1_mu)[(2*n+3):(ncol(M1_mu))] = c("0", "0", "x", "y")
M2_lambda = cbind(M2_lambda, vet_x2, vet_y2, zero_2, zero_2)
colnames(M2_lambda)[(2*n+3):(ncol(M2_lambda))] = c("x", "y", "0", "0")
M2_mu = cbind(M2_mu, zero_2, zero_2, vet_x2, vet_y2)
colnames(M2_mu)[(2*n+3):(ncol(M2_mu))] = c("0", "0", "x", "y")
exp_H1 = list(); exp_A1 = list(); exp_H2 = list(); exp_A2 = list()
for(k in 1:N) {
tmp_exp_H1 = NULL; tmp_exp_A1 = NULL; tmp_exp_H2 = NULL; tmp_exp_A2 = NULL
for(l in 2:(length(I1r[[k]]))) {
tmp_exp_H1[l-1] = x1s[[k]][I1r[[k]][l]] # penúltimo minuto do intervalo
tmp_exp_A1[l-1] = y1s[[k]][I1r[[k]][l]]
}
for(l in 2:(length(I2r[[k]]))) {
tmp_exp_H2[l-1] = x2s[[k]][I2r[[k]][l]]
tmp_exp_A2[l-1] = y2s[[k]][I2r[[k]][l]]
}
exp_H1[[k]] = tmp_exp_H1
exp_A1[[k]] = tmp_exp_A1
exp_H2[[k]] = tmp_exp_H2
exp_A2[[k]] = tmp_exp_A2
}
exp_H1 = unlist(exp_H1)
exp_A1 = unlist(exp_A1)
exp_H2 = unlist(exp_H2)
exp_A2 = unlist(exp_A2)
M1_lambda = cbind(M1_lambda, exp_H1, exp_A1, zero_1, zero_1)
colnames(M1_lambda)[(2*n+7):(ncol(M1_lambda))] = c("xs", "ys", "0", "0")
M1_mu = cbind(M1_mu, zero_1, zero_1, exp_H1, exp_A1)
colnames(M1_mu)[(2*n+7):(ncol(M1_mu))] = c("0", "0", "xs", "ys")
M2_lambda = cbind(M2_lambda, exp_H2, exp_A2, zero_2, zero_2)
colnames(M2_lambda)[(2*n+7):(ncol(M2_lambda))] = c("xs", "ys", "0", "0")
M2_mu = cbind(M2_mu, zero_2, zero_2, exp_H2, exp_A2)
colnames(M2_mu)[(2*n+7):(ncol(M2_mu))] = c("0", "0", "xs", "ys")
diff1s = list()
diff2s = list()
for(k in 1:N) {
diff1s[[k]] = diff(I1s[[k]])
diff2s[[k]] = diff(I2s[[k]])
}
delta1s = unlist(diff1s)
delta2s = unlist(diff2s)
for(k in 1:N) {
t2s[[k]] = t2s[[k]] + 45
}
t2s
load("2020/data/input.RData")
diff1 = list()
diff2 = list()
for(k in 1:N) {
diff1[[k]] = diff(I1r[[k]])
diff2[[k]] = diff(I2r[[k]])
}
delta1 = unlist(diff1)
delta2 = unlist(diff2)
L1 = length(delta1)
L2 = length(delta2)
M1_lambda = matrix(0, ncol = 2*n, nrow = L1)
row = 0
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[i[k]] = 1
beta[j[k]] = 1
tmp = c(alpha, beta)
for(l in 1:length(diff1[[k]])) {
M1_lambda[(row+l),] = tmp
}
row = row + length(diff1[[k]])
}
gamma = rep(1, L1)
M1_lambda = cbind(M1_lambda, gamma)
colnames(M1_lambda) = c(paste0("alpha_", 1:n), paste0("beta_", 1:n), "gamma")
M2_lambda = matrix(0, ncol = 2*n, nrow = L2)
row = 0
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[i[k]] = 1
beta[j[k]] = 1
tmp = c(alpha, beta)
for(l in 1:length(diff2[[k]])) {
M2_lambda[(row+l),] = tmp
}
row = row + length(diff2[[k]])
}
gamma = rep(1, L2)
M2_lambda = cbind(M2_lambda, gamma)
colnames(M2_lambda) = c(paste0("alpha_", 1:n), paste0("beta_", 1:n), "gamma")
M1_mu = matrix(0, ncol = 2*n, nrow = L1)
row = 0
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[j[k]] = 1
beta[i[k]] = 1
tmp = c(alpha, beta)
for(l in 1:(length(diff1[[k]]))) {
M1_mu[(row+l),] = tmp
}
row = row + length(diff1[[k]])
}
gamma = rep(0, L1)
M1_mu = cbind(M1_mu, gamma)
colnames(M1_mu) = c(paste0("alpha_", 1:n), paste0("beta_", 1:n), "gamma")
M2_mu = matrix(0, ncol = 2*n, nrow = L2)
row = 0
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[j[k]] = 1
beta[i[k]] = 1
tmp = c(alpha, beta)
for(l in 1:(length(diff2[[k]]))) {
M2_mu[(row+l),] = tmp
}
row = row + length(diff2[[k]])
}
gamma = rep(0, L2)
M2_mu = cbind(M2_mu, gamma)
colnames(M2_mu) = c(paste0("alpha_", 1:n), paste0("beta_", 1:n), "gamma")
eta = rep(0, L1)
M1_lambda = cbind(M1_lambda, eta)
eta = rep(1, L2)
M2_lambda = cbind(M2_lambda, eta)
eta = rep(0, L1)
M1_mu = cbind(M1_mu, eta)
eta = rep(1, L2)
M2_mu = cbind(M2_mu, eta)
vet_x1 = list()
vet_y1 = list()
for(k in 1:N) {
tmp_x1 = NULL
tmp_y1 = NULL
for(l in 1:(length(I1r[[k]])-1)) {
tmp_x1[l] = x1[[k]][I1r[[k]][l]+1]
tmp_y1[l] = y1[[k]][I1r[[k]][l]+1]
}
vet_x1[[k]] = tmp_x1
vet_y1[[k]] = tmp_y1
}
vet_x1 = unlist(vet_x1)
vet_y1 = unlist(vet_y1)
vet_x2 = list()
vet_y2 = list()
for(k in 1:N) {
tmp_x2 = NULL
tmp_y2 = NULL
for(l in 1:(length(I2r[[k]])-1)) {
tmp_x2[l] = x2[[k]][I2r[[k]][l]+1]
tmp_y2[l] = y2[[k]][I2r[[k]][l]+1]
}
vet_x2[[k]] = tmp_x2
vet_y2[[k]] = tmp_y2
}
vet_x2 = unlist(vet_x2)
vet_y2 = unlist(vet_y2)
zero_1 = rep(0, L1)
zero_2 = rep(0, L2)
M1_lambda = cbind(M1_lambda, vet_x1, vet_y1, zero_1, zero_1)
colnames(M1_lambda)[(2*n+3):(ncol(M1_lambda))] = c("x", "y", "0", "0")
M1_mu = cbind(M1_mu, zero_1, zero_1, vet_x1, vet_y1)
colnames(M1_mu)[(2*n+3):(ncol(M1_mu))] = c("0", "0", "x", "y")
M2_lambda = cbind(M2_lambda, vet_x2, vet_y2, zero_2, zero_2)
colnames(M2_lambda)[(2*n+3):(ncol(M2_lambda))] = c("x", "y", "0", "0")
M2_mu = cbind(M2_mu, zero_2, zero_2, vet_x2, vet_y2)
colnames(M2_mu)[(2*n+3):(ncol(M2_mu))] = c("0", "0", "x", "y")
exp_H1 = list(); exp_A1 = list(); exp_H2 = list(); exp_A2 = list()
for(k in 1:N) {
tmp_exp_H1 = NULL; tmp_exp_A1 = NULL; tmp_exp_H2 = NULL; tmp_exp_A2 = NULL
for(l in 2:(length(I1r[[k]]))) {
tmp_exp_H1[l-1] = x1s[[k]][I1r[[k]][l]] # penúltimo minuto do intervalo
tmp_exp_A1[l-1] = y1s[[k]][I1r[[k]][l]]
}
for(l in 2:(length(I2r[[k]]))) {
tmp_exp_H2[l-1] = x2s[[k]][I2r[[k]][l]]
tmp_exp_A2[l-1] = y2s[[k]][I2r[[k]][l]]
}
exp_H1[[k]] = tmp_exp_H1
exp_A1[[k]] = tmp_exp_A1
exp_H2[[k]] = tmp_exp_H2
exp_A2[[k]] = tmp_exp_A2
}
exp_H1 = unlist(exp_H1)
exp_A1 = unlist(exp_A1)
exp_H2 = unlist(exp_H2)
exp_A2 = unlist(exp_A2)
M1_lambda = cbind(M1_lambda, exp_H1, exp_A1, zero_1, zero_1)
colnames(M1_lambda)[(2*n+7):(ncol(M1_lambda))] = c("xs", "ys", "0", "0")
M1_mu = cbind(M1_mu, zero_1, zero_1, exp_H1, exp_A1)
colnames(M1_mu)[(2*n+7):(ncol(M1_mu))] = c("0", "0", "xs", "ys")
M2_lambda = cbind(M2_lambda, exp_H2, exp_A2, zero_2, zero_2)
colnames(M2_lambda)[(2*n+7):(ncol(M2_lambda))] = c("xs", "ys", "0", "0")
M2_mu = cbind(M2_mu, zero_2, zero_2, exp_H2, exp_A2)
colnames(M2_mu)[(2*n+7):(ncol(M2_mu))] = c("0", "0", "xs", "ys")
diff1s = list()
diff2s = list()
for(k in 1:N) {
diff1s[[k]] = diff(I1s[[k]])
diff2s[[k]] = diff(I2s[[k]])
}
delta1s = unlist(diff1s)
delta2s = unlist(diff2s)
diff2s
I1s
for(k in 1:N) {
I2s[[k]] = I2s[[k]] + 45
}
I2s
int_lambda_s1 = list(); int_lambda_s2 = list(); int_mu_s1 = list(); int_mu_s2 = list();
int_reds_1 = list(); int_reds_2 = list();
for(k in 1:N) {
for(l in 1:(length(I1s[[k]])-1)) {
t1 = I1s[[k]][l]
t2 = I1s[[k]][l+1]
tmp_int_reds_1[l] = (t2+1) * (log(t2+1)-1) - (t1+1) * (log(t1+1)-1)
}
int_reds_1[[k]] = tmp_int_reds_1
}
for(k in 1:N) {
for(l in 1:(length(I2s[[k]])-1)) {
t1 = I2s[[k]][l]
t2 = I2s[[k]][l+1]
tmp_int_reds_2[l] = (t2+1) * (log(t2+1)-1) - (t1+1) * (log(t1+1)-1)
}
int_reds_2[[k]] = tmp_int_reds_2
}
for(k in 1:N) {
I2s[[k]] = I2s[[k]] + 45
}
int_reds_1 = list(); int_reds_2 = list();
for(k in 1:N) {
tmp_int_reds_1 = NULL
for(l in 1:(length(I1s[[k]])-1)) {
t1 = I1s[[k]][l]
t2 = I1s[[k]][l+1]
tmp_int_reds_1[l] = (t2+1) * (log(t2+1)-1) - (t1+1) * (log(t1+1)-1)
}
int_reds_1[[k]] = tmp_int_reds_1
}
for(k in 1:N) {
tmp_int_reds_2 = NULL
for(l in 1:(length(I2s[[k]])-1)) {
t1 = I2s[[k]][l]
t2 = I2s[[k]][l+1]
tmp_int_reds_2[l] = (t2+1) * (log(t2+1)-1) - (t1+1) * (log(t1+1)-1)
}
int_reds_2[[k]] = tmp_int_reds_2
}
int_reds_1 = unlist(int_reds_1)
int_reds_2 = unlist(int_reds_2)
int_reds_1
length(int_reds_1)
length(A1s)
length(int_reds_2)
length(A2s)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input.R', encoding = 'UTF-8')
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input_mod_r.R', encoding = 'UTF-8')
library(CVXR)
load("2020/data/input.RData")
load("2020/data/input_mod_r.RData")
colnames(M1_lambda)
alpha = Variable(n)
beta = Variable(n)
gamma = Variable(1)
tau = Variable(1)
omega = Variable(4)
rho = Variable(4)
theta = vstack(alpha, beta, gamma, tau, omega, rho)
library(CVXR)
load("2020/data/input.RData")
load("2020/data/input_mod_r.RData")
t0 = Sys.time()
alpha = Variable(n)
beta = Variable(n)
gamma = Variable(1)
tau = Variable(1)
omega = Variable(8)
theta = vstack(alpha, beta, gamma, tau, omega)
library(CVXR)
load("2020/data/input.RData")
load("2020/data/input_mod_r.RData")
t0 = Sys.time()
alpha = Variable(n)
beta = Variable(n)
gamma = Variable(1)
tau = Variable(1)
omega = Variable(8)
theta = vstack(alpha, beta, gamma, tau, omega)
eta = Variable(2)
phi = Variable(2)
rho = Variable(2)
kappa = Variable(1)
pi1 = eta[1] + phi[1] * g1 + rho[1] * r1
pi2 = eta[2] + phi[2] * g2 + rho[2] * r2 + c * kappa
loglambda1 = log(delta1) + M1_lambda %*% theta
logmu1 = log(delta1) + M1_mu %*% theta
loglambda2 = log(delta2) + M2_lambda %*% theta
logmu2 = log(delta2) + M2_mu %*% theta
log(int_reds_1)
loglambda1s = log(int_reds_1) + A[1]
A = Variable(2)
loglambda1 = log(delta1) + M1_lambda %*% theta
logmu1 = log(delta1) + M1_mu %*% theta
loglambda2 = log(delta2) + M2_lambda %*% theta
logmu2 = log(delta2) + M2_mu %*% theta
loglambda1s = log(int_reds_1) + A[1]
dim(loglambda1)
dim(loglambda1s)
a = Variable(2)
loglambda1s = log(int_reds_1) + a[1]
a
loglambda1s = log(int_reds_1) + a[1]
logmu1s = log(int_reds_1) + a[1]
loglambda2s = log(int_reds_2) + a[2]
loglmu2s = log(int_reds_2) + a[2]
logmu2s = log(int_reds_2) + a[2]
A1s
log_lik_goals = - sum_entries(exp(loglambda1)) - sum_entries(exp(logmu1)) - sum_entries(exp(loglambda2)) - sum_entries(exp(logmu2)) +
sum_entries(H1*loglambda1) + sum_entries(A1*logmu1) + sum_entries(H2*loglambda2) + sum_entries(A2*logmu2)
log_lik_reds = - sum_entries(exp(loglambda1s)) - sum_entries(exp(logmu1s)) - sum_entries(exp(loglambda2s)) - sum_entries(exp(logmu2s)) +
sum_entries(H1s*loglambda1s) + sum_entries(A1s*logmu1s) + sum_entries(H2s*loglambda2s) + sum_entries(A2s*logmu2s)
log_lik_goals = - sum_entries(exp(loglambda1)) - sum_entries(exp(logmu1)) - sum_entries(exp(loglambda2)) - sum_entries(exp(logmu2)) +
sum_entries(H1*loglambda1) + sum_entries(A1*logmu1) + sum_entries(H2*loglambda2) + sum_entries(A2*logmu2)
loglambda1 = log(delta1) + M1_lambda %*% theta
logmu1 = log(delta1) + M1_mu %*% theta
loglambda2 = log(delta2) + M2_lambda %*% theta
logmu2 = log(delta2) + M2_mu %*% theta
loglambda1s = log(int_reds_1) + a[1]
logmu1s = log(int_reds_1) + a[1]
loglambda2s = log(int_reds_2) + a[2]
logmu2s = log(int_reds_2) + a[2]
sum_entries(exp(loglambda1))
sum_entries(exp(logmu1))
log_lik_goals = - sum_entries(exp(loglambda1)) - sum_entries(exp(logmu1)) - sum_entries(exp(loglambda2)) - sum_entries(exp(logmu2)) +
sum_entries(H1r*loglambda1) + sum_entries(A1r*logmu1) + sum_entries(H2r*loglambda2) + sum_entries(A2r*logmu2)
log_lik_reds = - sum_entries(exp(loglambda1s)) - sum_entries(exp(logmu1s)) - sum_entries(exp(loglambda2s)) - sum_entries(exp(logmu2s)) +
sum_entries(H1s*loglambda1s) + sum_entries(A1s*logmu1s) + sum_entries(H2s*loglambda2s) + sum_entries(A2s*logmu2s)
a
library(CVXR)
load("2020/data/input.RData")
load("2020/data/input_mod_r.RData")
t0 = Sys.time()
alpha = Variable(n)
beta = Variable(n)
gamma = Variable(1)
tau = Variable(1)
omega = Variable(8)
theta = vstack(alpha, beta, gamma, tau, omega)
eta = Variable(2)
phi = Variable(2)
rho = Variable(2)
kappa = Variable(1)
pi1 = eta[1] + phi[1] * g1 + rho[1] * r1
pi2 = eta[2] + phi[2] * g2 + rho[2] * r2 + c * kappa
a = Variable(2)
loglambda1 = log(delta1) + M1_lambda %*% theta
logmu1 = log(delta1) + M1_mu %*% theta
loglambda2 = log(delta2) + M2_lambda %*% theta
logmu2 = log(delta2) + M2_mu %*% theta
loglambda1s = log(int_reds_1) + a[1]
logmu1s = log(int_reds_1) + a[1]
loglambda2s = log(int_reds_2) + a[2]
logmu2s = log(int_reds_2) + a[2]
log_lik_goals = - sum_entries(exp(loglambda1)) - sum_entries(exp(logmu1)) - sum_entries(exp(loglambda2)) - sum_entries(exp(logmu2)) +
sum_entries(H1r*loglambda1) + sum_entries(A1r*logmu1) + sum_entries(H2r*loglambda2) + sum_entries(A2r*logmu2)
log_lik_reds = - sum_entries(exp(loglambda1s)) - sum_entries(exp(logmu1s)) - sum_entries(exp(loglambda2s)) - sum_entries(exp(logmu2s)) +
sum_entries(H1s*loglambda1s) + sum_entries(A1s*logmu1s) + sum_entries(H2s*loglambda2s) + sum_entries(A2s*logmu2s)
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
log_lik = log_lik_goals + log_lik_reds + log_lik_st
objective = Maximize(log_lik)
constraints = list(sum(alpha) - sum(beta) == 0)
problem = Problem(objective, constraints)
set.seed(1)
solution = solve(problem, solver = "MOSEK")
duration = Sys.time() - t0
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_r.R')
mod_r
exp(a)
exp(mod_r$a)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_r.R')
solution$getValue()
mod_r
options(knitr.kable.NA = "–")
library(dplyr)
library(knitr)
load("data/input.RData")
load("data/mod_r.RData")
alphas = tibble(Time = times$Time,
alpha = exp(mod_r$alpha))
kable(alphas, digits = 4, caption = "Alphas")
alphas = tibble(Team = times$Time,
alpha = exp(mod_r$alpha))
kable(alphas, digits = 4, caption = "Alphas", col.names = c("Team", "$\\alpha$"))
alphas_betas = tibble(Team = times$Time,
alpha = exp(mod_r$alpha),
beta = exp(mod_r$beta))
kable(alphas_betas, digits = 4, caption = "Alphas and betas",
col.names = c("Team", "$\\alpha$", "$\\beta$"))
goals = tibble(Estimative = mod_r$gamma, mod_r$tau, mod_r$omega)
goals = tibble(Estimative = mod_r$gamma, mod_r$tau, mod_r$omega)
kable(goals, digits = 4, caption = "Goal rate parameters")
goals = tibble(Estimative = c(mod_r$gamma, mod_r$tau, mod_r$omega))
kable(goals, digits = 4, caption = "Goal rate parameters")
goals = tibble(Estimative = c(mod_r$gamma, mod_r$tau, mod_r$omega))
kable(goals, digits = 4, caption = "Goal rate parameters",
row.names = c(1:10))
mod_r$omega
goals = tibble(Estimative = c(mod_r$gamma, mod_r$tau, mod_r$omega))
kable(goals, digits = 4, caption = "Goal rate parameters",
row.names = c("$\\gamma_h$", "$\\tau$", "$\\omega_{\lambda \\ s}"))
goals = tibble(Estimative = c(mod_r$gamma, mod_r$tau, mod_r$omega))
kable(goals, digits = 4, caption = "Goal rate parameters",
row.names = c("$\\gamma_h$", "$\\tau$", "$\\omega_{\\lambda \\ s}"))
goals = tibble(Estimative = c(mod_r$gamma, mod_r$tau, mod_r$omega))
kable(goals, digits = 4, caption = "Goal rate parameters",
row.names = c("$\\gamma_h$", "$\\tau$", "$\\omega_{\\lambda \\ s}",
"$\\omega_{\\lambda \\ s}", "$\\omega_{\\lambda \\ s}",
"$\\omega_{\\lambda \\ s}", "$\\omega_{\\lambda \\ s}"))
goals = tibble(Estimative = c(mod_r$gamma, mod_r$tau, mod_r$omega))
kable(goals, digits = 4, caption = "Goal rate parameters",
row.names = c("$\\gamma_h$", "$\\tau$", "$\\omega_{\\lambda \\ s}",
"$\\omega_{\\lambda \\ s}", "$\\omega_{\\lambda \\ s}",
"$\\omega_{\\lambda \\ s}", "$\\omega_{\\lambda \\ s}",
"$\\omega_{\\lambda \\ s}", "$\\omega_{\\lambda \\ s}",
"$\\omega_{\\lambda \\ s}"))
Parameter = c("$\\gamma_h$", "$\\tau$", "$\\omega_{\\lambda \\ s}",
"$\\omega_{\\lambda \\ s}", "$\\omega_{\\lambda \\ s}",
"$\\omega_{\\lambda \\ s}", "$\\omega_{\\lambda \\ s}",
"$\\omega_{\\lambda \\ s}", "$\\omega_{\\lambda \\ s}",
"$\\omega_{\\lambda \\ s}")
goals = tibble(Parameter, Estimative = c(mod_r$gamma, mod_r$tau, mod_r$omega))
kable(goals, digits = 4, caption = "Goal rate parameters")
Parameter = c("$\\gamma_h$", "$\\tau$", "$\\omega_{\\lambda x}",
"$\\omega_{\\lambda \\ s}", "$\\omega_{\\lambda \\ s}",
"$\\omega_{\\lambda \\ s}", "$\\omega_{\\lambda \\ s}",
"$\\omega_{\\lambda \\ s}", "$\\omega_{\\lambda \\ s}",
"$\\omega_{\\lambda \\ s}")
goals = tibble(Parameter, Estimative = c(mod_r$gamma, mod_r$tau, mod_r$omega))
kable(goals, digits = 4, caption = "Goal rate parameters")
Parameter = c("$\\gamma_h$", "$\\tau$", "$\\omega_{\\lambda x}",
"$\\omega_{\\lambda y}", "$\\omega_{\\mu x}",
"$\\omega_{\\mu y}", "$\\omega_{\\lambda x^*}",
"$\\omega_{\\lambda y^*}", "$\\omega_{\\mu x^*}",
"$\\omega_{\\mu y^*}")
goals = tibble(Parameter, Estimative = c(mod_r$gamma, mod_r$tau, mod_r$omega))
kable(goals, digits = 4, caption = "Goal rate parameters")
Parameter = c("$\\gamma_h$", "$\\tau$", "$\\omega_{\\lambda x}$",
"$\\omega_{\\lambda y}$", "$\\omega_{\\mu x}$",
"$\\omega_{\\mu y}$", "$\\omega_{\\lambda x^*}$",
"$\\omega_{\\lambda y^*}$", "$\\omega_{\\mu x^*}$",
"$\\omega_{\\mu y^*}$")
goals = tibble(Parameter, Estimative = c(mod_r$gamma, mod_r$tau, mod_r$omega))
kable(goals, digits = 4, caption = "Goal rate parameters")
mod_r$omega
mod_r$a
Parameter = c("$A_\\lambda$", "$A_\\mu$")
reds = tibble(Parameter, Estimative = c(mod_r$a))
kable(reds, digits = 8, caption = "Red card rate parameters")
Parameter = c("$\\gamma_h$", "$\\tau$", "$\\omega_{\\lambda x}$",
"$\\omega_{\\lambda y}$", "$\\omega_{\\mu x}$",
"$\\omega_{\\mu y}$", "$\\omega_{\\lambda x^*}$",
"$\\omega_{\\lambda y^*}$", "$\\omega_{\\mu x^*}$",
"$\\omega_{\\mu y^*}$")
goals = tibble(Parameter,
Estimative = c(exp(mod_r$gamma), exp(mod_r$tau), mod_r$omega))
kable(goals, digits = 4, caption = "Goal rate parameters")
Parameter = c("$A_\\lambda$", "$A_\\mu$")
reds = tibble(Parameter, Estimative = exp(c(mod_r$a)))
kable(reds, digits = 8, caption = "Red card rate parameters")
Parameters = c("Model", "$\\eta_1$", "$\\eta_2$", "$\\phi_1$", "$\\phi_2$",
"$\\rho_1$", "$\\rho_2$", "$\\kappa$")
st = tibble(Parameter,
Estimative = c(mod_r$eta, mod_r$phi, mod_r$rho, mod_r$kappa)
kable(st, digits = 4, caption = "Stoppage time parameters")
Parameters = c("Model", "$\\eta_1$", "$\\eta_2$", "$\\phi_1$", "$\\phi_2$",
"$\\rho_1$", "$\\rho_2$", "$\\kappa$")
st = tibble(Parameter,
Estimative = c(mod_r$eta, mod_r$phi, mod_r$rho, mod_r$kappa))
Parameters = c("$\\eta_1$", "$\\eta_2$", "$\\phi_1$", "$\\phi_2$",
"$\\rho_1$", "$\\rho_2$", "$\\kappa$")
st = tibble(Parameter,
Estimative = c(mod_r$eta, mod_r$phi, mod_r$rho, mod_r$kappa))
Parameters = c("$\\eta_1$", "$\\eta_2$", "$\\phi_1$", "$\\phi_2$",
"$\\rho_1$", "$\\rho_2$", "$\\kappa$")
st = tibble(Parameter,
Estimative = c(mod_r$eta, mod_r$phi, mod_r$rho, mod_r$kappa))
mod_r$ c(mod_r$eta, mod_r$phi, mod_r$rho, mod_r$kappa)
c(mod_r$eta, mod_r$phi, mod_r$rho, mod_r$kappa)
a =  c(mod_r$eta, mod_r$phi, mod_r$rho, mod_r$kappa)
a
tibble(Parameter, a)
Parameter
Parameters = c("$\\eta_1$", "$\\eta_2$", "$\\phi_1$", "$\\phi_2$",
"$\\rho_1$", "$\\rho_2$", "$\\kappa$")
Parameters = c("$\\eta_1$", "$\\eta_2$", "$\\phi_1$", "$\\phi_2$",
"$\\rho_1$", "$\\rho_2$", "$\\kappa$")
st = tibble(Parameter,
Estimative = c(mod_r$eta, mod_r$phi, mod_r$rho, mod_r$kappa))
st = tibble(Parameter,
Estimative = c(mod_r$eta, mod_r$phi, mod_r$rho, mod_r$kappa))
kable(st, digits = 4, caption = "Stoppage time parameters")
st = tibble(Parameter,
Estimative = c(mod_r$eta, mod_r$phi, mod_r$rho, mod_r$kappa))
Parameter = c("$\\eta_1$", "$\\eta_2$", "$\\phi_1$", "$\\phi_2$",
"$\\rho_1$", "$\\rho_2$", "$\\kappa$")
st = tibble(Parameter,
Estimative = c(mod_r$eta, mod_r$phi, mod_r$rho, mod_r$kappa))
kable(st, digits = 4, caption = "Stoppage time parameters")
