source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_2.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_3.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_4.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
View(mod_1)
mod_1
exp92.371969
exp(2.371969)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
mod_1
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_2.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_3.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_4.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
sum(mod_1$alpha) + sum(mod_1$beta)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
sum_entries(alpha)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
View(M1_lambda)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
exp(-4.262322)
library(dplyr)
library(CVXR)
load("dados_serie_a_2019.RData")
load("dados_mod_1.RData")
t0 = Sys.time()
alpha = Variable(n)
beta = Variable(n)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
eta = Variable(2)
phi = Variable(2)
kappa = Variable(1)
pi1 = eta[1] + phi[1] * g1
pi2 = eta[2] + phi[2] * g2 + c * kappa
log_lik = -t(delta1)%*%exp(M1_lambda%*%theta) -t(delta1)%*%exp(M1_mu%*%theta) -t(delta2)%*%exp(M2_lambda%*%theta) -t(delta2)%*%exp(M2_mu%*%theta) +
t(H1)%*%M1_lambda%*%theta + t(A1)%*%M1_mu%*%theta + t(H2)%*%M2_lambda%*%theta + t(A2)%*%M2_mu%*%theta +
t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik)
constraints = list(sum(alpha) + sum(beta) == 0)
problem = Problem(objective, constraints)
set.seed(1)
solution = solve(problem, solver = "MOSEK")
duration = Sys.time() - t0
mod_1 = list(alpha = as.vector(c(solution$getValue(alpha))),
beta = as.vector(solution$getValue(beta)),
gamma = as.vector(solution$getValue(gamma)),
eta = as.vector(solution$getValue(eta)),
phi = as.vector(solution$getValue(phi)),
kappa = as.vector(solution$getValue(kappa)),
value = solution$value,
duration = duration)
names(mod_1$alpha) = times$Time
names(mod_1$beta) = times$Time
save(mod_1, file = "mod_1.RData")
mod_1
sum(mod_1$alpha) + sum(mod_1$beta)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
exp(-4.262332)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_2.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_3.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_4.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
View(M1_lambda)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_2.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_3.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_4.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
View(M1_lambda)
exp(mod_1$alpha)
exp(mod_1$alpha)
exp(mod_1$beta)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
exp(mod_1$gamma)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source("pred_mod_1.R")
pred_mod_1(home_team = "Flamengo", away_team = "Vasco da Gama")
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
M1_lambda[,21:40] = -M1_lambda[,21:40]
M1_mu[,21:40] = -M1_mu[,21:40]
M2_lambda[,21:40] = -M2_lambda[,21:40]
M2_mu[,21:40] = -M2_mu[,21:40]
library(dplyr)
library(CVXR)
load("dados_serie_a_2019.RData")
load("dados_mod_1.RData")
t0 = Sys.time()
alpha = Variable(n)
beta = Variable(n)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
eta = Variable(2)
phi = Variable(2)
kappa = Variable(1)
pi1 = eta[1] + phi[1] * g1
pi2 = eta[2] + phi[2] * g2 + c * kappa
log_lik = -t(delta1)%*%exp(M1_lambda%*%theta) -t(delta1)%*%exp(M1_mu%*%theta) -t(delta2)%*%exp(M2_lambda%*%theta) -t(delta2)%*%exp(M2_mu%*%theta) +
t(H1)%*%M1_lambda%*%theta + t(A1)%*%M1_mu%*%theta + t(H2)%*%M2_lambda%*%theta + t(A2)%*%M2_mu%*%theta +
t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik)
constraints = list()
problem = Problem(objective, constraints)
set.seed(1)
solution = solve(problem, solver = "MOSEK")
duration = Sys.time() - t0
mod_1 = list(alpha = as.vector(c(solution$getValue(alpha))),
beta = as.vector(solution$getValue(beta)),
gamma = as.vector(solution$getValue(gamma)),
eta = as.vector(solution$getValue(eta)),
phi = as.vector(solution$getValue(phi)),
kappa = as.vector(solution$getValue(kappa)),
value = solution$value,
duration = duration)
names(mod_1$alpha) = times$Time
names(mod_1$beta) = times$Time
save(mod_1, file = "mod_1.RData")
mod_1
sum(mod_1$alpha) + sum(mod_1$beta)
exp(mod_1$alpha)
exp(mod_1$beta)
exp(mod_1$gamma)
View(M1_lambda)
library(dplyr)
library(CVXR)
load("dados_serie_a_2019.RData")
load("dados_mod_1.RData")
M1_lambda[,21:40] = -M1_lambda[,21:40]
M1_mu[,21:40] = -M1_mu[,21:40]
M2_lambda[,21:40] = -M2_lambda[,21:40]
M2_mu[,21:40] = -M2_mu[,21:40]
t0 = Sys.time()
alpha = Variable(n)
beta = Variable(n)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
eta = Variable(2)
phi = Variable(2)
kappa = Variable(1)
pi1 = eta[1] + phi[1] * g1
pi2 = eta[2] + phi[2] * g2 + c * kappa
log_lik = -t(delta1)%*%exp(M1_lambda%*%theta) -t(delta1)%*%exp(M1_mu%*%theta) -t(delta2)%*%exp(M2_lambda%*%theta) -t(delta2)%*%exp(M2_mu%*%theta) +
t(H1)%*%M1_lambda%*%theta + t(A1)%*%M1_mu%*%theta + t(H2)%*%M2_lambda%*%theta + t(A2)%*%M2_mu%*%theta +
t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik)
constraints = list()
problem = Problem(objective, constraints)
set.seed(1)
solution = solve(problem, solver = "MOSEK")
duration = Sys.time() - t0
mod_1 = list(alpha = as.vector(c(solution$getValue(alpha))),
beta = as.vector(solution$getValue(beta)),
gamma = as.vector(solution$getValue(gamma)),
eta = as.vector(solution$getValue(eta)),
phi = as.vector(solution$getValue(phi)),
kappa = as.vector(solution$getValue(kappa)),
value = solution$value,
duration = duration)
names(mod_1$alpha) = times$Time
names(mod_1$beta) = times$Time
save(mod_1, file = "mod_1.RData")
mod_1
sum(mod_1$alpha) + sum(mod_1$beta)
exp(mod_1$alpha)
exp(mod_1$beta)
exp(mod_1$gamma)
sum(alpha)
sum(mod_1$alpha)
sum(mod_1$beta)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
library(dplyr)
library(CVXR)
load("dados_serie_a_2019.RData")
load("dados_mod_1.RData")
M1_lambda[,21:40] = -M1_lambda[,21:40]
M1_mu[,21:40] = -M1_mu[,21:40]
M2_lambda[,21:40] = -M2_lambda[,21:40]
M2_mu[,21:40] = -M2_mu[,21:40]
t0 = Sys.time()
alpha = Variable(n)
beta = Variable(n)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
eta = Variable(2)
phi = Variable(2)
kappa = Variable(1)
pi1 = eta[1] + phi[1] * g1
pi2 = eta[2] + phi[2] * g2 + c * kappa
log_lik = -t(delta1)%*%exp(M1_lambda%*%theta) -t(delta1)%*%exp(M1_mu%*%theta) -t(delta2)%*%exp(M2_lambda%*%theta) -t(delta2)%*%exp(M2_mu%*%theta) +
t(H1)%*%M1_lambda%*%theta + t(A1)%*%M1_mu%*%theta + t(H2)%*%M2_lambda%*%theta + t(A2)%*%M2_mu%*%theta +
t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik)
constraints = list(sum(alpha) - sum(beta) == 0)
problem = Problem(objective, constraints)
set.seed(1)
solution = solve(problem, solver = "MOSEK")
duration = Sys.time() - t0
mod_1 = list(alpha = as.vector(c(solution$getValue(alpha))),
beta = as.vector(solution$getValue(beta)),
gamma = as.vector(solution$getValue(gamma)),
eta = as.vector(solution$getValue(eta)),
phi = as.vector(solution$getValue(phi)),
kappa = as.vector(solution$getValue(kappa)),
value = solution$value,
duration = duration)
names(mod_1$alpha) = times$Time
names(mod_1$beta) = times$Time
save(mod_1, file = "mod_1.RData")
mod_1
sum(mod_1$alpha) + sum(mod_1$beta)
exp(mod_1$alpha)
exp(mod_1$beta)
exp(mod_1$gamma)
sum(mod_1$alpha) - sum(mod_1$beta)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_2.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_3.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/dados_mod_4.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
1/0.13220905
sum(exp(mod_1$alpha))
sum(exp(mod_1$beta))
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_1.R', echo=TRUE)
source("pred_mod_0.R")
source("pred_mod_1.R")
source("pred_mod_2.R")
source("pred_mod_3.R")
pred_mod_0(home_team = "Flamengo", away_team = "Vasco da Gama")
pred_mod_1(home_team = "Flamengo", away_team = "Vasco da Gama")
pred_mod_1(home_team = "Flamengo", away_team = "Vasco da Gama")
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_2.R', echo=TRUE)
mod_2
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_3.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/outra_formulacao_mod_3.R', echo=TRUE)
mod_3
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_3_Rsolnp.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_3_Rsolnp.R', echo=TRUE)
pars = rep(0.5, 2*n+11)
pars = rep(0.5, 2*n+11)
alpha = parss[1:n]
beta = par[n:(2*n)]
gamma = pars[2*n+1]
tau = pars[2*n+2]
lambda_xy = pars[c(2*n+3, 2*n+4)]
mu_xy = pars[c(2*n+5, 2*n+6)]
theta = c(alpha, beta, gamma, tau, lambda_xy, mu_xy)
eta = pars[c(2*n+7, 2*n+8)]
phi = pars[c(2*n+9, 2*n+10)]
kappa = pars[2*n+11]
pi1 = eta[1] + phi[1] * g1
pi2 = eta[2] + phi[2] * g2 + c * kappa
M1_lambda%*%theta
theta
alpha = pars[1:n]
beta = pars[n:(2*n)]
gamma = pars[2*n+1]
tau = pars[2*n+2]
lambda_xy = pars[c(2*n+3, 2*n+4)]
mu_xy = pars[c(2*n+5, 2*n+6)]
theta = c(alpha, beta, gamma, tau, lambda_xy, mu_xy)
theta
exp(M1_lambda%*%theta)
M1_lambda%*%theta
dim(M1_lambda)
length(theta)
View(M1_lambda)
theta
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_3_Rsolnp.R', echo=TRUE)
?solnp
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_3_Rsolnp.R', echo=TRUE)
load("mod_3.RData")
plot(mod_3$alpha, mod_3_Rsolnp$alpha)
plot(mod_3$beta, mod_3_Rsolnp$beta)
cor(mod_3$beta, mod_3_Rsolnp$beta)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_3_Rsolnp.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/preds.R', echo=TRUE)
?model.matrix
library(CVXR)
goals = c(x, y)
alpha = as.factor(c(i, j))
beta = as.factor(c(j, i))
gamma = c(rep(1, N), rep(0, N))
library(CVXR)
load("dados_serie_a_2019.RData")
goals = c(x, y)
alpha = as.factor(c(i, j))
beta = as.factor(c(j, i))
gamma = c(rep(1, N), rep(0, N))
model.matrix(~ alpha + beta + gamma - 1)
mat = model.matrix(~ alpha + beta + gamma - 1)
View(mat)
mat = model.matrix(~ alpha + beta + gamma + 0)
View(may)
View(mat)
df = data.frame(alpha, beta, gamma)
df
testFrame <- data.frame(First=sample(1:10, 20, replace=T),
Second=sample(1:20, 20, replace=T), Third=sample(1:10, 20, replace=T),
Fourth=rep(c("Alice","Bob","Charlie","David"), 5),
Fifth=rep(c("Edward","Frank","Georgia","Hank","Isaac"),4))
testframe
testFrame
contrats
contrasts
contrasts.arg = lapply(testFrame[,4:5], contrasts, contrasts=FALSE)
testFrame <- data.frame(First=sample(1:10, 20, replace=T),
Second=sample(1:20, 20, replace=T), Third=sample(1:10, 20, replace=T),
Fourth=rep(c("Alice","Bob","Charlie","David"), 5),
Fifth=rep(c("Edward","Frank","Georgia","Hank","Isaac"),4))
contrasts.arg = lapply(testFrame[,4:5], contrasts, contrasts=FALSE)
lapply(testFrame[,4:5], contrasts, contrasts = FALSE)
model.matrix(~ First + Second + Third + Fourth + Fifth, data=testFrame)
library(caret)
install.packages("caret")
install.packages("caret")
library(caret)
dmy <- dummyVars(" ~ .", data = testFrame)
testFrame2 <- data.frame(predict(dmy, newdata = testFrame))
View(testFrame2)
testFrame2 <- data.frame(predict(dmy, newdata = testFrame))
dmy <- dummyVars(" ~ .", data = testFrame)
View(dmy)
dmy <- dummyVars(" ~ .", data = df)
df2 <- data.frame(predict(dmy, newdata = df))
View(df2)
?dummyVars
?predict
library(CVXR)
load("dados_serie_a_2019.RData")
goals = c(x, y)
alpha = as.factor(c(i, j))
beta = as.factor(c(j, i))
gamma = c(rep(1, N), rep(0, N))
# https://stackoverflow.com/questions/4560459/all-levels-of-a-factor-in-a-model-matrix-in-r
df = data.frame(alpha, beta, gamma)
dmy = caret::dummyVars(" ~ .", data = df)
mat = matrix(predict(dmy, newdata = df))
View(mat)
library(CVXR)
load("dados_serie_a_2019.RData")
goals = c(x, y)
alpha = as.factor(c(i, j))
beta = as.factor(c(j, i))
gamma = c(rep(1, N), rep(0, N))
# https://stackoverflow.com/questions/4560459/all-levels-of-a-factor-in-a-model-matrix-in-r
df = data.frame(alpha, beta, gamma)
dmy = caret::dummyVars(" ~ .", data = df)
mat = as.matrix(predict(dmy, newdata = df))
library(CVXR)
load("dados_serie_a_2019.RData")
goals = c(x, y)
alpha = as.factor(c(i, j))
beta = as.factor(c(j, i))
gamma = c(rep(1, N), rep(0, N))
# https://stackoverflow.com/questions/4560459/all-levels-of-a-factor-in-a-model-matrix-in-r
df = data.frame(alpha, beta, gamma)
dmy = caret::dummyVars(" ~ .", data = df)
mat = as.matrix(data.frame((predict(dmy, newdata = df)))
_
library(CVXR)
load("dados_serie_a_2019.RData")
goals = c(x, y)
alpha = as.factor(c(i, j))
beta = as.factor(c(j, i))
gamma = c(rep(1, N), rep(0, N))
# https://stackoverflow.com/questions/4560459/all-levels-of-a-factor-in-a-model-matrix-in-r
df = data.frame(alpha, beta, gamma)
dmy = caret::dummyVars(" ~ .", data = df)
mat = as.matrix(data.frame(predict(dmy, newdata = df)))
View(mat)
library(CVXR)
load("dados_serie_a_2019.RData")
goals = c(x, y)
alpha = as.factor(c(i, j))
beta = as.factor(c(j, i))
gamma = c(rep(1, N), rep(0, N))
# https://stackoverflow.com/questions/4560459/all-levels-of-a-factor-in-a-model-matrix-in-r
df = data.frame(alpha, beta, gamma)
dmy = caret::dummyVars(" ~ .", data = df)
M = as.matrix(data.frame(predict(dmy, newdata = df)))
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
M*theta)
M*theta
library(CVXR)
load("dados_serie_a_2019.RData")
goals = c(x, y)
alpha = as.factor(c(i, j))
beta = as.factor(c(j, i))
gamma = c(rep(1, N), rep(0, N))
# https://stackoverflow.com/questions/4560459/all-levels-of-a-factor-in-a-model-matrix-in-r
df = data.frame(alpha, beta, gamma)
dmy = caret::dummyVars(" ~ .", data = df)
M = as.matrix(data.frame(predict(dmy, newdata = df)))
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
M*theta
M%*%theta
t(x)%*%M%*%theta
M%*%theta
dim(M%*%theta)
dim(x)
length(x)
log_lik = -exp(M%*%theta) + t(goals)%*%M%*%theta
log_lik = t(goals) %*% M %*% theta - exp(M %*% theta)
source('~/.active-rstudio-document', echo=TRUE)
t(goals) %*% M %*% theta - exp(M %*% theta)
dim(exp(M %*% theta))
dim(t(goals) %*% M %*% theta)
goals * M %*% theta - exp(M %*% theta)
library(CVXR)
load("dados_serie_a_2019.RData")
goals = c(x, y)
alpha = as.factor(c(i, j))
beta = as.factor(c(j, i))
gamma = c(rep(1, N), rep(0, N))
# https://stackoverflow.com/questions/4560459/all-levels-of-a-factor-in-a-model-matrix-in-r
df = data.frame(alpha, beta, gamma)
dmy = caret::dummyVars(" ~ .", data = df)
M = as.matrix(data.frame(predict(dmy, newdata = df)))
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
log_lik = sum_entries(goals * M %*% theta - exp(M %*% theta))
objective = Maximize(log_lik)
constraints = list(sum(alpha) - sum(beta) == 0)
problem = Problem(objective, constraints)
set.seed(1)
solution = solve(problem, solver = "MOSEK")
duration = Sys.time() - t0
mod_0 = list(alpha = as.vector(c(solution$getValue(alpha))),
beta = as.vector(solution$getValue(beta)),
gamma = as.vector(solution$getValue(gamma)),
value = solution$value,
duration = duration)
names(mod_0$alpha) = times$Time
names(mod_0$beta) = times$Time
save(mod_0, file = "mod_0.RData")
solution
mod_0
library(CVXR)
load("dados_serie_a_2019.RData")
goals = c(x, y)
alpha = as.factor(c(i, j))
beta = as.factor(c(j, i))
gamma = c(rep(1, N), rep(0, N))
# https://stackoverflow.com/questions/4560459/all-levels-of-a-factor-in-a-model-matrix-in-r
df = data.frame(alpha, beta, gamma)
dmy = caret::dummyVars(" ~ .", data = df)
M = as.matrix(data.frame(predict(dmy, newdata = df)))
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
log_lik = sum_entries(goals * M %*% theta - exp(M %*% theta))
objective = Maximize(log_lik)
constraints = list(sum(alpha) - sum(beta) == 0)
problem = Problem(objective, constraints)
set.seed(1)
solution = solve(problem, solver = "MOSEK")
solution
solution$getValue("alpha")
solution$getValue(alpha)
solution$getValue(beta)
solution$getValue(gamma)
mod_0 = list(alpha = as.vector(c(solution$getValue(alpha))),
beta = as.vector(solution$getValue(beta)),
gamma = as.vector(solution$getValue(gamma)),
value = solution$value,
duration = duration)
duration = Sys.time() - t0
mod_0 = list(alpha = as.vector(c(solution$getValue(alpha))),
beta = as.vector(solution$getValue(beta)),
gamma = as.vector(solution$getValue(gamma)),
value = solution$value,
duration = duration)
source('~/.active-rstudio-document', echo=TRUE)
mod_0
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/mod_0.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/preds.R', echo=TRUE)
