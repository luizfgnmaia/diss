st1 = U1
st1[which(st1 > 10)] = 10
tibble(st1) %>%
count(st1) %>%
mutate(p = n/nrow(.)) %>%
ggplot(aes(x = st1, y = p)) +
geom_bar(position = "dodge", stat = "identity") +
theme_bw() +
xlab("Minutos de acréscimo") +
ylab("Probabilidade") +
scale_x_continuous(breaks = 0:10,
labels = c(0:9, "10+"))
library(dplyr)
library(ggplot2)
load("2020/data/input.RData")
library(dplyr)
library(ggplot2)
load("2020/data/input.RData")
st1 = U1
st1[which(st1 > 10)] = 10
tibble(st1) %>%
count(st1) %>%
mutate(p = n/nrow(.)) %>%
ggplot(aes(x = st1, y = p)) +
geom_bar(position = "dodge", stat = "identity") +
theme_bw() +
xlab("Minutos de acréscimo") +
ylab("Probabilidade") +
scale_x_continuous(breaks = 0:10,
labels = c(0:9, "10+"))
st1 = U1
st1[which(st1 > 10)] = 10
tibble(st1) %>%
count(st1) %>%
ggplot(aes(x = st1, y = p)) +
geom_bar(position = "dodge", stat = "identity") +
theme_bw() +
xlab("Minutos de acréscimo") +
ylab("Probabilidade") +
scale_x_continuous(breaks = 0:10,
labels = c(0:9, "10+"))
st1 = U1
st1[which(st1 > 10)] = 10
tibble(st1) %>%
count(st1) %>%
ggplot(aes(x = st1, y = n)) +
geom_bar(position = "dodge", stat = "identity") +
theme_bw() +
xlab("Minutos de acréscimo") +
ylab("Probabilidade") +
scale_x_continuous(breaks = 0:10,
labels = c(0:9, "10+"))
st1 = U1
st1[which(st1 > 10)] = 10
tibble(st1) %>%
count(st1) %>%
ggplot(aes(x = st1, y = n)) +
geom_bar(position = "dodge", stat = "identity") +
theme_bw() +
xlab("U1") +
ylab("n") +
scale_x_continuous(breaks = 0:10,
labels = c(0:9, "10+"))
st1 = U1
st1[which(st1 > 10)] = 10
tibble(st1) %>%
count(st1) %>%
ggplot(aes(x = st1, y = n)) +
geom_bar(position = "dodge", stat = "identity") +
theme_bw() +
xlab("Stoppage time for the first half") +
ylab("n") +
scale_x_continuous(breaks = 0:10,
labels = c(0:9, "10+"))
st2 = U2
st2[which(st2 > 10)] = 10
tibble(st2) %>%
count(st2) %>%
ggplot(aes(x = st2, y = n)) +
geom_bar(position = "dodge", stat = "identity") +
theme_bw() +
xlab("Stoppage time for the second half") +
ylab("n") +
scale_x_continuous(breaks = 0:10,
labels = c(0:9, "10+"))
st2 = U2
st2[which(st2 > 10)] = 10
tibble(st2) %>%
count(st2) %>%
ggplot(aes(x = st2, y = n)) +
geom_bar(position = "dodge", stat = "identity") +
theme_bw() +
xlab("Stoppage time for the second half") +
ylab("n") +
scale_x_continuous(breaks = 0:10,
labels = c(0:9, "10+"))
st2 = U2
st2[which(st2 > 10)] = 10
tibble(st2) %>%
count(st2) %>%
ggplot(aes(x = st2, y = n)) +
geom_bar(position = "dodge", stat = "identity") +
theme_bw() +
xlab("Stoppage time for the first half") +
ylab("n") +
scale_x_continuous(breaks = 0:10,
labels = c(0:9, "10+"))
library(CVXR)
# Model 1
eta = Variable(2)
pi1 = eta[1]
pi2 = eta[2]
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
A = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
A
dim(log_lik_st)
a=t(U1) %*% log(pi1)
dim(a)
# Model 1
eta = Variable(2)
pi1 = eta[1]
pi2 = eta[2]
log_lik_st = U1 %*% log(pi1) + U2 %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
U1 %*% log(pi1)
dim(U1 %*% log(pi1))
library(CVXR)
load("2020/data/input.RData")
load("2020/data/input_mod_r2.RData")
t0 = Sys.time()
alpha = Variable(n)
beta = Variable(n)
gamma = Variable(1)
tau = Variable(1)
omega = Variable(4)
theta = vstack(alpha, beta, gamma, tau, omega)
eta = Variable(2)
phi = Variable(2)
rho = Variable(2)
kappa = Variable(1)
pi1 = eta[1] + phi[1] * g1 + rho[1] * r1
pi2 = eta[2] + phi[2] * g2 + rho[2] * r2 + c * kappa
a = Variable(2)
loglambda1 = log(delta1) + M1_lambda %*% theta
logmu1 = log(delta1) + M1_mu %*% theta
loglambda2 = log(delta2) + M2_lambda %*% theta
logmu2 = log(delta2) + M2_mu %*% theta
loglambda1s = log(int_reds_1) + a[1]
logmu1s = log(int_reds_1) + a[2]
loglambda2s = log(int_reds_2) + a[1]
logmu2s = log(int_reds_2) + a[2]
log_lik_goals = sum_entries(
- exp(loglambda1) - exp(logmu1) +
H1r*loglambda1 + A1r*logmu1) +
sum_entries(
- exp(loglambda2) - exp(logmu2) +
+ H2r*loglambda2 + A2r*logmu2)
log_lik_reds = sum_entries(
- exp(loglambda1s) - exp(logmu1s) +
H1s*loglambda1s + A1s*logmu1s) +
sum_entries(
- exp(loglambda2s) - exp(logmu2s) +
+ H2s*loglambda2s + A2s*logmu2s)
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
dim(log_lik_st)
a=t(U1) %*% log(pi1)
dim(a)
dim(U1)
length(U1)
dim(U1)
# Model 1
eta = Variable(2)
pi1 = eta[1]
pi2 = eta[2]
log_lik_st = t(U1) * log(pi1) + t(U2) * log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
# Model 1
eta = Variable(2)
pi1 = rep(eta[1], N)
# Model 1
eta = Variable(2)
pi1 = eta[1] * rep(1, N)
pi2 = eta[2] * rep(1, N)
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
solution
# Model 1
eta = Variable(2)
pi1 = eta[1] * rep(1, N)
pi2 = eta[2] * rep(1, N)
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_1 = list(eta = as.vector(solution$getValue(eta)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
g1
# Model 2
eta = Variable(2)
phi = Variable(1)
pi1 = eta[1] + phi * g1
pi2 = eta[2] + phi * g2
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_1 = list(eta = as.vector(solution$getValue(eta)),
phi = as.vector(solution$getValue(phi))
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
# Model 2
eta = Variable(2)
phi = Variable(1)
pi1 = eta[1] + phi * g1
pi2 = eta[2] + phi * g2
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_2 = list(eta = as.vector(solution$getValue(eta)),
phi = as.vector(solution$getValue(phi)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_2
library(dplyr)
library(ggplot2)
library(CVXR)
load("2020/data/input.RData")
st1 = U1
st1[which(st1 > 10)] = 10
tibble(st1) %>%
count(st1) %>%
ggplot(aes(x = st1, y = n)) +
geom_bar(position = "dodge", stat = "identity") +
theme_bw() +
xlab("Stoppage time for the first half") +
ylab("n") +
scale_x_continuous(breaks = 0:10,
labels = c(0:9, "10+"))
st2 = U2
st2[which(st2 > 10)] = 10
tibble(st2) %>%
count(st2) %>%
ggplot(aes(x = st2, y = n)) +
geom_bar(position = "dodge", stat = "identity") +
theme_bw() +
xlab("Stoppage time for the first half") +
ylab("n") +
scale_x_continuous(breaks = 0:10,
labels = c(0:9, "10+"))
# Model 2
eta = Variable(2)
phi = Variable(1)
pi1 = eta[1] + phi * g1
pi2 = eta[2] + phi * g2
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_2 = list(eta = as.vector(solution$getValue(eta)),
phi = as.vector(solution$getValue(phi)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_2
library(dplyr)
library(ggplot2)
library(CVXR)
load("2020/data/input.RData")
st1 = U1
st1[which(st1 > 10)] = 10
tibble(st1) %>%
count(st1) %>%
ggplot(aes(x = st1, y = n)) +
geom_bar(position = "dodge", stat = "identity") +
theme_bw() +
xlab("Stoppage time for the first half") +
ylab("n") +
scale_x_continuous(breaks = 0:10,
labels = c(0:9, "10+"))
st2 = U2
st2[which(st2 > 10)] = 10
tibble(st2) %>%
count(st2) %>%
ggplot(aes(x = st2, y = n)) +
geom_bar(position = "dodge", stat = "identity") +
theme_bw() +
xlab("Stoppage time for the first half") +
ylab("n") +
scale_x_continuous(breaks = 0:10,
labels = c(0:9, "10+"))
# Model 1
eta = Variable(2)
pi1 = eta[1] * rep(1, N)
pi2 = eta[2] * rep(1, N)
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_1 = list(eta = as.vector(solution$getValue(eta)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
# Model 2
eta = Variable(2)
phi = Variable(1)
pi1 = eta[1] + phi * g1
pi2 = eta[2] + phi * g2
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_2 = list(eta = as.vector(solution$getValue(eta)),
phi = as.vector(solution$getValue(phi)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_2
# Model 3
eta = Variable(2)
phi = Variable(1)
rho = Variable(1)
pi1 = eta[1] + phi * g1 + rho * r1
pi2 = eta[2] + phi * g2 + rho * r2
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_3 = list(eta = as.vector(solution$getValue(eta)),
phi = as.vector(solution$getValue(phi)),
rho = as.vector(solution$getValue(rho)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_3
phi
# Model 1
eta = Variable(2)
pi1 = eta[1] * rep(1, N)
pi2 = eta[2] * rep(1, N)
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_1 = list(eta = as.vector(solution$getValue(eta)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_1
?AIC
aic <- function(loglik, k) {
2*k - 2*loglik
}
bic <- function(loglik, k, n) {
k*log(n) - 2*loglik
}
N
# Model 1
eta = Variable(2)
pi1 = eta[1] * rep(1, N)
pi2 = eta[2] * rep(1, N)
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_1 = list(eta = as.vector(solution$getValue(eta)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_1$aic = aic(mod_1$loglik, 2)
mod_1$bic = bic(mod_1$loglik, 2, N)
mod_1
# Model 2
eta = Variable(2)
phi = Variable(1)
pi1 = eta[1] + phi * g
# Model 2
eta = Variable(2)
phi = Variable(1)
pi1 = eta[1] + phi * g1
pi2 = eta[2] + phi * g2
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_2 = list(eta = as.vector(solution$getValue(eta)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_2$aic = aic(mod_2$loglik, 2)
mod_2$bic = bic(mod_2$loglik, 2, N)
mod_2
# Model 1
eta = Variable(2)
pi1 = eta[1] * rep(1, N)
pi2 = eta[2] * rep(1, N)
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_1 = list(eta = as.vector(solution$getValue(eta)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_1$aic = aic(mod_1$loglik, 2)
mod_1$bic = bic(mod_1$loglik, 2, N)
mod_1
# Model 2
eta = Variable(2)
phi = Variable(1)
pi1 = eta[1] + phi * g1
pi2 = eta[2] + phi * g2
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_2 = list(eta = as.vector(solution$getValue(eta)),
phi = as.vector(solution$getValue(phi)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_2$aic = aic(mod_2$loglik, 2)
mod_2$bic = bic(mod_2$loglik, 2, N)
mod_2
# Model 2
eta = Variable(2)
phi = Variable(1)
pi1 = eta[1] + phi * g1
pi2 = eta[2] + phi * g2
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_2 = list(eta = as.vector(solution$getValue(eta)),
phi = as.vector(solution$getValue(phi)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_2$aic = aic(mod_2$loglik, 3)
mod_2$bic = bic(mod_2$loglik, 3, N)
mod_2
# Model 3
eta = Variable(2)
phi = Variable(2)
pi1 = eta[1] + phi[1] * g1
pi2 = eta[2] + phi[2] * g2
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_3 = list(eta = as.vector(solution$getValue(eta)),
phi = as.vector(solution$getValue(phi)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_3$aic = aic(mod_2$loglik, 4)
mod_3$bic = bic(mod_2$loglik, 4, N)
mod_3
# Model 3
eta = Variable(2)
phi = Variable(2)
pi1 = eta[1] + phi[1] * g1
pi2 = eta[2] + phi[2] * g2
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_3 = list(eta = as.vector(solution$getValue(eta)),
phi = as.vector(solution$getValue(phi)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_3$aic = aic(mod_3$loglik, 4)
mod_3$bic = bic(mod_3$loglik, 4, N)
mod_3
# Model 4
eta = Variable(2)
rho = Variable(1)
pi1 = eta[1] + rho * r1
pi2 = eta[2] + rho * r2
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_3 = list(eta = as.vector(solution$getValue(eta)),
rho = as.vector(solution$getValue(rho)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_4$aic = aic(mod_4$loglik, 3)
# Model 4
eta = Variable(2)
rho = Variable(1)
pi1 = eta[1] + rho * r1
pi2 = eta[2] + rho * r2
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_4 = list(eta = as.vector(solution$getValue(eta)),
rho = as.vector(solution$getValue(rho)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_4$aic = aic(mod_4$loglik, 3)
mod_4$bic = bic(mod_4$loglik, 3, N)
mod_4
# Model 4
eta = Variable(2)
rho = Variable(2)
pi1 = eta[1] + rho[1] * r1
pi2 = eta[2] + rho[2] * r2
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_5 = list(eta = as.vector(solution$getValue(eta)),
rho = as.vector(solution$getValue(rho)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_5$aic = aic(mod_5$loglik, 4)
mod_5$bic = bic(mod_5$loglik, 4, N)
mod_5
# Model 4
eta = Variable(2)
rho = Variable(1)
pi1 = eta[1] + rho * r1
pi2 = eta[2] + rho * r2
log_lik_st = t(U1) %*% log(pi1) + t(U2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik_st)
problem = Problem(objective)
solution = solve(problem, solver = "MOSEK")
mod_4 = list(eta = as.vector(solution$getValue(eta)),
rho = as.vector(solution$getValue(rho)),
loglik = solution$value + sum(log(factorial(U1))) + sum(log(factorial(U2))))
mod_4$aic = aic(mod_4$loglik, 3)
mod_4$bic = bic(mod_4$loglik, 3, N)
mod_4
c
```{r}
