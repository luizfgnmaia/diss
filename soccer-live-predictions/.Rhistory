library(dplyr)
library(knitr)
library(reshape2)
library(ggplot2)
load("dados_serie_a_2014_2019.RData")
x = list(); y = list(); xy = list()
for(i in 1:N) {
x[[i]] = c(x1[[i]], x2[[i]])
y[[i]] = c(y1[[i]], y2[[i]])
xy[[i]] = paste(x[[i]], y[[i]], sep = "-")
}
tables = lapply(xy, table)
scores = NULL
c = 0
for(i in 0:3) {
for(j in 0:3) {
c = c + 1
scores[c] = paste(i, j, sep = "-")
}
}
delta_home = list(); delta_away = list(); t = list()
for(i in 1:length(scores)) {
tmp_delta_home = NULL
tmp_delta_away = NULL
tmp_t = NULL
for(k in 1:N) {
if(scores[i] %in% names(tables[[k]])) {
next_score = names(tables[[k]])[which(names(tables[[k]]) ==
names(tables[[k]][scores[i]])) + 1]
if(is.na(next_score)) {
tmp_delta_home[k] = 0
tmp_delta_away[k] = 0
} else {
if(as.integer(substr(next_score, 1, 1)) > as.integer(substr(scores[i], 1, 1))) {
tmp_delta_home[k] = 1
tmp_delta_away[k] = 0
} else {
tmp_delta_home[k] = 0
tmp_delta_away[k] = 1
}
}
tmp_t[k] = tables[[k]][scores[i]]
} else {
tmp_delta_home[k] = 0
tmp_delta_away[k] = 0
tmp_t[k] = 0
}
}
delta_home[[i]] = tmp_delta_home
delta_away[[i]] = tmp_delta_away
t[[i]] = tmp_t
}
rates = NULL; rates_home = NULL; rates_away = NULL
for(i in 1:length(scores)) {
rates[i] = (sum(delta_home[[i]]) + sum(delta_away[[i]])) / sum(t[[i]])
rates_home[i] = sum(delta_home[[i]]) / sum(t[[i]])
rates_away[i] = sum(delta_away[[i]]) / sum(t[[i]])
}
# Crowder pag 66
sd_home = NULL; sd_away = NULL; sd = NULL
for(i in 1:length(scores)) {
sd[i] = rates[i] / sqrt(sum(delta_home[[i]]) + sum(delta_away[[i]]))
sd_home[i] = rates_home[i] / sqrt(sum(delta_home[[i]]))
sd_away[i] = rates_away[i] / sqrt(sum(delta_away[[i]]))
}
tib = tibble(Rate = paste0("$\\nu_{", stringr::str_replace(scores, "-", ""), "}$"),
`Est.(both)` = rates, `Est.(home)` = rates_home, `Est.(away)` = rates_away,
`S.e.(both)` = sd, `S.e.(home)` = sd_home, `S.e.(away)` = sd_away)
kable(tib, digits = 4, caption = "Estimates and standard errors of the rate of the time
to the next goal")
names(rates) = scores
names(rates_home) = scores
names(rates_away) = scores
mat = matrix(NA, nrow = 4, ncol = 4)
rownames(mat) = paste0(0:3)
colnames(mat) = paste0(0:3)
mat_home = mat
mat_away = mat
for(i in 1:4) {
for(j in 1:4) {
mat[i,j] = rates[paste(i-1, j-1, sep = "-")]
mat_home[i,j] = rates_home[paste(i-1, j-1, sep = "-")]
mat_away[i,j] = rates_away[paste(i-1, j-1, sep = "-")]
}
}
melted_mat = melt(mat) %>%
rename(x = Var1, y = Var2)
melted_mat_home = melt(mat_home) %>%
rename(x = Var1, y = Var2)
melted_mat_away = melt(mat_away) %>%
rename(x = Var1, y = Var2)
ggplot(data = melted_mat, aes(x, y, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
midpoint = 0.028, limit = c(0.016, 0.04),
name= "Rate") +
geom_text(aes(x, y, label = round(value, 4)), color = "black") +
theme(panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank()) +
ggtitle(expression(paste(hat(nu)[xy], " for the both teams"))) +
guides(fill = guide_legend(title = expression(hat(nu)[xy])))
ggplot(data = melted_mat_home, aes(x, y, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
midpoint = 0.014, limit = c(0.008, 0.02),
name= "Rate") +
geom_text(aes(x, y, label = round(value, 4)), color = "black") +
theme(panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank()) +
ggtitle(expression(paste(hat(nu)[xy], " for the home team"))) +
guides(fill = guide_legend(title = expression(hat(nu)[xy])))
ggplot(data = melted_mat_away, aes(x, y, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
midpoint = 0.014, limit = c(0.008, 0.02),
name= "Rate") +
geom_text(aes(x, y, label = round(value, 4)), color = "black") +
theme(panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank()) +
ggtitle(expression(paste(hat(nu)[xy], " for the away team"))) +
guides(fill = guide_legend(title = expression(hat(nu)[xy])))
