xlab("Log-likelihood") +
ylab("Count") +
ggtitle("Scores model 0")
sum(sims[["loglik_scores_mod_0"]] >= loglik_observed_scores_mod_0) / length(sims[["loglik_scores_mod_0"]])
tibble(x = sims[["loglik_results_mod_3"]]) %>%
ggplot(aes(x = x)) +
geom_histogram(bins = 50) +
theme_bw() +
geom_vline(xintercept = loglik_observed_results_mod_3, col = "red") +
xlab("Log-likelihood") +
ylab("Count") +
ggtitle("Results model 3")
sum(sims[["loglik_results_mod_0"]] <= loglik_observed_results_mod_3) / length(sims[["loglik_results_mod_3"]])
sum(sims[["loglik_results_mod_3"]] <= loglik_observed_results_mod_3) / length(sims[["loglik_results_mod_3"]])
sum(sims[["loglik_scores_mod_3"]] <= loglik_observed_scores_mod_3) / length(sims[["loglik_scores_mod_3"]])
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/goodness_of_fit_dc.R', echo=TRUE)
library(future.apply)
pred_mod_8 <- function(mod_8, n = 10^5, home_team, away_team, score_home = 0, score_away = 0, reds_home_1 = 0, reds_away_1 = 0, reds_home_2 = 0, reds_away_2 = 0, minute = 0, half = 1, end_minute = 45, end_half = 2, stoppage_time = TRUE) {
if(!is.numeric(n) | n <= 0) {
stop("Invalid n.")
}
n = as.integer(ceiling(n))
if(!home_team %in% names(mod_8$alpha)) {
stop("Invalid home team.")
}
if(!away_team %in% names(mod_8$alpha)) {
stop("Invalid away team.")
}
if(!is.numeric(score_home) | score_home < 0) {
stop("Invalid score_home.")
}
if(!is.numeric(score_away) | score_away < 0) {
stop("Invalid score_away.")
}
if(!is.numeric(reds_home_1) | reds_home_1 < 0) {
stop("Invalid reds_home_1.")
}
if(!is.numeric(reds_away_1) | reds_away_1 < 0) {
stop("Invalid reds_away_1.")
}
if(!is.numeric(reds_home_2) | reds_home_2 < 0) {
stop("Invalid reds_home_1.")
}
if(!is.numeric(reds_away_2) | reds_away_2 < 0) {
stop("Invalid reds_away_2.")
}
if(minute > 45 | minute < 0) {
stop("Invalid minute.")
}
if(!half %in% c(1,2)) {
stop("Invalid half.")
}
if((end_minute > 45 | end_minute < 0)) {
stop("Invalid end_minute.")
}
if(!end_half %in% c(1,2)) {
stop("Invalid end_half.")
}
if(!is.logical(stoppage_time)) {
stop("stoppage_time must be boolean.")
}
if(end_half < half) {
stop("end_half can't be smaller than half.")
} else if(end_half == half) {
if(end_minute < minute) {
stop("end_minute needs to be bigger than minute.")
} else if(end_minute == minute & stoppage_time == FALSE) {
stop("end_minute needs to be bigger than minute or stoppage_time needs to be TRUE.")
}
}
pred <- function(home_team, away_team, score_home, score_away, reds_home_1, reds_away_1, reds_home_2, reds_away_2, minute, half, end_minute, end_half, stoppage_time) {
reds_home = reds_home_1 + reds_home_2
reds_away = reds_away_1 + reds_away_2
if(end_minute < 45) {
stoppage_time = FALSE
}
if(end_half == 1) {
half = 1
}
if(half == 2) {
end_half = 2
}
# Passo 1: tempo regulamentar do primeiro tempo
if(half == 1) {
if(end_half == 1) {
end_1st = end_minute
} else {
end_1st = 45
}
# Gerando expulsões para o time mandante
t = minute
s = (1/2) * A_lambda * t^2 # começando do minuto t
t_reds_home = NULL
while(t < end_1st) {
u = runif(1)
s = s - log(u)
t = inv_lambda(s)
if(t < end_1st) {
t_reds_home = c(t_reds_home, t)
}
}
# Gerando expulsões para o time visitante
t = minute
s = (1/2) * A_mu * t^2 # começando do minuto t
t_reds_away = NULL
while(t < end_1st) {
u = runif(1)
s = s - log(u)
t = inv_mu(s)
if(t < end_1st) {
t_reds_away = c(t_reds_away, t)
}
}
# Gerando gols para ambos os times
while(minute < end_1st) {
ind_xy = xy(score_home, score_away)
lambda = exp(alpha_i + beta_j + gamma + lambda_xy[ind_xy] + omega_red*(reds_away-reds_home))
mu = exp(alpha_j + beta_i + mu_xy[ind_xy] + omega_red*(reds_home-reds_away))
next_home_goal = rexp(1, rate = lambda) + minute
next_away_goal = rexp(1, rate = mu) + minute
next_home_red = t_reds_home[t_reds_home > minute][1]
if(length(next_home_red) == 0) {
next_home_red = Inf
} else if(is.na(next_home_red)) {
next_home_red = Inf
}
next_away_red = t_reds_away[t_reds_away > minute][1]
next_event = min(next_home_goal, next_away_goal, next_home_red, next_away_red, na.rm = TRUE)
if(next_event < end_1st) {
minute = next_event
if(next_home_goal == minute) {
score_home = score_home + 1
} else if(next_away_goal == minute) {
score_away = score_away + 1
} else if(next_home_red == minute) {
reds_home = reds_home + 1
} else {
reds_away = reds_away + 1
}
} else {
minute = end_1st
}
}
# Passo 2: acréscimos do primeiro tempo
if(stoppage_time == TRUE | end_half == 2) {
U1 = rpois(1, lambda = eta[1] + rho[1]*(reds_home + reds_away))
# Gerando expulsões para o time mandante
t = 45
s = (1/2) * A_lambda * t^2 # começando do minuto 45
t_reds_home_st = NULL
while(t < 45 + U1) {
u = runif(1)
s = s - log(u)
t = inv_lambda(s)
if(t < 45) {
t_reds_home_st = c(t_reds_home_st, t)
}
}
# Gerando expulsões para o time visitante
t = 45
s = (1/2) * A_mu * t^2 # começando do minuto 45
t_reds_away_st = NULL
while(t < 45 + U1) {
u = runif(1)
s = s - log(u)
t = inv_mu(s)
if(t < 45 + U1) {
t_reds_away_st = c(t_reds_away, t)
}
}
# Gerando gols para ambos os times
while(minute < 45 + U1) {
ind_xy = xy(score_home, score_away)
lambda = exp(alpha_i + beta_j + gamma + lambda_xy[ind_xy] + omega_red*(reds_away-reds_home))
mu = exp(alpha_j + beta_i + mu_xy[ind_xy] + omega_red*(reds_home-reds_away))
next_home_goal = rexp(1, rate = lambda) + minute
next_away_goal = rexp(1, rate = mu) + minute
next_home_red = t_reds_home[t_reds_home > minute][1]
if(length(next_home_red) == 0) {
next_home_red = Inf
} else if(is.na(next_home_red)) {
next_home_red = Inf
}
next_away_red = t_reds_away[t_reds_away > minute][1]
next_event = min(next_home_goal, next_away_goal, next_home_red, next_away_red, na.rm = TRUE)
if(next_event < 45 + U1) {
minute = next_event
if(next_home_goal == minute) {
score_home = score_home + 1
} else if(next_away_goal == minute) {
score_away = score_away + 1
} else if(next_home_red == minute) {
reds_home = reds_home + 1
} else {
reds_away = reds_away + 1
}
} else {
minute = 45 + U1
half = 2
}
}
minute = 0
reds_home_1 = reds_home
reds_away_1 = reds_away
}
}
# Passo 3: tempo regulamentar do segundo tempo
if(end_half == 2) {
end_2nd = end_minute
# Gerando expulsões para o time mandante
t = minute + 45
s = (1/2) * A_lambda * t^2 # começando do minuto t
t_reds_home = NULL
while(t < end_2nd + 45) { # antes de calcular os acréscimos
u = runif(1)
s = s - log(u)
t = inv_lambda(s)
if(t < end_2nd + 45) {
t_reds_home = c(t_reds_home, t - 45)
}
}
# Gerando expulsões para o time visitante
t = minute + 45
s = (1/2) * A_mu * t^2 # começando do minuto t
t_reds_away = NULL
while(t < end_2nd + 45) { # antes de calcular os acréscimos
u = runif(1)
s = s - log(u)
t = inv_mu(s)
if(t < end_2nd + 45) {
t_reds_away = c(t_reds_away, t - 45)
}
}
# Gerando gols para ambos os times
while(minute < end_2nd) {
ind_xy = xy(score_home, score_away)
lambda = exp(alpha_i + beta_j + gamma + tau + lambda_xy[ind_xy] + omega_red*(reds_away-reds_home))
mu = exp(alpha_j + beta_i + tau + mu_xy[ind_xy] + omega_red*(reds_home-reds_away))
next_home_goal = rexp(1, rate = lambda) + minute
next_away_goal = rexp(1, rate = mu) + minute
next_home_red = t_reds_home[t_reds_home > minute][1]
if(length(next_home_red) == 0) {
next_home_red = Inf
} else if(is.na(next_home_red)) {
next_home_red = Inf
}
next_away_red = t_reds_away[t_reds_away > minute][1]
next_event = min(next_home_goal, next_away_goal, next_home_red, next_away_red, na.rm = TRUE)
if(next_event < end_2nd) {
minute = next_event
if(next_home_goal == minute) {
score_home = score_home + 1
} else if(next_away_goal == minute) {
score_away = score_away + 1
} else if(next_home_red == minute) {
reds_home = reds_home + 1
} else {
reds_away = reds_away + 1
}
} else {
minute = end_2nd
}
}
# Passo 4: acréscimos do segundo
if(stoppage_time == TRUE) {
U2 = rpois(1, lambda = eta[2] + rho[2]*(reds_home + reds_away - reds_home_1 - reds_away_1))
# Gerando expulsões para o time mandante
t = 90
s = (1/2) * A_lambda * t^2 # começando do minuto 90
t_reds_home_st = NULL
while(t < 90 + U2) {
u = runif(1)
s = s - log(u)
t = inv_lambda(s)
if(t < 90 + U2) {
t_reds_home_st = c(t_reds_home_st, t - 45)
}
}
# Gerando expulsões para o time visitante
t = 90
s = (1/2) * A_mu * t^2 # começando do minuto 90
t_reds_away_st = NULL
while(t < 90 + U2) {
u = runif(1)
s = s - log(u)
t = inv_mu(s)
if(t < 90 + U2) {
t_reds_away_st = c(t_reds_away, t - 45)
}
}
# Gerando gols para ambos os times
while(minute < 45 + U2) {
ind_xy = xy(score_home, score_away)
lambda = exp(alpha_i + beta_j + gamma + tau + lambda_xy[ind_xy] + omega_red*(reds_away-reds_home))
mu = exp(alpha_j + beta_i + tau + mu_xy[ind_xy] + omega_red*(reds_home-reds_away))
next_home_goal = rexp(1, rate = lambda) + minute
next_away_goal = rexp(1, rate = mu) + minute
next_home_red = t_reds_home[t_reds_home > minute][1]
if(length(next_home_red) == 0) {
next_home_red = Inf
} else if(is.na(next_home_red)) {
next_home_red = Inf
}
next_away_red = t_reds_away[t_reds_away > minute][1]
next_event = min(next_home_goal, next_away_goal, next_home_red, next_away_red, na.rm = TRUE)
if(next_event < 45 + U2) {
minute = next_event
if(next_home_goal == minute) {
score_home = score_home + 1
} else if(next_away_goal == minute) {
score_away = score_away + 1
} else if(next_home_red == minute) {
reds_home = reds_home + 1
} else {
reds_away = reds_away + 1
}
} else {
minute = 45 + U2
}
}
}
}
c(score_home, score_away)
}
inv_lambda <- function(x) {
(2*x/A_lambda)^(1/2)
}
inv_mu <- function(x) {
(2*x/A_mu)^(1/2)
}
xy <- function(x, y) {
if(x == y) {
return(1)
} else if(x >= y) {
return(2)
} else if(x <= y) {
return(3)
} else {
raise("Error")
}
}
alpha_i = mod_8$alpha[home_team]
beta_i = mod_8$beta[home_team]
alpha_j = mod_8$alpha[away_team]
beta_j = mod_8$beta[away_team]
gamma = mod_8$gamma
tau = mod_8$tau
lambda_xy = c(0, mod_8$omega_xy)
mu_xy = c(0, rev(mod_8$omega_xy))
omega_red = mod_8$omega["red"]
A_lambda = exp(mod_8$a[1])
A_mu = exp(mod_8$a[2])
eta = mod_8$eta
rho = mod_8$rho
if(rho[1] < 0) {
rho[1] = 0
}
if(rho[2] < 0) {
rho[2] = 0
}
lst = future_lapply(1:n, function(x) pred(home_team, away_team, score_home, score_away, reds_home_1, reds_away_1, reds_home_2, reds_away_2, minute, half, end_minute, end_half, stoppage_time),
future.seed = TRUE)
scores = do.call(rbind, lst)
colnames(scores) = c(home_team, away_team)
home_win = sum(scores[,1] > scores[,2])/n
away_win = sum(scores[,1] < scores[,2])/n
draw = 1 - home_win - away_win
winner = c(home_win, draw, away_win)
names(winner) = c(home_team, "Draw", away_team)
freq_scores = sort(table(paste0(scores[,1], "-", scores[,2])), decreasing = TRUE)/n
list("Result" = winner, "Score" = freq_scores)
}
load("2015-2020/data/mod_8.RData")
pred_mod_8
pred_mod_8(mod_8, home_team = "Flamengo", away_team = "Internacional")
pred_mod_8(mod_8, home_team = "Internacional", away_team = "Flamengo")
mod_8$omega_xy
lambda_xy = c(0, mod_8$omega_xy)
mu_xy = c(0, rev(mod_8$omega_xy))
lambda_xy
mu_xy
log(0)
exp(0)
load("2015-2020/data/mod_0.RData")
source("pred/pred_mod_0.RData")
source("pred/pred_mod_0.R")
pred_mod_8(mod_0, home_team = "Flamengo", away_team = "Internacional")
pred_mod_0(mod_0, home_team = "Flamengo", away_team = "Internacional")
pred_mod_0(mod_0, home_team = "Flamengo", away_team = "Internacional")
pred_mod_8(mod_8, home_team = "Flamengo", away_team = "Internacional")
pred_mod_0(mod_0, home_team = "Internacional", away_team = "Flamengo")
pred_mod_8(mod_8, home_team = "Internacional", away_team = "Flamengo")
pred_mod_0(mod_0, home_team = "Internacional", away_team = "Flamengo")
pred_mod_8(mod_8, home_team = "Internacional", away_team = "Flamengo")
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/HDA_dc.R', echo=TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
HDA = HDA_dc %>%
anti_join(first_matches)
nrow(HDA)
names(HDA)
HDA[which(HDA == 0, arr.ind = TRUE)]
HDA[which(HDA == 0, arr.ind = TRUE)] %>% sum()
HDA[which(HDA == 0, arr.ind = TRUE)]
View(HDA)
HDA[,c(9:98)][which(HDA[,c(9:98)] == 0, arr.ind = TRUE)]
HDA[,c(9:98)][which(HDA[,c(9:98)] == 0, arr.ind = TRUE)]
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/goodness_of_fit_dc.R', echo=TRUE)
library(dplyr)
library(stringr)
load("weight/data/predictions_mod_0_dc.RData")
load("weight/data/predictions_mod_3_dc.RData")
load("weight/data/predictions_mod_8_dc.RData")
load("weight/data/HDA_dc.RData")
load("weight/data/first_matches.RData")
first_matches = first_matches %>%
mutate(tmp = 1)
HDA_dc = HDA_dc %>%
left_join(first_matches)
matches_to_remove = which(HDA_dc$tmp == 1)
predictions_mod_0_dc = predictions_mod_0_dc[-matches_to_remove]
predictions_mod_3_dc = predictions_mod_3_dc[-matches_to_remove]
predictions_mod_8_dc = predictions_mod_8_dc[-matches_to_remove]
probabilities <- function(predictions) {
H = NULL
D = NULL
A = NULL
lst_home = list()
lst_away = list()
for(i in 1:length(predictions)) {
H[i] = predictions[[i]]$pred_0$Result[1]
D[i] = predictions[[i]]$pred_0$Result[2]
A[i] = predictions[[i]]$pred_0$Result[3]
score = predictions[[i]]$pred_0$Score
home = str_extract(names(score), ".*(?=-)")
away = str_extract(names(score), "(?<=-).*")
tib_score = tibble()
for(j in 1:length(score)) {
tmp = tibble(Home = home[j], Away = away[j], p = score[j])
tib_score = rbind(tib_score, tmp)
}
home_goals = NULL
away_goals = NULL
for(g in 0:4) {
home_goals[g+1] = tib_score %>%
filter(Home == g) %>%
.$p %>%
sum()
away_goals[g+1] = tib_score %>%
filter(Away == g) %>%
.$p %>%
sum()
}
home_goals[6] = 1 - sum(home_goals)
away_goals[6] = 1 - sum(away_goals)
}
lst_home[[i]] = home_goals
lst_away[[i]] = away_goals
Results = c(mean(H), mean(D), mean(A))
names(Results) = c("Home", "Away", "Draw")
mat_home = do.call(rbind, lst_home)
mat_away = do.call(rbind, lst_away)
Home_Goals = apply(mat_home, 2, mean)
Away_Goals = apply(mat_away, 2, mean)
names(Home_Goals) = c(0:4, "5+")
names(Away_Goals) = c(0:4, "5+")
list(Results = Results, Home_Goals = Home_Goals, Away_Goals = Away_Goals)
}
prob_mod_0_dc = probabilities(predictions_mod_0_dc)
prob_mod_3_dc = probabilities(predictions_mod_3_dc)
prob_mod_8_dc = probabilities(predictions_mod_8_dc)
x = NULL
y = NULL
tmp = NULL
for(i in 1:length(predictions_mod_0_dc)) {
x[i] = predictions_mod_0_dc[[i]]$Match$Score_Home
y[i] = predictions_mod_0_dc[[i]]$Match$Score_Away
tmp[i] = ifelse(x[i] > y[i], "Home",
ifelse(x[i] == y[i], "Draw",
"Away"))
}
Results = c(sum(tmp == "Home"), sum(tmp == "Draw"), sum(tmp == "Away")) / length(tmp)
Home_Goals = c(sum(x == 0), sum(x == 1), sum(x == 2), sum(x == 3), sum(x == 4), sum(x >= 5)) / length(x)
Away_Goals = c(sum(y == 0), sum(y == 1), sum(y == 2), sum(y == 3), sum(y == 4), sum(y >= 5)) / length(y)
tmp = list(Results = Results, Home_Goals = Home_Goals, Away_Goals = Away_Goals)
lst = list(tmp, prob_mod_0_dc, prob_mod_3_dc, prob_mod_8_dc)
tab_results = matrix(NA, ncol = 3, nrow = 4)
tab_home_goals = matrix(NA, ncol = 6, nrow = 4)
tab_away_goals = matrix(NA, ncol = 6, nrow = 4)
for(i in 1:length(lst)) {
tab_results[i,] = lst[[i]]$Results
tab_home_goals[i,] = lst[[i]]$Home_Goals
tab_away_goals[i,] = lst[[i]]$Away_Goals
}
rownames(tab_results) = c("Observed", paste("Model", c("0", "3", "8")))
rownames(tab_home_goals) = c("Observed", paste("Model", c("0", "3", "8")))
rownames(tab_away_goals) = c("Observed", paste("Model", c("0", "3", "8")))
colnames(tab_results) = c("Home", "Draw", "Away")
colnames(tab_home_goals) = c(0:4, "5+")
colnames(tab_away_goals) = c(0:4, "5+")
kable(tab_results, digits = 4)
kable(tab_home_goals, digits = 4)
kable(tab_away_goals, digits = 4)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/goodness_of_fit_dc.R', echo=TRUE)
load("weight/data/goodness_of_fit_dc.RData")
loglik_observed_scores_mod_8
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/goodness_of_fit_dc.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/goodness_of_fit_dc.R', encoding = 'UTF-8', echo=TRUE)
