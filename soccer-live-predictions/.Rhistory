panel.background = element_blank(),
axis.ticks = element_blank()) +
ggtitle("Rate of the time to the away goal while the score is (x, y)")
ts = NULL; Js = NULL;
for(k in 1:N) {
ts[[k]] = c(t1s[[k]], t2s[[k]]+45+U1[[k]])
Js[[k]] = c(J1s[[k]], J2s[[k]])
}
delta_home = list(); delta_away = list(); t = list()
for(i in 1:length(scores)) {
tmp_delta_home = NULL; tmp_delta_away = NULL; tmp_t = NULL
for(k in 1:N) {
if(scores[i] %in% names(tables[[k]])) {
w = which(xy[[k]] == scores[i])
start = w[1]
end = w[length(w)]
tmp_t[k] = end - start
tmp_delta_home[k] = sum((ts[[k]] %in% start:end) * !Js[[k]])
tmp_delta_away[k] = sum((ts[[k]] %in% start:end) * Js[[k]])
} else {
tmp_delta_home[k] = 0
tmp_delta_away[k] = 0
tmp_t[k] = 0
}
}
delta_home[[i]] = tmp_delta_home
delta_away[[i]] = tmp_delta_away
t[[i]] = tmp_t
}
rates = NULL; rates_home = NULL; rates_away = NULL
for(i in 1:length(scores)) {
rates[i] = (sum(delta_home[[i]]) + sum(delta_away[[i]])) / sum(t[[i]])
rates_home[i] = sum(delta_home[[i]]) / sum(t[[i]])
rates_away[i] = sum(delta_away[[i]]) / sum(t[[i]])
}
sd_home = NULL; sd_away = NULL; sd = NULL
for(i in 1:length(scores)) {
sd[i] = rates[i] / sqrt(sum(delta_home[[i]]) + sum(delta_away[[i]]))
sd_home[i] = rates_home[i] / sqrt(sum(delta_home[[i]]))
sd_away[i] = rates_away[i] / sqrt(sum(delta_away[[i]]))
}
rates_away[which(rates_away == 0)] = NA
tib = tibble(Rate = paste0("$\\rho_{", stringr::str_replace(scores, "-", ""), "}$"),
`Est.(both)` = rates, `Est.(home)` = rates_home, `Est.(away)` = rates_away,
`S.e.(both)` = sd, `S.e.(home)` = sd_home, `S.e.(away)` = sd_away)
kable(tib, digits = 4, caption = "Estimates and standard errors of the rate of the time
to the next goal")
names(rates) = scores
names(rates_home) = scores
names(rates_away) = scores
mat = matrix(NA, nrow = 4, ncol = 4)
rownames(mat) = paste0(0:3)
colnames(mat) = paste0(0:3)
mat_home = mat
mat_away = mat
for(i in 1:4) {
for(j in 1:4) {
mat[i,j] = rates[paste(i-1, j-1, sep = "-")]
mat_home[i,j] = rates_home[paste(i-1, j-1, sep = "-")]
mat_away[i,j] = rates_away[paste(i-1, j-1, sep = "-")]
}
}
melted_mat = melt(mat) %>%
rename(x = Var1, y = Var2)
melted_mat_home = melt(mat_home) %>%
rename(x = Var1, y = Var2)
melted_mat_away = melt(mat_away) %>%
rename(x = Var1, y = Var2)
ggplot(data = melted_mat, aes(x, y, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
midpoint = 0.01, limit = c(0, 0.02),
name = expression(hat(nu)[xy]),
breaks = c(0, 0.02)) +
geom_text(aes(x, y, label = round(value, 4)), color = "black") +
theme(panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank()) +
ggtitle("Rate of the time to the next red card while the score is (x, y)")
ggplot(data = melted_mat, aes(x, y, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
midpoint = 0.01, limit = c(0, 0.02),
name = "",
breaks = c(0, 0.02)) +
geom_text(aes(x, y, label = round(value, 4)), color = "black") +
theme(panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank()) +
ggtitle("Rate of the time to the next red card while the score is (x, y)")
ggplot(data = melted_mat_home, aes(x, y, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
midpoint = 0.005, limit = c(0, 0.01),
name = ""),
ggplot(data = melted_mat_home, aes(x, y, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
midpoint = 0.005, limit = c(0, 0.01),
name = "",
breaks = c(0, 0.01)) +
geom_text(aes(x, y, label = round(value, 4)), color = "black") +
theme(panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank()) +
ggtitle("Rate of the time to the next red card of the home team while the score is (x, y)")
options(knitr.kable.NA = "â€“",
scipen = 999)
library(dplyr)
library(knitr)
library(reshape2)
library(ggplot2)
load("input_2014_2019.RData")
x = list(); y = list(); xy = list()
for(i in 1:N) {
x[[i]] = c(x1[[i]], x2[[i]])
y[[i]] = c(y1[[i]], y2[[i]])
xy[[i]] = paste(x[[i]], y[[i]], sep = "-")
}
tables = lapply(xy, table)
scores = NULL
c = 0
for(i in 0:3) {
for(j in 0:3) {
c = c + 1
scores[c] = paste(i, j, sep = "-")
}
}
delta_home = list(); delta_away = list(); t = list()
for(i in 1:length(scores)) {
tmp_delta_home = NULL; tmp_delta_away = NULL; tmp_t = NULL
for(k in 1:N) {
if(scores[i] %in% names(tables[[k]])) {
next_score = names(tables[[k]])[which(names(tables[[k]]) ==
names(tables[[k]][scores[i]])) + 1]
if(is.na(next_score)) {
tmp_delta_home[k] = 0
tmp_delta_away[k] = 0
} else {
if(as.integer(substr(next_score, 1, 1)) > as.integer(substr(scores[i], 1, 1))) {
tmp_delta_home[k] = 1
tmp_delta_away[k] = 0
} else {
tmp_delta_home[k] = 0
tmp_delta_away[k] = 1
}
}
tmp_t[k] = tables[[k]][scores[i]]
} else {
tmp_delta_home[k] = 0
tmp_delta_away[k] = 0
tmp_t[k] = 0
}
}
delta_home[[i]] = tmp_delta_home
delta_away[[i]] = tmp_delta_away
t[[i]] = tmp_t
}
rates = NULL; rates_home = NULL; rates_away = NULL
for(i in 1:length(scores)) {
rates[i] = (sum(delta_home[[i]]) + sum(delta_away[[i]])) / sum(t[[i]])
rates_home[i] = sum(delta_home[[i]]) / sum(t[[i]])
rates_away[i] = sum(delta_away[[i]]) / sum(t[[i]])
}
# Crowder pag 66
sd_home = NULL; sd_away = NULL; sd = NULL
for(i in 1:length(scores)) {
sd[i] = rates[i] / sqrt(sum(delta_home[[i]]) + sum(delta_away[[i]]))
sd_home[i] = rates_home[i] / sqrt(sum(delta_home[[i]]))
sd_away[i] = rates_away[i] / sqrt(sum(delta_away[[i]]))
}
tib = tibble(Rate = paste0("$\\nu_{", stringr::str_replace(scores, "-", ""), "}$"),
`Est.(both)` = rates, `Est.(home)` = rates_home, `Est.(away)` = rates_away,
`S.e.(both)` = sd, `S.e.(home)` = sd_home, `S.e.(away)` = sd_away)
kable(tib, digits = 4, caption = "Estimates and standard errors of the rate of the time
to the next goal")
names(rates) = scores
names(rates_home) = scores
names(rates_away) = scores
mat = matrix(NA, nrow = 4, ncol = 4)
rownames(mat) = paste0(0:3)
colnames(mat) = paste0(0:3)
mat_home = mat
mat_away = mat
for(i in 1:4) {
for(j in 1:4) {
mat[i,j] = rates[paste(i-1, j-1, sep = "-")]
mat_home[i,j] = rates_home[paste(i-1, j-1, sep = "-")]
mat_away[i,j] = rates_away[paste(i-1, j-1, sep = "-")]
}
}
melted_mat = melt(mat) %>%
rename(x = Var1, y = Var2)
melted_mat_home = melt(mat_home) %>%
rename(x = Var1, y = Var2)
melted_mat_away = melt(mat_away) %>%
rename(x = Var1, y = Var2)
ggplot(data = melted_mat, aes(x, y, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
midpoint = 0.029, limit = c(0.016, 0.042),
name = "",
breaks = c(0.02, 0.04)) +
geom_text(aes(x, y, label = round(value, 4)), color = "black") +
theme(panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank()) +
ggtitle("Rate of the time to the next goal while the score is (x, y)")
ggplot(data = melted_mat_home, aes(x, y, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
midpoint = 0.0145, limit = c(0.008, 0.021),
name = "",
breaks = c(0.01, 0.02)) +
geom_text(aes(x, y, label = round(value, 4)), color = "black") +
theme(panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank()) +
ggtitle("Rate of the time to the next home goal while the score is (x, y)")
ggplot(data = melted_mat_away, aes(x, y, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red",
midpoint = 0.0145, limit = c(0.008, 0.021),
name = "",
breaks = c(0.01, 0.02)) +
geom_text(aes(x, y, label = round(value, 4)), color = "black") +
theme(panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank()) +
ggtitle("Rate of the time to the away goal while the score is (x, y)")
mat_home
mat_home / mat_away
mat_home[1,1]/mat_away[1,1]
mean(mat_home/mat_away)
1/0.0224
source("pred_mod_0.R")
source("pred_mod_1.R")
source("pred_mod_2.R")
source("pred_mod_3.R")
source("2019/pred_mod_0.R")
load("mod_0.RData")
load("mod_0.RData")
load("2019/mod_0.RData")
load("data/mod_0.RData")
load("data/mod_0.RData")
load("2019/data/mod_0.RData")
load("2019/datamod_3.RData")
load("2019/data/mod_3.RData")
source("pred_mod_0.R")
source("data/pred_mod_0.R")
source("2019/pred_mod_0.R")
source("2019/pred_mod_0.R")
source("2019/pred_mod_1.R")
source("2019/pred_mod_2.R")
source("2019/pred_mod_3.R")
pred_mod_3(home_team = "Flamengo", away_team = "Vasco da Gama")
pred_mod_3
pred_mod_3(home_team = "Flamengo", away_team = "Vasco da Gama")
t0 = Sys.time()
pred_mod_3(home_team = "Flamengo", away_team = "Vasco da Gama")
Sys.time() - t0
t0 = Sys.time()
pred_mod_3(home_team = "Flamengo", away_team = "Vasco da Gama", minute = 1, half = 2)
Sys.time() - t0
t0 = Sys.time()
pred_mod_3(home_team = "Flamengo", away_team = "Vasco da Gama", minute = 1, half = 2, score_home = 1, score_away = 0)
Sys.time() - t0
pred_mod_3(home_team = "Flamengo", away_team = "Vasco da Gama")
pred_mod_3(home_team = "Flamengo", away_team = "Vasco da Gama")
pred_mod_3(home_team = "Flamengo", away_team = "Vasco da Gama")
library(CVXR)
t1 = 1
t2 = 2
alpha = Variable(1)
beta = Variable(1)
gamma = Variable(1)
lambda = Variable(1)
csi = Variable(1)
expr1 = t2*csi + log(1-exp(csi*(t1-t2))) - log(csi) # what we need
expr1
expr1 = (exp(t2*csi) - exp(t1*csi)) / csi # what we need
is_dcp(expr1)
expr2 = exp(t2*csi) - exp(t1*csi)
is_dcp(expr2)
?one_minus_pos
?one_minus_pos
expr3 = one_minus_pos(x = exp(csi*(t1 - t2)))
is_dcp(expr3)
csi = Variable(1, pos = TRUE)
?one_minus_pos
expr3 = one_minus_pos(x = exp(csi*(t1 - t2)))
is_dcp(expr3)
?one_minus_pos
expr3 = one_minus_pos(exp(csi*(t1 - t2)))
is_dcp(expr3)
curvature(expr3)
exp(1*(t1 - t2))
exp(100*(t1 - t2))
exp(0.1*(t1 - t2))
exp(0.000001*(t1 - t2))
curvature(expr3)
expr4 = t2*csi + log(1-exp(csi*(t1-t2)))
is_dcp(expr4)
expr4 = t2*csi + log(1-exp(csi*(t1-t2))) - log(csi)
is_dcp(expr4)
expr4 = t2*csi + log(1-exp(csi*(t1-t2))) - log(csi) # log of what we need
is_dcp(expr4)
expr5 = expr4 = t2*csi + log(1-exp(csi*(t1-t2)))
is_dcp(expr5)
curvatur(expr5)
curvature(expr5)
curvature(expr5)
expr5 = t2*csi + log(1-exp(csi*(t1-t2)))
is_dcp(expr5)
curvature(expr5)
logcsi = Variable(1, pos = TRUE)
log(0.0001)
logcsi = Variable(1)
log_csi = Variable(1)
expr6 = t2*exp(log_csi) + log(1-exp(exp(log_csi)*(t1-t2))) - log_csi # log of what we need
is_dcp(expr6)
log_csi = Variable(1)
expr6 = t2*exp(log_csi) + log(1-exp(exp(log_csi)*(t1-t2))) - #log_csi # log of what we need
is_dcp(expr6)
log_csi = Variable(1)
expr6 = t2*exp(log_csi) + log(1-exp(exp(log_csi)*(t1-t2))) #- log_csi # log of what we need
is_dcp(expr6)
exp_csi = Variable(1)
log_csi = Variable(1)
expr6 = t2*exp(log_csi) + log(1-exp(exp(log_csi)*(t1-t2))) - log_csi # log of what we need
is_dcp(expr6)
expr7 = log(1-exp(exp(log_csi)*(t1-t2)))
is_dcp(expr7)
a = c(21,10,-11,10,-24,47)
cumsum(a)
# f(t) = t
library(CVXR)
csi = Variable(1)
t1 = 1
t2 = 2
expr1 = (exp(t2*csi) - exp(t1*csi)) / csi # what we need
is_dcp(expr1)
expr2 = exp(t2*csi) - exp(t1*csi)
is_dcp(expr2)
?one_minus_pos
expr3 = one_minus_pos(exp(csi*(t1-t2)))
is_dcp(expr3)
expr4 = t2*csi + log(1-exp(csi*(t1-t2))) - log(csi) # log of what we need
is_dcp(expr4)
expr5 = t2*csi + log(1-exp(csi*(t1-t2)))
is_dcp(expr5)
curvature(expr5)
log_csi = Variable(1)
expr6 = t2*exp(log_csi) + log(1-exp(exp(log_csi)*(t1-t2))) - log_csi # log of what we need
is_dcp(expr6)
expr7 = log(1-exp(exp(log_csi)*(t1-t2)))
is_dcp(expr7)
# continuar
expr5 = t2*csi + log(1-exp(csi*(t1-t2)))
is_dcp(expr5)
curvature(expr5)
log_csi = Variable(1)
expr6 = t2*exp(log_csi) + log(1-exp(exp(log_csi)*(t1-t2))) - log_csi # log of what we need
is_dcp(expr6)
expr7 = log(1-exp(exp(log_csi)*(t1-t2)))
is_dcp(expr7)
expr1 = (exp(t2*csi) - exp(t1*csi)) / csi # what we need
is_dcp(expr1)
expr2 = exp(t2*csi) - exp(t1*csi)
is_dcp(expr2)
?one_minus_pos
expr3 = one_minus_pos(exp(csi*(t1-t2)))
is_dcp(expr3)
expr4 = 1 - exp(csi*(t1-t2))
is_dcp(expr4)
expr5 = log(expr4)
is_dcp(expr5)
expr5 = log(expr4)
is_dcp(expr5)
expr6 = log(1 - exp(csi*(t1-t2))) - log(csi)
expr6
is_dcp(expr6)
sign(expr5)
is_dcp(expr5)
expr5 = log(expr4)
is_dcp(expr5)
sign(expr5)
expr6 = log(1 - exp(csi*(t1-t2))) - log(csi)
is_dcp(expr6)
curvature(expr5)
curvature(- log(csi))
is_dcp(expr6)
curvature(-log(csi))
expr6 = log(1 - exp(csi*(t1-t2))) - log(csi)
is_dcp(expr6)
curvature(expr5)
curvature(-log(csi))
expr5 = t2*csi + log(1-exp(csi*(t1-t2))) - log(csi) # log of what we need
is_dcp(expr5)
expr6 = t2*csi + log(1-exp(csi*(t1-t2)))
is_dcp(expr6)
curvature(expr6)
expr4 = 1 - exp(csi*(t1-t2))
is_dcp(expr4) # ???
expr5 = t2*csi * log(1 - exp(csi*(t1-t2)))
is_dcp(expr5)
curvature(expr5)
curvature(-log(csi))
expr5 = t2*csi + log(1 - exp(csi*(t1-t2)))
is_dcp(expr5)
curvature(expr5)
expr6 = log(1 - exp(csi*(t1-t2))) - log(csi)
is_dcp(expr6)
curvature(expr5)
curvature(-log(csi))
expr5 = t2*csi + log(1 - exp(csi*(t1-t2)))
is_dcp(expr5)
expr7 = t2*csi + log(1-exp(csi*(t1-t2))) - log(csi) # log of what we need
is_dcp(expr7)
expr8 = t2*csi + log(1-exp(csi*(t1-t2)))
is_dcp(expr8)
curvature(expr8)
expr5 = t2*csi + log(1 - exp(csi*(t1-t2)))
is_dcp(expr5)
expr6 = log(1 - exp(csi*(t1-t2))) - log(csi)
is_dcp(expr6)
curvature(expr5)
curvature(-log(csi))
expr6 = t2*csi + log(1 - exp(csi*(t1-t2))) - log(csi)
is_dcp(expr6)
curvature(expr5)
curvature(-log(csi))
log_csi = Variable(1)
expr7 = t2*exp(log_csi) + log(1-exp(exp(log_csi)*(t1-t2))) - log_csi # log of what we need
is_dcp(expr7)
expr8 = log(1-exp(exp(log_csi)*(t1-t2)))
is_dcp(expr8)
expr6 = t2*csi + log(1 - exp(csi*(t1-t2))) - log(csi) # log of what we need
is_dcp(expr6)
curvature(expr5)
curvature(-log(csi))
log_csi = Variable(1)
expr7 = t2*exp(log_csi) + log(1-exp(exp(log_csi)*(t1-t2))) - log_csi # log of what we need
is_dcp(expr7)
expr8 = log(1-exp(exp(log_csi)*(t1-t2)))
is_dcp(expr6)
a = c(21, 10, -11, 10, -24, 47, 14, 15, 29)
cumsum(a)
library(CVXR)
csi = Variable(1)
t1 = 1
t2 = 2
expr1 = (exp(t2*csi) - exp(t1*csi)) / csi # what we need
is_dcp(expr1)
expr2 = exp(t2*csi) - exp(t1*csi)
is_dcp(expr2)
expr2 = exp(t2*csi) - exp(t1*csi)
is_dcp(expr2)
?one_minus_pos
expr3 = one_minus_pos(exp(csi*(t1-t2)))
is_dcp(expr3)
expr4 = 1 - exp(csi*(t1-t2))
is_dcp(expr4) # ???
expr5 = t2*csi + log(1 - exp(csi*(t1-t2)))
is_dcp(expr5)
is_dcp(exp(expr5))
is_dcp(exp(expr5))
expr6 = t2*csi + log(1 - exp(csi*(t1-t2))) - log(csi) # log of what we need
is_dcp(expr6)
expr6 = t2*csi + log(1 - exp(csi*(t1-t2))) - log(csi) # log of what we need
is_dcp(expr6)
curvature(expr5)
curvature(-log(csi))
log_csi = Variable(1)
expr7 = t2*exp(log_csi) + log(1-exp(exp(log_csi)*(t1-t2))) - log_csi # log of what we need
is_dcp(expr7)
expr8 = log(1-exp(exp(log_csi)*(t1-t2)))
is_dcp(expr8)
expr1 = (exp((csi+1)*(t2+1)) - exp((csi+1)*(t1+1))) / (csi+1) # what we need
is_dcp(expr1)
expr1 = (exp((csi+1)*log(t2+1)) - exp((csi+1)*log(t1+1))) / (csi+1) # what we need
is_dcp(expr1)
expr2 = exp((csi+1)*log(t2+1)) - exp((csi+1)*log(t1+1))
is_dcp(expr2)
expr5 = t2*csi + log(1 - exp(csi*(t1-t2)))
is_dcp(expr5)
is_dcp(exp(expr5))
expr5 = t2*csi + log(1 - exp(csi*(t1-t2)))
is_dcp(expr5)
expr3 = exp((csi+1)*log(t2+1))
expr4 = exp((csi+1)*log(t1+1))
sign(expr1)
sign(expr2)
sign(expr1 - expr2)
is_dcp(expr1 - expr2)
is_dcp(log(expr1 - expr2))
expr3 = exp((csi+1)*log(t2+1))
expr4 = exp((csi+1)*log(t1+1))
sign(expr3)
sign(expr4)
sign(expr3 - expr4)
expr3 = exp((csi+1)*log(t2+1))
expr4 = exp((csi+1)*log(t1+1))
sign(expr3)
sign(expr4)
sign(expr3 - expr4)
