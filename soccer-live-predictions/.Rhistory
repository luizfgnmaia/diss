load("weight/data/HDA_dc.RData")
load("weight/data/first_matches.RData")
first_matches = first_matches %>%
mutate(tmp = 1)
HDA_dc = HDA_dc %>%
left_join(first_matches)
matches_to_remove = which(HDA_dc$tmp == 1)
predictions_mod_0_dc = predictions_mod_0_dc[-matches_to_remove]
predictions_mod_3_dc = predictions_mod_3_dc[-matches_to_remove]
predictions_mod_8_dc = predictions_mod_8_dc[-matches_to_remove]
predictions_mod_9_dc = predictions_mod_9_dc[-matches_to_remove]
predictions_mod_10_dc = predictions_mod_10_dc[-matches_to_remove]
probabilities <- function(predictions, pred) {
H = NULL
D = NULL
A = NULL
lst_home = list()
lst_away = list()
for(i in 1:length(predictions)) {
predictions[[i]][[pred]]$Result[which(predictions[[i]][[pred]]$Result <= 0)] = 10^-5
H[i] = log(predictions[[i]][[pred]]$Result[1])
D[i] = log(predictions[[i]][[pred]]$Result[2])
A[i] = log(predictions[[i]][[pred]]$Result[3])
score = predictions[[i]][[pred]]$Score
home = str_extract(names(score), ".*(?=-)")
away = str_extract(names(score), "(?<=-).*")
tib_score = tibble()
for(j in 1:length(score)) {
tmp = tibble(Home = home[j], Away = away[j], p = score[j])
tib_score = rbind(tib_score, tmp)
}
home_goals = NULL
away_goals = NULL
for(g in 0:4) {
home_goals[g+1] = tib_score %>%
filter(Home == g) %>%
.$p %>%
sum()
away_goals[g+1] = tib_score %>%
filter(Away == g) %>%
.$p %>%
sum()
}
home_goals[6] = 1 - sum(home_goals)
away_goals[6] = 1 - sum(away_goals)
lst_home[[i]] = home_goals
lst_away[[i]] = away_goals
}
Results = c(mean(H), mean(D), mean(A))
names(Results) = c("Home", "Away", "Draw")
mat_home = do.call(rbind, lst_home)
mat_away = do.call(rbind, lst_away)
Home_Goals = apply(mat_home, 2, mean)
Away_Goals = apply(mat_away, 2, mean)
names(Home_Goals) = c(0:4, "5+")
names(Away_Goals) = c(0:4, "5+")
list(Results = Results, Home_Goals = Home_Goals, Away_Goals = Away_Goals)
}
all_probabilities <- function(predictions) {
ret = list()
preds = paste0("pred_", c(0, 15, 30, 45, 60, 75))
for(p in preds) {
ret[[p]] = probabilities(predictions, p)
}
names(ret) = preds
ret
}
prob_mod_0_dc = all_probabilities(predictions_mod_0_dc)
prob_mod_3_dc = all_probabilities(predictions_mod_3_dc)
prob_mod_8_dc = all_probabilities(predictions_mod_8_dc)
prob_mod_9_dc = all_probabilities(predictions_mod_9_dc)
prob_mod_10_dc = all_probabilities(predictions_mod_10_dc)
x = NULL
y = NULL
tmp = NULL
for(i in 1:length(predictions_mod_0_dc)) {
x[i] = predictions_mod_0_dc[[i]]$Match$Score_Home
y[i] = predictions_mod_0_dc[[i]]$Match$Score_Away
tmp[i] = ifelse(x[i] > y[i], "Home",
ifelse(x[i] == y[i], "Draw",
"Away"))
}
Results = c(sum(tmp == "Home"), sum(tmp == "Draw"), sum(tmp == "Away")) / length(tmp)
Home_Goals = c(sum(x == 0), sum(x == 1), sum(x == 2), sum(x == 3), sum(x == 4), sum(x >= 5)) / length(x)
Away_Goals = c(sum(y == 0), sum(y == 1), sum(y == 2), sum(y == 3), sum(y == 4), sum(y >= 5)) / length(y)
tmp = list(Results = Results, Home_Goals = Home_Goals, Away_Goals = Away_Goals)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/goodness_of_fit_dc_2.R', echo=TRUE)
library(dplyr)
library(stringr)
load("weight/data/predictions_mod_0_dc.RData")
load("weight/data/predictions_mod_3_dc.RData")
load("weight/data/predictions_mod_8_dc.RData")
load("weight/data/predictions_mod_9_dc.RData")
load("weight/data/predictions_mod_10_dc.RData")
load("weight/data/HDA_dc.RData")
load("weight/data/first_matches.RData")
first_matches = first_matches %>%
mutate(tmp = 1)
HDA_dc = HDA_dc %>%
left_join(first_matches)
matches_to_remove = which(HDA_dc$tmp == 1)
predictions_mod_0_dc = predictions_mod_0_dc[-matches_to_remove]
predictions_mod_3_dc = predictions_mod_3_dc[-matches_to_remove]
predictions_mod_8_dc = predictions_mod_8_dc[-matches_to_remove]
predictions_mod_9_dc = predictions_mod_9_dc[-matches_to_remove]
predictions_mod_10_dc = predictions_mod_10_dc[-matches_to_remove]
pred = "pred_0"
H = NULL
D = NULL
A = NULL
lst_home = list()
lst_away = list()
predictions = predictions_mod_8_dc
for(i in 1:length(predictions)) {
predictions[[i]][[pred]]$Result[which(predictions[[i]][[pred]]$Result <= 0)] = 10^-5
H[i] = log(predictions[[i]][[pred]]$Result[1])
D[i] = log(predictions[[i]][[pred]]$Result[2])
A[i] = log(predictions[[i]][[pred]]$Result[3])
score = predictions[[i]][[pred]]$Score
home = str_extract(names(score), ".*(?=-)")
away = str_extract(names(score), "(?<=-).*")
tib_score = tibble()
for(j in 1:length(score)) {
tmp = tibble(Home = home[j], Away = away[j], p = score[j])
tib_score = rbind(tib_score, tmp)
}
home_goals = NULL
away_goals = NULL
for(g in 0:4) {
home_goals[g+1] = tib_score %>%
filter(Home == g) %>%
.$p %>%
sum()
away_goals[g+1] = tib_score %>%
filter(Away == g) %>%
.$p %>%
sum()
}
home_goals[6] = 1 - sum(home_goals)
away_goals[6] = 1 - sum(away_goals)
lst_home[[i]] = home_goals
lst_away[[i]] = away_goals
}
H
D
A
mat_home
lst_home
exp(-1.4775)
exp(1.7346)
tab_home_goals
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/goodness_of_fit_dc_2.R', echo=TRUE)
U
library(CVXR)
load("2015-2020/data/input.RData")
load("2015-2020/data/input_mod_1.RData")
t0 = Sys.time()
alpha = Variable(n)
beta = Variable(n)
gamma = Variable(1)
tau = Variable(1)
omega = Variable(8)
theta = vstack(alpha, beta, gamma, tau, omega)
eta = Variable(2)
rho = Variable(2)
kappa = Variable(1)
pi1 = eta[1] + rho[1] * r1
pi2 = eta[2] + rho[2] * r2 + c * kappa
a = Variable(2)
U
U1
-sum(log(U1!))
-sum(log(factorial(U1)))
-sum(log(factorial(U1))) -sum(log(factorial(U2)))
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input_mod_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input_mod_1.R', encoding = 'UTF-8', echo=TRUE)
load("2015-2020/data/input.RData")
diff1 = list()
diff2 = list()
for(k in 1:N) {
diff1[[k]] = diff(I1r[[k]])
diff2[[k]] = diff(I2r[[k]])
}
delta1 = unlist(diff1)
delta2 = unlist(diff2)
L1 = length(delta1)
L2 = length(delta2)
M1_lambda = matrix(0, ncol = 2*n, nrow = L1)
row = 0
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[i[k]] = 1
beta[j[k]] = 1
tmp = c(alpha, beta)
for(l in 1:length(diff1[[k]])) {
M1_lambda[(row+l),] = tmp
}
row = row + length(diff1[[k]])
}
load("2015-2020/data/input.RData")
diff1 = list()
diff2 = list()
for(k in 1:N) {
diff1[[k]] = diff(I1r[[k]])
diff2[[k]] = diff(I2r[[k]])
}
delta1 = unlist(diff1)
delta2 = unlist(diff2)
L1 = length(delta1)
L2 = length(delta2)
M1_lambda = matrix(0, ncol = 2*n, nrow = L1)
row = 0
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[i[k]] = 1
beta[j[k]] = 1
tmp = c(alpha, beta)
for(l in 1:length(diff1[[k]])) {
M1_lambda[(row+l),] = tmp
}
row = row + length(diff1[[k]])
}
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input_mod_1.R', encoding = 'UTF-8', echo=TRUE)
load("2015-2020/data/input.RData")
diff1 = list()
diff2 = list()
for(k in 1:N) {
diff1[[k]] = diff(I1r[[k]])
diff2[[k]] = diff(I2r[[k]])
}
delta1 = unlist(diff1)
delta2 = unlist(diff2)
L1 = length(delta1)
L2 = length(delta2)
L1
L2
M1_lambda = matrix(0, ncol = 2*n, nrow = L1)
row = 0
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[i[k]] = 1
beta[j[k]] = 1
tmp = c(alpha, beta)
for(l in 1:length(diff1[[k]])) {
M1_lambda[(row+l),] = tmp
}
row = row + length(diff1[[k]])
}
M1_lambda
diff1 = list()
diff2 = list()
for(k in 1:N) {
diff1[[k]] = diff(I1r[[k]])
diff2[[k]] = diff(I2r[[k]])
}
delta1 = unlist(diff1)
delta2 = unlist(diff2)
load("2015-2020/data/input.RData")
diff1 = list()
diff2 = list()
for(k in 1:N) {
diff1[[k]] = diff(I1r[[k]])
diff2[[k]] = diff(I2r[[k]])
}
delta1 = unlist(diff1)
delta2 = unlist(diff2)
L1 = length(delta1)
L2 = length(delta2)
M1_lambda = matrix(0, ncol = 2*n, nrow = L1)
row = 0
N
n
k=1
alpha = rep(0, n)
beta = rep(0, n)
alpha[i[k]] = 1
beta[j[k]] = 1
tmp = c(alpha, beta)
tmp
alpha
n
alpha = rep(0, n)
beta = rep(0, n)
k
alpha
i
j
i
j
i
i
i
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input_mod_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input_mod_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input_mod_2.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input_mod_4.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input_mod_5.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input_mod_6.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input_mod_7.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input_mod_9.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input_mod_10.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_2.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_3.R', echo=TRUE)
View(M1_lambda)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_4.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_5.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_6.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_7.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_8.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_9.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_10.R', echo=TRUE)
load("data/mod_1.RData")
library(kable)
library(knitr)
library(knitr)
load("data/mod_1.RData")
load("data/mod_2.RData")
load("data/mod_3.RData")
load("data/mod_4.RData")
load("data/mod_5.RData")
load("data/mod_6.RData")
load("data/mod_7.RData")
load("data/mod_8.RData")
load("data/mod_9.RData")
load("data/mod_10.RData")
aic <- function(loglik, k) {
2*k - 2*loglik
}
bic <- function(loglik, k, n) {
k*log(n) - 2*loglik
}
loglik_mod_1 = mod_1$loglik
loglik_mod_1
library(dplyr)
tib = tibble(Model = 1:10,
loglik = c(mod_1$loglik, mod_2$loglik, mod_3$loglik, mod_4$loglik,
mod_5$loglik, mod_6$loglik, mod_7$loglik, mod_8$loglik,
mod_9$loglik, mod_10$loglik))
library(dplyr)
library(knitr)
load("data/mod_1.RData")
load("data/mod_2.RData")
load("data/mod_3.RData")
load("data/mod_4.RData")
load("data/mod_5.RData")
load("data/mod_6.RData")
load("data/mod_7.RData")
load("data/mod_8.RData")
load("data/mod_9.RData")
load("data/mod_10.RData")
aic <- function(loglik, k) {
2*k - 2*loglik
}
bic <- function(loglik, k, n) {
k*log(n) - 2*loglik
}
tib = tibble(Model = 1:10,
loglik = c(mod_1$loglik, mod_2$loglik, mod_3$loglik, mod_4$loglik,
mod_5$loglik, mod_6$loglik, mod_7$loglik, mod_8$loglik,
mod_9$loglik, mod_10$loglik))
View(tib)
n
n
n
load("data/input.RData")
input
n
N
mod_1
unlist(mod_1)
length(unlist(mod_1))-2
library(dplyr)
library(knitr)
load("data/input.RData")
load("data/mod_1.RData")
load("data/mod_2.RData")
load("data/mod_3.RData")
load("data/mod_4.RData")
load("data/mod_5.RData")
load("data/mod_6.RData")
load("data/mod_7.RData")
load("data/mod_8.RData")
load("data/mod_9.RData")
load("data/mod_10.RData")
aic <- function(loglik, k) {
2*k - 2*loglik
}
bic <- function(loglik, k, n) {
k*log(n) - 2*loglik
}
tib = tibble(Model = 1:10,
loglik = c(mod_1$loglik, mod_2$loglik, mod_3$loglik, mod_4$loglik,
mod_5$loglik, mod_6$loglik, mod_7$loglik, mod_8$loglik,
mod_9$loglik, mod_10$loglik),
p = c(length(unlist(mod_1)) - 2,
length(unlist(mod_2)) - 2,
length(unlist(mod_3)) - 2,
length(unlist(mod_4)) - 2,
length(unlist(mod_5)) - 2,
length(unlist(mod_6)) - 2,
length(unlist(mod_7)) - 2,
length(unlist(mod_8)) - 2,
length(unlist(mod_9)) - 2,
length(unlist(mod_100)) - 2),
n = N)
tib = tibble(Model = 1:10,
loglik = c(mod_1$loglik, mod_2$loglik, mod_3$loglik, mod_4$loglik,
mod_5$loglik, mod_6$loglik, mod_7$loglik, mod_8$loglik,
mod_9$loglik, mod_10$loglik),
p = c(length(unlist(mod_1)) - 2,
length(unlist(mod_2)) - 2,
length(unlist(mod_3)) - 2,
length(unlist(mod_4)) - 2,
length(unlist(mod_5)) - 2,
length(unlist(mod_6)) - 2,
length(unlist(mod_7)) - 2,
length(unlist(mod_8)) - 2,
length(unlist(mod_9)) - 2,
length(unlist(mod_10)) - 2),
n = N)
View(tib)
tib = tibble(Model = 1:10,
loglik = c(mod_1$loglik, mod_2$loglik, mod_3$loglik, mod_4$loglik,
mod_5$loglik, mod_6$loglik, mod_7$loglik, mod_8$loglik,
mod_9$loglik, mod_10$loglik),
k = c(length(unlist(mod_1)) - 2,
length(unlist(mod_2)) - 2,
length(unlist(mod_3)) - 2,
length(unlist(mod_4)) - 2,
length(unlist(mod_5)) - 2,
length(unlist(mod_6)) - 2,
length(unlist(mod_7)) - 2,
length(unlist(mod_8)) - 2,
length(unlist(mod_9)) - 2,
length(unlist(mod_10)) - 2),
n = N)
kable(tib)
tib = tibble(Model = 1:10,
loglik = c(mod_1$loglik, mod_2$loglik, mod_3$loglik, mod_4$loglik,
mod_5$loglik, mod_6$loglik, mod_7$loglik, mod_8$loglik,
mod_9$loglik, mod_10$loglik),
k = c(length(unlist(mod_1)) - 2,
length(unlist(mod_2)) - 2,
length(unlist(mod_3)) - 2,
length(unlist(mod_4)) - 2,
length(unlist(mod_5)) - 2,
length(unlist(mod_6)) - 2,
length(unlist(mod_7)) - 2,
length(unlist(mod_8)) - 2,
length(unlist(mod_9)) - 2,
length(unlist(mod_10)) - 2),
n = N) %>%
rowwise() %>%
mutate(AIC = aic(loglik, k),
BIC = bic(loglik, k, n)) %>%
arrange(BIC)
kable(tib)
library(dplyr)
library(knitr)
load("data/input.RData")
load("data/mod_1.RData")
load("data/mod_2.RData")
load("data/mod_3.RData")
load("data/mod_4.RData")
load("data/mod_5.RData")
load("data/mod_6.RData")
load("data/mod_7.RData")
load("data/mod_8.RData")
load("data/mod_9.RData")
load("data/mod_10.RData")
aic <- function(loglik, k) {
2*k - 2*loglik
}
bic <- function(loglik, k, n) {
k*log(n) - 2*loglik
}
tib = tibble(Model = 1:10,
loglik = c(mod_1$loglik, mod_2$loglik, mod_3$loglik, mod_4$loglik,
mod_5$loglik, mod_6$loglik, mod_7$loglik, mod_8$loglik,
mod_9$loglik, mod_10$loglik),
k = c(length(unlist(mod_1)) - 2,
length(unlist(mod_2)) - 2,
length(unlist(mod_3)) - 2,
length(unlist(mod_4)) - 2,
length(unlist(mod_5)) - 2,
length(unlist(mod_6)) - 2,
length(unlist(mod_7)) - 2,
length(unlist(mod_8)) - 2,
length(unlist(mod_9)) - 2,
length(unlist(mod_10)) - 2),
n = N) %>%
rowwise() %>%
mutate(AIC = aic(loglik, k),
BIC = bic(loglik, k, n))
tib %>%
arrange(aic) %>%
kable()
