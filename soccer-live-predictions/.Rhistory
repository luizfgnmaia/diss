p = (pH, pD, pA)
if(Result == "H") {
e = c(1, 0, 0)
} else if(Result == "D") {
e = c(0, 1, 0)
} else {
e = c(0, 0, 1)
}
s = 0
for(i in 1:2) {
for(j in 1:i) {
s = s + (p[j] - e[j])^2
}
}
s/2
}
RPS <- function(Result, pH, pD, pA) {
p = (pH, pD, pA)
if(Result == "H") {
e = c(1, 0, 0)
} else if(Result == "D") {
e = c(0, 1, 0)
} else {
e = c(0, 0, 1)
}
s = 0
for(i in 1:2) {
for(j in 1:i) {
s = s + (p[j] - e[j])^2
}
}
s/2
}
if(Result == "H") {
e = c(1, 0, 0)
} else if(Result == "D") {
e = c(0, 1, 0)
} else {
e = c(0, 0, 1)
}
a
a
RPS <- function(Result, pH, pD, pA) {
p = c(pH, pD, pA)
if(Result == "H") {
e = c(1, 0, 0)
} else if(Result == "D") {
e = c(0, 1, 0)
} else {
e = c(0, 0, 1)
}
s = 0
for(i in 1:2) {
for(j in 1:i) {
s = s + (p[j] - e[j])^2
}
}
s/2
}
RPWS
RPS
RPS(Result = "A", pH = 0.2, pD = 0.3, pA = 0.5)
RPS(Result = "A", pH = 0, pD = 0, pA = 1)
RPS(Result = "H", pH = 0.5, pD = 0.3, pA = 0.2)
RPS(Result = "A", pH = 0.2, pD = 0.3, pA = 0.5)
RPS(Result = "A", pH = 0, pD = 0, pA = 1)
RPS(Result = "H", pH = 0.5, pD = 0.3, pA = 0.2)
RPS(Result = "A", pH = 0.2, pD = 0.3, pA = 0.5)
RPS(Result = "A", pH = 0, pD = 0, pA = 1)
RPS(Result = "H", pH = 0.5, pD = 0.3, pA = 0.2)
RPS(Result = "H", pH = 0, pD = 0, pA = 1)
RPS(Result = "H", pH = 0.5, pD = 0.3, pA = 0.2)
RPS(Result = "A", pH = 0.2, pD = 0.3, pA = 0.5)
RPS <- function(Result, pH, pD, pA) {
p = c(pH, pD, pA)
if(Result == "H") {
e = c(1, 0, 0)
} else if(Result == "D") {
e = c(0, 1, 0)
} else {
e = c(0, 0, 1)
}
print(e)
s = 0
for(i in 1:2) {
for(j in 1:i) {
s = s + (p[j] - e[j])^2
}
}
s/2
}
RPS(Result = "A", pH = 0.2, pD = 0.3, pA = 0.5)
RPS(Result = "A", pH = 0, pD = 0, pA = 1)
RPS(Result = "H", pH = 0, pD = 0, pA = 1)
RPS(Result = "H", pH = 0.5, pD = 0.3, pA = 0.2)
RPS <- function(Result, pH, pD, pA) {
p = c(pH, pD, pA)
if(Result == "H") {
e = c(1, 0, 0)
} else if(Result == "D") {
e = c(0, 1, 0)
} else {
e = c(0, 0, 1)
}
s = 0
for(i in 1:2) {
for(j in 1:i) {
s = s + (p[j] - e[j])^2
}
}
s/2
}
install.packages("verification")
library(verification)
rps(obs = c(1, 0, 0), pred = c(0.5, 0.3, 0.2))
?rps
rps(obs = c(1, 0, 0), pred = matrix(c(0.5, 0.3, 0.2), nrow = 1))
rps(obs = 1, pred = matrix(c(0.5, 0.3, 0.2), nrow = 1))
rps(obs = 2, pred = matrix(c(0.5, 0.3, 0.2), nrow = 1))
rps(obs = 2, pred = matrix(c(0.5, 0.3, 0.2), nrow = 1))
rps(obs = 1, pred = matrix(c(0.5, 0.3, 0.2), nrow = 1))
rps(obs = 3, pred = matrix(c(0.5, 0.3, 0.2), nrow = 1))
rps(obs = 3, pred = matrix(c(0.5, 0.3, 0.2), nrow = 1))$rps
rps(obs = 3, pred = matrix(c(0.2, 0.3, 0.5), nrow = 1))$rps
rps(obs = 3, pred = matrix(c(0.2, 0.3, 0.5), nrow = 1))$rps
rps(obs = 3, pred = matrix(c(0.2, 0.3, 0.5), nrow = 1))$rps
rps(obs = 3, pred = matrix(c(0.2, 0.3, 0.5), nrow = 1))$rps
rps(obs = 3, pred = matrix(c(0.2, 0.3, 0.5), nrow = 1))$rps
rps(obs = 3, pred = matrix(c(0.2, 0.3, 0.5), nrow = 1))$rps
rps(obs = 3, pred = matrix(c(0.2, 0.3, 0.5), nrow = 1))$rps
rps(obs = 3, pred = matrix(c(0.2, 0.3, 0.5), nrow = 1))$rps
rps(obs = 1, pred = matrix(c(0.2, 0.3, 0.5), nrow = 1))$rps
rps(obs = 1, pred = matrix(c(0.2, 0.3, 0.5), nrow = 1))$rps
rps(obs = 2, pred = matrix(c(0.2, 0.3, 0.5), nrow = 1))$rps
rps(obs = 3, pred = matrix(c(0.2, 0.3, 0.5), nrow = 1))$rps
RPS <- function(Result, pH, pD, pA) {
rps(obs = Result, pred = matrix(c(pH, pD, pC), nrow = 1))$rps
}
RPS <- function(Result, pH, pD, pA) {
verification::rps(obs = Result, pred = matrix(c(pH, pD, pC), nrow = 1))$rps
}
RPS
library(dplyr)
load("2020/data/predictions_mod_0.RData")
load("2020/data/predictions_mod_1.RData")
n_pred = 100000
HDA = tibble()
for(i in 1:length(predictions_mod_0)) {
tmp1 = predictions_mod_0[[i]]$Match %>%
select(-Stoppage_Time_1, -Stoppage_Time_2) %>%
mutate(Result = ifelse(Score_Home > Score_Away, 1,
ifelse(Score_Home == Score_Away, 2,
3)))
home_mod_0_0 = sum(predictions_mod_0[[i]]$pred_0[,1] > predictions_mod_0[[i]]$pred_0[,2]) / n_pred
away_mod_0_0 = sum(predictions_mod_0[[i]]$pred_0[,1] < predictions_mod_0[[i]]$pred_0[,2]) / n_pred
draw_mod_0_0 = 1 - home_mod_0_0 - away_mod_0_0
home_mod_0_15 = sum(predictions_mod_0[[i]]$pred_15[,1] > predictions_mod_0[[i]]$pred_15[,2]) / n_pred
away_mod_0_15 = sum(predictions_mod_0[[i]]$pred_15[,1] < predictions_mod_0[[i]]$pred_15[,2]) / n_pred
draw_mod_0_15 = 1 - home_mod_0_15 - away_mod_0_15
home_mod_0_30 = sum(predictions_mod_0[[i]]$pred_30[,1] > predictions_mod_0[[i]]$pred_30[,2]) / n_pred
away_mod_0_30 = sum(predictions_mod_0[[i]]$pred_30[,1] < predictions_mod_0[[i]]$pred_30[,2]) / n_pred
draw_mod_0_30 = 1 - home_mod_0_30 - away_mod_0_30
home_mod_0_45 = sum(predictions_mod_0[[i]]$pred_45[,1] > predictions_mod_0[[i]]$pred_45[,2]) / n_pred
away_mod_0_45 = sum(predictions_mod_0[[i]]$pred_45[,1] < predictions_mod_0[[i]]$pred_45[,2]) / n_pred
draw_mod_0_45 = 1 - home_mod_0_45 - away_mod_0_45
home_mod_0_60 = sum(predictions_mod_0[[i]]$pred_60[,1] > predictions_mod_0[[i]]$pred_60[,2]) / n_pred
away_mod_0_60 = sum(predictions_mod_0[[i]]$pred_60[,1] < predictions_mod_0[[i]]$pred_60[,2]) / n_pred
draw_mod_0_60 = 1 - home_mod_0_60 - away_mod_0_60
home_mod_0_75 = sum(predictions_mod_0[[i]]$pred_75[,1] > predictions_mod_0[[i]]$pred_75[,2]) / n_pred
away_mod_0_75 = sum(predictions_mod_0[[i]]$pred_75[,1] < predictions_mod_0[[i]]$pred_75[,2]) / n_pred
draw_mod_0_75 = 1 - home_mod_0_75 - away_mod_0_75
home_mod_1_0 = sum(predictions_mod_1[[i]]$pred_0[,1] > predictions_mod_1[[i]]$pred_0[,2]) / n_pred
away_mod_1_0 = sum(predictions_mod_1[[i]]$pred_0[,1] < predictions_mod_1[[i]]$pred_0[,2]) / n_pred
draw_mod_1_0 = 1 - home_mod_1_0 - away_mod_1_0
home_mod_1_15 = sum(predictions_mod_1[[i]]$pred_15[,1] > predictions_mod_1[[i]]$pred_15[,2]) / n_pred
away_mod_1_15 = sum(predictions_mod_1[[i]]$pred_15[,1] < predictions_mod_1[[i]]$pred_15[,2]) / n_pred
draw_mod_1_15 = 1 - home_mod_1_15 - away_mod_1_15
home_mod_1_30 = sum(predictions_mod_1[[i]]$pred_30[,1] > predictions_mod_1[[i]]$pred_30[,2]) / n_pred
away_mod_1_30 = sum(predictions_mod_1[[i]]$pred_30[,1] < predictions_mod_1[[i]]$pred_30[,2]) / n_pred
draw_mod_1_30 = 1 - home_mod_1_30 - away_mod_1_30
home_mod_1_45 = sum(predictions_mod_1[[i]]$pred_45[,1] > predictions_mod_1[[i]]$pred_45[,2]) / n_pred
away_mod_1_45 = sum(predictions_mod_1[[i]]$pred_45[,1] < predictions_mod_1[[i]]$pred_45[,2]) / n_pred
draw_mod_1_45 = 1 - home_mod_1_45 - away_mod_1_45
home_mod_1_60 = sum(predictions_mod_1[[i]]$pred_60[,1] > predictions_mod_1[[i]]$pred_60[,2]) / n_pred
away_mod_1_60 = sum(predictions_mod_1[[i]]$pred_60[,1] < predictions_mod_1[[i]]$pred_60[,2]) / n_pred
draw_mod_1_60 = 1 - home_mod_1_60 - away_mod_1_60
home_mod_1_75 = sum(predictions_mod_1[[i]]$pred_75[,1] > predictions_mod_1[[i]]$pred_75[,2]) / n_pred
away_mod_1_75 = sum(predictions_mod_1[[i]]$pred_75[,1] < predictions_mod_1[[i]]$pred_75[,2]) / n_pred
draw_mod_1_75 = 1 - home_mod_1_75 - away_mod_1_75
tmp2 = tibble(Home_mod0_pred0 = home_mod_0_0,
Draw_mod0_pred0 = draw_mod_0_0,
Away_mod0_pred0 = away_mod_0_0,
Home_mod0_pred15 = home_mod_0_15,
Draw_mod0_pred15 = draw_mod_0_15,
Away_mod0_pred15 = away_mod_0_15,
Home_mod0_pred30 = home_mod_0_30,
Draw_mod0_pred30 = draw_mod_0_30,
Away_mod0_pred30 = away_mod_0_30,
Home_mod0_pred45 = home_mod_0_45,
Draw_mod0_pred45 = draw_mod_0_45,
Away_mod0_pred45 = away_mod_0_45,
Home_mod0_pred60 = home_mod_0_60,
Draw_mod0_pred60 = draw_mod_0_60,
Away_mod0_pred60 = away_mod_0_60,
Home_mod0_pred75 = home_mod_0_75,
Draw_mod0_pred75 = draw_mod_0_75,
Away_mod0_pred75 = away_mod_0_75,
Home_mod1_pred0 = home_mod_1_0,
Draw_mod1_pred0 = draw_mod_1_0,
Away_mod1_pred0 = away_mod_1_0,
Home_mod1_pred15 = home_mod_1_15,
Draw_mod1_pred15 = draw_mod_1_15,
Away_mod1_pred15 = away_mod_1_15,
Home_mod1_pred30 = home_mod_1_30,
Draw_mod1_pred30 = draw_mod_1_30,
Away_mod1_pred30 = away_mod_1_30,
Home_mod1_pred45 = home_mod_1_45,
Draw_mod1_pred45 = draw_mod_1_45,
Away_mod1_pred45 = away_mod_1_45,
Home_mod1_pred60 = home_mod_1_60,
Draw_mod1_pred60 = draw_mod_1_60,
Away_mod1_pred60 = away_mod_1_60,
Home_mod1_pred75 = home_mod_1_75,
Draw_mod1_pred75 = draw_mod_1_75,
Away_mod1_pred75 = away_mod_1_75)
hda = cbind(tmp1, tmp2)
HDA = rbind(HDA, hda)
}
RPS <- function(Result, pH, pD, pA) {
verification::rps(obs = Result, pred = matrix(c(pH, pD, pC), nrow = 1))$rps
}
names(HDA)
colÃ§names(HDA)
colnames(HDA)
library(dplyr)
load("2020/data/predictions_mod_0.RData")
load("2020/data/predictions_mod_1.RData")
n_pred = 100000
HDA = tibble()
for(i in 1:length(predictions_mod_0)) {
tmp1 = predictions_mod_0[[i]]$Match %>%
select(-Stoppage_Time_1, -Stoppage_Time_2) %>%
mutate(Result = ifelse(Score_Home > Score_Away, 1,
ifelse(Score_Home == Score_Away, 2,
3)))
home_mod_0_0 = sum(predictions_mod_0[[i]]$pred_0[,1] > predictions_mod_0[[i]]$pred_0[,2]) / n_pred
away_mod_0_0 = sum(predictions_mod_0[[i]]$pred_0[,1] < predictions_mod_0[[i]]$pred_0[,2]) / n_pred
draw_mod_0_0 = 1 - home_mod_0_0 - away_mod_0_0
home_mod_0_15 = sum(predictions_mod_0[[i]]$pred_15[,1] > predictions_mod_0[[i]]$pred_15[,2]) / n_pred
away_mod_0_15 = sum(predictions_mod_0[[i]]$pred_15[,1] < predictions_mod_0[[i]]$pred_15[,2]) / n_pred
draw_mod_0_15 = 1 - home_mod_0_15 - away_mod_0_15
home_mod_0_30 = sum(predictions_mod_0[[i]]$pred_30[,1] > predictions_mod_0[[i]]$pred_30[,2]) / n_pred
away_mod_0_30 = sum(predictions_mod_0[[i]]$pred_30[,1] < predictions_mod_0[[i]]$pred_30[,2]) / n_pred
draw_mod_0_30 = 1 - home_mod_0_30 - away_mod_0_30
home_mod_0_45 = sum(predictions_mod_0[[i]]$pred_45[,1] > predictions_mod_0[[i]]$pred_45[,2]) / n_pred
away_mod_0_45 = sum(predictions_mod_0[[i]]$pred_45[,1] < predictions_mod_0[[i]]$pred_45[,2]) / n_pred
draw_mod_0_45 = 1 - home_mod_0_45 - away_mod_0_45
home_mod_0_60 = sum(predictions_mod_0[[i]]$pred_60[,1] > predictions_mod_0[[i]]$pred_60[,2]) / n_pred
away_mod_0_60 = sum(predictions_mod_0[[i]]$pred_60[,1] < predictions_mod_0[[i]]$pred_60[,2]) / n_pred
draw_mod_0_60 = 1 - home_mod_0_60 - away_mod_0_60
home_mod_0_75 = sum(predictions_mod_0[[i]]$pred_75[,1] > predictions_mod_0[[i]]$pred_75[,2]) / n_pred
away_mod_0_75 = sum(predictions_mod_0[[i]]$pred_75[,1] < predictions_mod_0[[i]]$pred_75[,2]) / n_pred
draw_mod_0_75 = 1 - home_mod_0_75 - away_mod_0_75
home_mod_1_0 = sum(predictions_mod_1[[i]]$pred_0[,1] > predictions_mod_1[[i]]$pred_0[,2]) / n_pred
away_mod_1_0 = sum(predictions_mod_1[[i]]$pred_0[,1] < predictions_mod_1[[i]]$pred_0[,2]) / n_pred
draw_mod_1_0 = 1 - home_mod_1_0 - away_mod_1_0
home_mod_1_15 = sum(predictions_mod_1[[i]]$pred_15[,1] > predictions_mod_1[[i]]$pred_15[,2]) / n_pred
away_mod_1_15 = sum(predictions_mod_1[[i]]$pred_15[,1] < predictions_mod_1[[i]]$pred_15[,2]) / n_pred
draw_mod_1_15 = 1 - home_mod_1_15 - away_mod_1_15
home_mod_1_30 = sum(predictions_mod_1[[i]]$pred_30[,1] > predictions_mod_1[[i]]$pred_30[,2]) / n_pred
away_mod_1_30 = sum(predictions_mod_1[[i]]$pred_30[,1] < predictions_mod_1[[i]]$pred_30[,2]) / n_pred
draw_mod_1_30 = 1 - home_mod_1_30 - away_mod_1_30
home_mod_1_45 = sum(predictions_mod_1[[i]]$pred_45[,1] > predictions_mod_1[[i]]$pred_45[,2]) / n_pred
away_mod_1_45 = sum(predictions_mod_1[[i]]$pred_45[,1] < predictions_mod_1[[i]]$pred_45[,2]) / n_pred
draw_mod_1_45 = 1 - home_mod_1_45 - away_mod_1_45
home_mod_1_60 = sum(predictions_mod_1[[i]]$pred_60[,1] > predictions_mod_1[[i]]$pred_60[,2]) / n_pred
away_mod_1_60 = sum(predictions_mod_1[[i]]$pred_60[,1] < predictions_mod_1[[i]]$pred_60[,2]) / n_pred
draw_mod_1_60 = 1 - home_mod_1_60 - away_mod_1_60
home_mod_1_75 = sum(predictions_mod_1[[i]]$pred_75[,1] > predictions_mod_1[[i]]$pred_75[,2]) / n_pred
away_mod_1_75 = sum(predictions_mod_1[[i]]$pred_75[,1] < predictions_mod_1[[i]]$pred_75[,2]) / n_pred
draw_mod_1_75 = 1 - home_mod_1_75 - away_mod_1_75
tmp2 = tibble(Home_mod0_pred0 = home_mod_0_0,
Draw_mod0_pred0 = draw_mod_0_0,
Away_mod0_pred0 = away_mod_0_0,
Home_mod0_pred15 = home_mod_0_15,
Draw_mod0_pred15 = draw_mod_0_15,
Away_mod0_pred15 = away_mod_0_15,
Home_mod0_pred30 = home_mod_0_30,
Draw_mod0_pred30 = draw_mod_0_30,
Away_mod0_pred30 = away_mod_0_30,
Home_mod0_pred45 = home_mod_0_45,
Draw_mod0_pred45 = draw_mod_0_45,
Away_mod0_pred45 = away_mod_0_45,
Home_mod0_pred60 = home_mod_0_60,
Draw_mod0_pred60 = draw_mod_0_60,
Away_mod0_pred60 = away_mod_0_60,
Home_mod0_pred75 = home_mod_0_75,
Draw_mod0_pred75 = draw_mod_0_75,
Away_mod0_pred75 = away_mod_0_75,
Home_mod1_pred0 = home_mod_1_0,
Draw_mod1_pred0 = draw_mod_1_0,
Away_mod1_pred0 = away_mod_1_0,
Home_mod1_pred15 = home_mod_1_15,
Draw_mod1_pred15 = draw_mod_1_15,
Away_mod1_pred15 = away_mod_1_15,
Home_mod1_pred30 = home_mod_1_30,
Draw_mod1_pred30 = draw_mod_1_30,
Away_mod1_pred30 = away_mod_1_30,
Home_mod1_pred45 = home_mod_1_45,
Draw_mod1_pred45 = draw_mod_1_45,
Away_mod1_pred45 = away_mod_1_45,
Home_mod1_pred60 = home_mod_1_60,
Draw_mod1_pred60 = draw_mod_1_60,
Away_mod1_pred60 = away_mod_1_60,
Home_mod1_pred75 = home_mod_1_75,
Draw_mod1_pred75 = draw_mod_1_75,
Away_mod1_pred75 = away_mod_1_75)
hda = cbind(tmp1, tmp2)
HDA = rbind(HDA, hda)
}
i=1
tmp1 = predictions_mod_0[[i]]$Match %>%
select(-Stoppage_Time_1, -Stoppage_Time_2) %>%
mutate(Result = ifelse(Score_Home > Score_Away, 1,
ifelse(Score_Home == Score_Away, 2,
3)))
predictions_mod_0[[i]]$Match
predictions_mod_0[[i]]$Match %>%
select(-Stoppage_Time_1, -Stoppage_Time_2)
library(dplyr)
load("scrape/data/results.RData")
res = results %>%
filter(Season == 2020) %>%
arrange(Date)
dates = unique(res$Date)
n = 11
tmp1 = res %>%
filter(Date <= dates[n]) %>%
rename(Team = Home_Team) %>%
count(Team, name = "n1")
tmp2 = res %>%
filter(Date <= dates[n]) %>%
rename(Team = Away_Team) %>%
count(Team, name = "n2")
games_per_team = full_join(tmp1, tmp2) %>%
rowwise() %>%
mutate(n = sum(n1, n2, na.rm = TRUE)) %>%
select(-n1, -n2) %>%
arrange(n)
games_per_team
library(dplyr)
load("scrape/data/results.RData")
res = results %>%
filter(Season == 2020) %>%
arrange(Date)
dates = unique(res$Date)
n = 7
tmp1 = res %>%
filter(Date <= dates[n]) %>%
rename(Team = Home_Team) %>%
count(Team, name = "n1")
tmp2 = res %>%
filter(Date <= dates[n]) %>%
rename(Team = Away_Team) %>%
count(Team, name = "n2")
games_per_team = full_join(tmp1, tmp2) %>%
rowwise() %>%
mutate(n = sum(n1, n2, na.rm = TRUE)) %>%
select(-n1, -n2) %>%
arrange(n)
games_per_team
library(dplyr)
load("scrape/data/results.RData")
res = results %>%
filter(Season == 2020) %>%
arrange(Date)
dates = unique(res$Date)
n = 6
tmp1 = res %>%
filter(Date <= dates[n]) %>%
rename(Team = Home_Team) %>%
count(Team, name = "n1")
tmp2 = res %>%
filter(Date <= dates[n]) %>%
rename(Team = Away_Team) %>%
count(Team, name = "n2")
games_per_team = full_join(tmp1, tmp2) %>%
rowwise() %>%
mutate(n = sum(n1, n2, na.rm = TRUE)) %>%
select(-n1, -n2) %>%
arrange(n)
games_per_team
library(dplyr)
load("scrape/data/results.RData")
res = results %>%
filter(Season == 2020) %>%
arrange(Date)
dates = unique(res$Date)
n = 5
tmp1 = res %>%
filter(Date <= dates[n]) %>%
rename(Team = Home_Team) %>%
count(Team, name = "n1")
tmp2 = res %>%
filter(Date <= dates[n]) %>%
rename(Team = Away_Team) %>%
count(Team, name = "n2")
games_per_team = full_join(tmp1, tmp2) %>%
rowwise() %>%
mutate(n = sum(n1, n2, na.rm = TRUE)) %>%
select(-n1, -n2) %>%
arrange(n)
games_per_team
library(dplyr)
load("scrape/data/results.RData")
res = results %>%
filter(Season == 2020) %>%
arrange(Date)
dates = unique(res$Date)
n = 6
tmp1 = res %>%
filter(Date <= dates[n]) %>%
rename(Team = Home_Team) %>%
count(Team, name = "n1")
tmp2 = res %>%
filter(Date <= dates[n]) %>%
rename(Team = Away_Team) %>%
count(Team, name = "n2")
games_per_team = full_join(tmp1, tmp2) %>%
rowwise() %>%
mutate(n = sum(n1, n2, na.rm = TRUE)) %>%
select(-n1, -n2) %>%
arrange(n)
games_per_team
dates[6]
View(res)
library(dplyr)
load("scrape/data/results.RData")
res = results %>%
filter(Season == 2020) %>%
arrange(Date)
dates = unique(res$Date)
n = 6
tmp1 = res %>%
filter(Date <= dates[n]) %>%
rename(Team = Home_Team) %>%
count(Team, name = "n1")
tmp2 = res %>%
filter(Date <= dates[n]) %>%
rename(Team = Away_Team) %>%
count(Team, name = "n2")
games_per_team = full_join(tmp1, tmp2) %>%
rowwise() %>%
mutate(n = sum(n1, n2, na.rm = TRUE)) %>%
select(-n1, -n2) %>%
arrange(n)
games_per_team
View(res)
dates[7]
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/predicting_matches_mod_0.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/predicting_matches_mod_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/HDA.R', echo=TRUE)
library(dplyr)
library(ggplot2)
load("data/HDA.RData")
nrow(HDA)
tibble(RPS = apply(HDA[,-c(1:44)], 2, mean),
Minute = as.integer(c(0, 15, 30, 45, 60, 75, 0, 15, 30, 45, 60, 75)),
Model = c(rep("0", 6), rep("1", 6))) %>%
ggplot(aes(x = Minute, y = RPS, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches")
View(HDA)
HDA2 = HDA %>%
filter(Match > 190)
tibble(RPS = apply(HDA2[,-c(1:44)], 2, mean),
Minute = as.integer(c(0, 15, 30, 45, 60, 75, 0, 15, 30, 45, 60, 75)),
Model = c(rep("0", 6), rep("1", 6))) %>%
ggplot(aes(x = Minute, y = RPS, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches since match 190")
190+190/2
HDA3 = HDA %>%
filter(Match > 280)
tibble(RPS = apply(HDA3[,-c(1:44)], 2, mean),
Minute = as.integer(c(0, 15, 30, 45, 60, 75, 0, 15, 30, 45, 60, 75)),
Model = c(rep("0", 6), rep("1", 6))) %>%
ggplot(aes(x = Minute, y = RPS, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches since match 280")
HDA4 = HDA %>%
filter(Match <= 190)
tibble(RPS = apply(HDA4[,-c(1:44)], 2, mean),
Minute = as.integer(c(0, 15, 30, 45, 60, 75, 0, 15, 30, 45, 60, 75)),
Model = c(rep("0", 6), rep("1", 6))) %>%
ggplot(aes(x = Minute, y = RPS, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches since match 280")
HDA5 = HDA5 %>%
filter(Match > 190 & Match <= 280)
