rename(GeoMean = value,
Minute = name) %>%
stringr::str_replace_all(Minute, "Minute ", "")
df_long = df %>%
pivot_longer(cols = starts_with("Minute ")) %>%
rename(GeoMean = value,
Minute = name)
df_long
df_long = df %>%
pivot_longer(cols = starts_with("Minute ")) %>%
rename(GeoMean = value,
Minute = name) %>%
mutate(Minute = stringr::str_replace_all(Minute, "Minute ", ""))
df_long
df_long %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the scores")
df_long
df_long %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
#scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the scores")
scores = tibble(GeoMean = apply(HDA[,c(129:158)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("0", 6),
rep("3", 6),
rep("8", 6),
rep("9", 6),
rep("10", 6)))) %>%
mutate(GeoMean = log(GeoMean))
scores
scores = tibble(GeoMean = apply(HDA[,c(129:158)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("0", 6),
rep("3", 6),
rep("8", 6),
rep("9", 6),
rep("10", 6)))) %>%
mutate(GeoMean = log(GeoMean))
df = scores %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ")
for(i in 2:5) {
df[i, 2:6] = df[i, 2:6] - df[1, 2:6]
}
df_long = df %>%
pivot_longer(cols = starts_with("Minute ")) %>%
rename(GeoMean = value,
Minute = name) %>%
mutate(Minute = stringr::str_replace_all(Minute, "Minute ", ""))
df_long %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the scores")
df_long
df_long = df %>%
pivot_longer(cols = starts_with("Minute ")) %>%
rename(GeoMean = value,
Minute = name) %>%
mutate(Minute = stringr::str_replace_all(Minute, "Minute ", "")) %>%
mutate(Minute = as.integer(Minute))
df_long %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the scores")
df_long
df_long %>%
filter(Model != "0") %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the scores")
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
HDA = HDA_dc %>%
anti_join(first_matches)
nrow(HDA)
HDA[,c(9:158)][which(HDA[,c(9:158)] == 0, arr.ind = TRUE)] = 10^-5
results = tibble(GeoMean = apply(HDA[,c(99:128)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("0", 6),
rep("3", 6),
rep("8", 6),
rep("9", 6),
rep("10", 6))))
results %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the results")
results %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
scores = tibble(GeoMean = apply(HDA[,c(129:158)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("0", 6),
rep("3", 6),
rep("8", 6),
rep("9", 6),
rep("10", 6))))
scores %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the scores")
scores %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
scores = tibble(GeoMean = apply(HDA[,c(129:158)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("0", 6),
rep("3", 6),
rep("8", 6),
rep("9", 6),
rep("10", 6)))) %>%
mutate(GeoMean = log(GeoMean))
df = scores %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ")
for(i in 2:5) {
df[i, 2:6] = df[i, 2:6] - df[1, 2:6]
}
df_long = df %>%
pivot_longer(cols = starts_with("Minute ")) %>%
rename(GeoMean = value,
Minute = name) %>%
mutate(Minute = stringr::str_replace_all(Minute, "Minute ", "")) %>%
mutate(Minute = as.integer(Minute))
df_long %>%
filter(Model != "0") %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the scores")
scores = tibble(GeoMean = apply(HDA[,c(129:158)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("0", 6),
rep("3", 6),
rep("8", 6),
rep("9", 6),
rep("10", 6)))) %>%
mutate(GeoMean = log(GeoMean))
# scores %>%
#   ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
#   geom_line() +
#   geom_point() +
#   scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
#   theme_bw() +
#   ggtitle("All predicted matches") +
#   ylab("Geometric mean for the scores")
df = scores %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ")
for(i in 2:5) {
df[i, 2:7] = df[i, 2:7] - df[1, 2:7]
}
df_long = df %>%
pivot_longer(cols = starts_with("Minute ")) %>%
rename(GeoMean = value,
Minute = name) %>%
mutate(Minute = stringr::str_replace_all(Minute, "Minute ", "")) %>%
mutate(Minute = as.integer(Minute))
df_long %>%
filter(Model != "0") %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the scores")
library(CVXR)
load("2015-2020/data/input.RData")
load("2015-2020/data/input_mod_B.RData")
load("2015-2020/data/input_mod_12.RData")
names(M1_lambda)
colnames(M1_lambda)
2*n+2
M1_lambda = M1_lambda[,1:(2*n+2)]
names(M1_lambda)
colnames(M1_lambda)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_B.R', echo=TRUE)
library(CVXR)
load("2015-2020/data/input.RData")
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_B.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_C.R', echo=TRUE)
library(CVXR)
load("2015-2020/data/input.RData")
load("2015-2020/data/input_mod_12.RData")
M1_lambda = M1_lambda[,1:(2*n+2)]
M2_lambda = M2_lambda[,1:(2*n+2)]
M1_mu = M1_mu[,1:(2*n+2)]
M2_mu = M2_mu[,1:(2*n+2)]
library(CVXR)
load("2015-2020/data/input.RData")
load("2015-2020/data/input_mod_12.RData")
M1_lambda = M1_lambda[,1:(2*n+4)]
M2_lambda = M2_lambda[,1:(2*n+4)]
M1_mu = M1_mu[,1:(2*n+4)]
M2_mu = M2_mu[,1:(2*n+4)]
colnames(M1_lambda)
colnames(M1_mu)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_C.R', echo=TRUE)
library(CVXR)
load("2015-2020/data/input.RData")
load("2015-2020/data/input_mod_12.RData")
colnames(M1_lambda)
M1_lambda = M1_lambda[,1:(2*n+6)]
M2_lambda = M2_lambda[,1:(2*n+6)]
M1_mu = M1_mu[,1:(2*n+6)]
M2_mu = M2_mu[,1:(2*n+6)]
colnames(M1_lambda)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_D.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_B_goals.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_B_goals.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_B_goals.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_C_goals.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_C_goals.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_D_goals.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_B_goals.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_C_goals.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_D_goals.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_B_year.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_B_year.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_B_year.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_C_year.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_C_year.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_D_year.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/mod_B_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/mod_B_dc.R', echo=TRUE)
mod_B_dc
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/mod_C_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/mod_D_dc.R', echo=TRUE)
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/data/mod_D.RData")
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/data/mod_3.RData")
mod_D$alpha
mod_D$alpha
mod_3$alpha
mod_D$gamma
mod_3$gamma
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_12_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/mod_12_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_12_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_12_dc.R', echo=TRUE)
library(dplyr)
library(knitr)
load("data/input.RData")
load("data/input_mod_1.RData")
load("data/mod_0_goals.RData")
load("data/mod_A_goals.RData")
library(dplyr)
library(knitr)
load("data/input.RData")
load("data/input_mod_1.RData")
load("data/mod_0_goals.RData")
load("data/mod_B_goals.RData")
load("data/mod_C_goals.RData")
load("data/mod_3_goals.RData")
load("data/mod_12_goals.RData")
load("data/mod_0_year.RData")
load("data/mod_B_year.RData")
load("data/mod_C_year.RData")
load("data/mod_3_year.RData")
load("data/mod_12_year.RData")
library(dplyr)
library(knitr)
load("data/input.RData")
load("data/input_mod_1.RData")
load("data/mod_0_goals.RData")
load("data/mod_B_goals.RData")
load("data/mod_C_goals.RData")
load("data/mod_3_goals.RData")
load("data/mod_12_goals.RData")
load("data/mod_0_year.RData")
load("data/mod_B_year.RData")
load("data/mod_C_year.RData")
load("data/mod_3_year.RData")
load("data/mod_12_year.RData")
aic <- function(loglik, k) {
2*k - 2*loglik
}
bic <- function(loglik, k, n) {
k*log(n) - 2*loglik
}
tib = tibble(Model = rep(c("A", "B", "C", "D", "E"), 2),
Param = c(rep("Constant", 5), rep("Per season", 5)),
loglik = c(mod_0_goals$loglik,
mod_B_goals$loglik,
mod_C_goals$loglik,
mod_3_goals$loglik,
mod_12_goals$loglik,
mod_0_year$loglik,
mod_B_year$loglik,
mod_C_year$loglik,
mod_3_year$loglik,
mod_12_year$loglik),
k = c(length(unlist(mod_0_goals)) - 2,
length(unlist(mod_B_goals)) - 2,
length(unlist(mod_C_goals)) - 2,
length(unlist(mod_3_goals)) - 2,
length(unlist(mod_12_goals)) - 2,
length(unlist(mod_0_year)) - 2,
length(unlist(mod_B_year)) - 2,
length(unlist(mod_C_year)) - 2,
length(unlist(mod_3_year)) - 2,
length(unlist(mod_12_year)) - 2),
n = L1 + L2) %>%
rowwise() %>%
mutate(AIC = aic(loglik, k),
BIC = bic(loglik, k, n))
tib
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/HDA_dc_2.R', echo=TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
HDA = HDA_dc %>%
anti_join(first_matches)
nrow(HDA)
HDA[,c(9:158)][which(HDA[,c(9:158)] == 0, arr.ind = TRUE)] = 10^-5
results = tibble(GeoMean = apply(HDA[,c(99:128)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("A", 6),
rep("B", 6),
rep("C", 6),
rep("D", 6),
rep("E", 6))))
results %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the results")
results %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
View(HDA)
names(HDA)
results = tibble(GeoMean = apply(HDA[,c(99:128)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("A", 6),
rep("B", 6),
rep("C", 6),
rep("D", 6),
rep("E", 6))))
results
?pivot_longer
?pivot_wider
results = tibble(GeoMean = apply(HDA[,c(99:128)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("A", 6),
rep("B", 6),
rep("C", 6),
rep("D", 6),
rep("E", 6)))) %>%
pivot_wider(names_from = "Minute", values_from = "GeoMean")
results
results = tibble(GeoMean = apply(HDA[,c(99:128)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("A", 6),
rep("B", 6),
rep("C", 6),
rep("D", 6),
rep("E", 6)))) %>%
pivot_wider(names_from = "Minute", values_from = "GeoMean", names_prefix = "Minute ")
results
results = tibble(GeoMean = apply(HDA[,c(99:128)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("A", 6),
rep("B", 6),
rep("C", 6),
rep("D", 6),
rep("E", 6)))) %>%
pivot_wider(names_from = "Model", values_from = "GeoMean", names_prefix = "Model ")
results %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the results")
results = tibble(GeoMean = apply(HDA[,c(99:128)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("A", 6),
rep("B", 6),
rep("C", 6),
rep("D", 6),
rep("E", 6)))) %>%
pivot_wider(names_from = "Model", values_from = "GeoMean", names_prefix = "Model ")
results
results = tibble(GeoMean = apply(HDA[,c(99:128)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("A", 6),
rep("B", 6),
rep("C", 6),
rep("D", 6),
rep("E", 6)))) %>%
pivot_wider(names_from = "Model", values_from = "GeoMean", names_prefix = "Model ") %>%
mutate(`Model B` = log(`Model B`) - log(`Model A`),
`Model C` = log(`Model D`) - log(`Model A`),
`Model D` = log(`Model D`) - log(`Model A`),
`Model E` = log(`Model E`) - log(`Model A`),
`Model A` = 0)
results
?pivot_longer
results = tibble(GeoMean = apply(HDA[,c(99:128)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("A", 6),
rep("B", 6),
rep("C", 6),
rep("D", 6),
rep("E", 6)))) %>%
pivot_wider(names_from = "Model", values_from = "GeoMean", names_prefix = "Model ") %>%
mutate(`Model B` = log(`Model B`) - log(`Model A`),
`Model C` = log(`Model D`) - log(`Model A`),
`Model D` = log(`Model D`) - log(`Model A`),
`Model E` = log(`Model E`) - log(`Model A`),
`Model A` = 0) %>%
pivot_longer(names_to = "Model", values_to = "GeoMean")
results = tibble(GeoMean = apply(HDA[,c(99:128)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("A", 6),
rep("B", 6),
rep("C", 6),
rep("D", 6),
rep("E", 6)))) %>%
pivot_wider(names_from = "Model", values_from = "GeoMean", names_prefix = "Model ") %>%
mutate(`Model B` = log(`Model B`) - log(`Model A`),
`Model C` = log(`Model D`) - log(`Model A`),
`Model D` = log(`Model D`) - log(`Model A`),
`Model E` = log(`Model E`) - log(`Model A`),
`Model A` = 0) %>%
pivot_longer(cols = starts_with("Model"), names_to = "Model", values_to = "GeoMean")
results %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the results")
results %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
results = tibble(GeoMean = apply(HDA[,c(99:128)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 5)),
Model = factor(c(rep("A", 6),
rep("B", 6),
rep("C", 6),
rep("D", 6),
rep("E", 6)))) %>%
pivot_wider(names_from = "Model", values_from = "GeoMean", names_prefix = "Model ") %>%
mutate(`Model B` = log(`Model B`) - log(`Model A`),
`Model C` = log(`Model C`) - log(`Model A`),
`Model D` = log(`Model D`) - log(`Model A`),
`Model E` = log(`Model E`) - log(`Model A`),
`Model A` = 0) %>%
pivot_longer(cols = starts_with("Model"), names_to = "Model", values_to = "GeoMean")
results %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the results")
results %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
