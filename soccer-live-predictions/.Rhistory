}
tibble(x = x, y = y) %>%
ggplot(aes(x, y)) +
geom_line() +
theme_bw() +
geom_point()
library(dplyr)
library(ggplot2)
load("weight/data/mod_8_dc.RData")
y = NULL
x = as.Date(names(mod_8_dc), format = "%Y-%m-%d")
for(i in 1:length(mod_8_dc)) {
y[i] = exp(mod_8_dc[[i]]$eta[2])
}
tibble(x = x, y = y) %>%
ggplot(aes(x, y)) +
geom_line() +
theme_bw() +
geom_point()
library(dplyr)
library(ggplot2)
load("weight/data/mod_8_dc.RData")
y = NULL
x = as.Date(names(mod_8_dc), format = "%Y-%m-%d")
for(i in 1:length(mod_8_dc)) {
y[i] = exp(mod_8_dc[[i]]$alpha["Flamengo"])
}
tibble(x = x, y = y) %>%
ggplot(aes(x, y)) +
geom_line() +
theme_bw() +
geom_point()
mod_8_dc[[i]]$alpha["Flamengo"]
library(dplyr)
library(ggplot2)
load("weight/data/mod_8_dc.RData")
y = NULL
x = as.Date(names(mod_8_dc), format = "%Y-%m-%d")
for(i in 1:length(mod_8_dc)) {
y[i] = exp(mod_8_dc[[i]]$alpha["Flamengo"])
}
tibble(x = x, y = y) %>%
ggplot(aes(x, y)) +
geom_line() +
theme_bw() +
geom_point()
tibble(x = x, y = y) %>%
ggplot(aes(x, y)) +
geom_line() +
theme_bw() +
geom_point() +
ylab(0, 0.3)
tibble(x = x, y = y) %>%
ggplot(aes(x, y)) +
geom_line() +
theme_bw() +
geom_point() +
ylim(0, 0.3)
exp(mod_8_dc[[i]]$omega
)
library(dplyr)
library(ggplot2)
load("weight/data/mod_8_dc.RData")
y = NULL
x = as.Date(names(mod_8_dc), format = "%Y-%m-%d")
for(i in 1:length(mod_8_dc)) {
y[i] = exp(mod_8_dc[[i]]$omega)
}
tibble(x = x, y = y) %>%
ggplot(aes(x, y)) +
geom_line() +
theme_bw() +
geom_point() +
ylim(0, 0.3)
library(dplyr)
library(ggplot2)
load("weight/data/mod_8_dc.RData")
y = NULL
x = as.Date(names(mod_8_dc), format = "%Y-%m-%d")
for(i in 1:length(mod_8_dc)) {
y[i] = exp(mod_8_dc[[i]]$omega)
}
tibble(x = x, y = y) %>%
ggplot(aes(x, y)) +
geom_line() +
theme_bw() +
geom_point()
library(dplyr)
library(ggplot2)
load("weight/data/mod_8_dc.RData")
y = NULL
x = as.Date(names(mod_8_dc), format = "%Y-%m-%d")
for(i in 1:length(mod_8_dc)) {
y[i] = exp(mod_8_dc[[i]]$omega)
}
tibble(x = x, y = y) %>%
ggplot(aes(x, y)) +
geom_line() +
theme_bw() +
geom_point() +
ylab(0, 2)
library(dplyr)
library(ggplot2)
load("weight/data/mod_8_dc.RData")
y = NULL
x = as.Date(names(mod_8_dc), format = "%Y-%m-%d")
for(i in 1:length(mod_8_dc)) {
y[i] = exp(mod_8_dc[[i]]$omega)
}
tibble(x = x, y = y) %>%
ggplot(aes(x, y)) +
geom_line() +
theme_bw() +
geom_point() +
ylim(0, 2)
mod_8_dc[[i]]$omega_xy
library(dplyr)
library(ggplot2)
load("weight/data/mod_8_dc.RData")
y = NULL
x = as.Date(names(mod_8_dc), format = "%Y-%m-%d")
for(i in 1:length(mod_8_dc)) {
y[i] = exp(mod_8_dc[[i]]$omega_xy["ahead"])
}
tibble(x = x, y = y) %>%
ggplot(aes(x, y)) +
geom_line() +
theme_bw() +
geom_point()
library(dplyr)
library(ggplot2)
load("weight/data/mod_8_dc.RData")
y = NULL
x = as.Date(names(mod_8_dc), format = "%Y-%m-%d")
for(i in 1:length(mod_8_dc)) {
y[i] = exp(mod_8_dc[[i]]$omega_xy["behind"])
}
tibble(x = x, y = y) %>%
ggplot(aes(x, y)) +
geom_line() +
theme_bw() +
geom_point()
nrow(tab_results)
nrow(tab_results)
library(knitr)
library(dplyr)
library(ggplot2)
load("data/goodness_of_fit_dc.RData")
nrow(tab_results)
tab_results[2:19,] - tab_results[1,]
View(tab_results)
tab_results[1,]
tab_results[2:19,] - tab_results[1,]
for(i in 2:19) {
tab_results[i,] = tab_results[1,] - tab_results[i,]
}
kable(tab_results[1:4,], digits = 4)
for(i in 2:19) {
tab_results[i,] = tab_results[i,] - tab_results[1,]
}
kable(tab_results[1:4,], digits = 4)
library(knitr)
library(dplyr)
library(ggplot2)
load("data/goodness_of_fit_dc.RData")
a
library(knitr)
library(dplyr)
library(ggplot2)
load("data/goodness_of_fit_dc.RData")
for(i in 2:19) {
tab_results[i,] = tab_results[i,] - tab_results[1,]
}
kable(tab_results[1:4,], digits = 4)
kable(tab_results, digits = 4)
tab_results
with_plus(tab_results)
# https://stackoverflow.com/questions/37643423/knitr-precede-positive-numbers-with-plus-sign
with_plus <- function(x, ...)
{
if (x > 0)
{
sprintf(
fmt = "+ %s",
format(x, ...)
)
}
else
{
x
}
}
with_plus(tab_results)
?kable
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
HDA = HDA_dc %>%
anti_join(first_matches)
nrow(HDA)
HDA[,c(9:98)][which(HDA[,c(9:98)] == 0, arr.ind = TRUE)] = 10^-5
results = tibble(GeoMean = apply(HDA[,c(63:80)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 3)),
Model = factor(c(rep("0", 6),
rep("3", 6),
rep("8", 6))))
results %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the results")
results %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
scores = tibble(GeoMean = apply(HDA[,c(81:98)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 3)),
Model = factor(c(rep("0", 6),
rep("3", 6),
rep("8", 6))))
scores %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the scores")
scores %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
matches = reds %>%
filter(Season > 2015, Half == 1) %>%
select(Season, Match)
HDA_reds = HDA %>%
inner_join(matches)
HDA_no_reds = HDA %>%
anti_join(matches)
nrow(HDA_reds)
results_reds = tibble(GeoMean = apply(HDA_reds[,c(63:80)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 3)),
Model = factor(c(rep("0", 6),
rep("3", 6),
rep("8", 6))))
results_reds %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches with a red card in the first half") +
ylab("Geometric mean for the results")
results_reds %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
results_no_reds = tibble(GeoMean = apply(HDA_no_reds[,c(63:80)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 3)),
Model = factor(c(rep("0", 6),
rep("3", 6),
rep("8", 6))))
results_no_reds %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches with no red cards in the first half") +
ylab("Geometric mean for the results")
results_no_reds %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
scores_reds = tibble(GeoMean = apply(HDA_reds[,c(81:98)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 3)),
Model = factor(c(rep("0", 6),
rep("3", 6),
rep("8", 6))))
scores_reds %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches with a red card in the first half") +
ylab("Geometric mean for the scores")
scores_reds %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
scores_no_reds = tibble(GeoMean = apply(HDA_no_reds[,c(81:98)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 3)),
Model = factor(c(rep("0", 6),
rep("3", 6),
rep("8", 6))))
scores_no_reds %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches with no red cards in the first half") +
ylab("Geometric mean for the scores")
scores_no_reds %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
HDA_2020 = HDA %>%
filter(Season == 2020)
nrow(HDA_2020)
results_2020 = tibble(GeoMean = apply(HDA_2020[,c(63:80)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 3)),
Model = factor(c(rep("0", 6),
rep("3", 6),
rep("8", 6))))
results_2020 %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches in the 2020 season") +
ylab("Geometric mean for the results")
results_2020 %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
scores_2020 = tibble(GeoMean = apply(HDA_2020[,c(81:98)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 3)),
Model = factor(c(rep("0", 6),
rep("3", 6),
rep("8", 6))))
scores_2020 %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches in the 2020 season") +
ylab("Geometric mean for the scores")
scores_2020 %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
goals
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/goals.RData")
goals
results
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/results.RData")
results
tib = results %>%
select(Season, Match) %>%
filter(Season > 2015)
tib
names(goals)
home_score_at_45 <- function(Season, Match) {
goals %>%
filter(Season == Season,
Match == Match,
Team == 1,
Half == 1) %>%
nrow()
}
away_score_at_45 <- function(Season, Match) {
goals %>%
filter(Season == Season,
Match == Match,
Team == 2,
Half == 1) %>%
nrow()
}
at_45 = results %>%
select(Season, Match) %>%
filter(Season > 2015)
at_45 = results %>%
select(Season, Match) %>%
filter(Season > 2015)
at_45 = at_45 %>%
rowwise()
mutate(Home_Score = home_score_at_45(Season, Match),
Away_Score = away_score_at_45(Season, Match))
at_45 = at_45 %>%
rowwise() %>%
mutate(Home_Score = home_score_at_45(Season, Match),
Away_Score = away_score_at_45(Season, Match))
View(at_45)
Season = 2016
Match = 12
goals %>%
filter(Season == Season,
Match == Match,
Team == 1,
Half == 1) %>%
nrow()
goals %>%
filter(Season == Season,
Match == Match,
Team == 1,
Half == 1)
home_score_at_45 <- function(season, match) {
goals %>%
filter(Season == season,
Match == match,
Team == 1,
Half == 1) %>%
nrow()
}
away_score_at_45 <- function(season, match) {
goals %>%
filter(Season == season,
Match == match,
Team == 2,
Half == 1) %>%
nrow()
}
at_45 = at_45 %>%
rowwise() %>%
mutate(Home_Score = home_score_at_45(Season, Match),
Away_Score = away_score_at_45(Season, Match))
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/results.RData")
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/goals.RData")
at_45 = results %>%
select(Season, Match) %>%
filter(Season > 2015)
home_score_at_45 <- function(season, match) {
goals %>%
filter(Season == season,
Match == match,
Team == 1,
Half == 1) %>%
nrow()
}
away_score_at_45 <- function(season, match) {
goals %>%
filter(Season == season,
Match == match,
Team == 2,
Half == 1) %>%
nrow()
}
at_45 = at_45 %>%
rowwise() %>%
mutate(Home_Score = home_score_at_45(Season, Match),
Away_Score = away_score_at_45(Season, Match),
abs_dif = abs(home_score - away_score))
at_45 = at_45 %>%
rowwise() %>%
mutate(Home_Score = home_score_at_45(Season, Match),
Away_Score = away_score_at_45(Season, Match),
abs_dif = abs(Home_Score - Away_Score))
tmp_00 = at_45 %>%
filter(abs_dif == 0) %>%
select(Season, Match)
HDA_00 = HDA %>%
left_join(tmp_00)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
HDA = HDA_dc %>%
anti_join(first_matches)
nrow(HDA)
HDA[,c(9:98)][which(HDA[,c(9:98)] == 0, arr.ind = TRUE)] = 10^-5
tmp_00 = at_45 %>%
filter(abs_dif == 0) %>%
select(Season, Match)
HDA_00 = HDA %>%
left_join(tmp_00)
nrow(HDA_00)
HDA_00
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/results.RData")
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/goals.RData")
at_45 = results %>%
select(Season, Match) %>%
filter(Season > 2015)
home_score_at_45 <- function(season, match) {
goals %>%
filter(Season == season,
Match == match,
Team == 1,
Half == 1) %>%
nrow()
}
away_score_at_45 <- function(season, match) {
goals %>%
filter(Season == season,
Match == match,
Team == 2,
Half == 1) %>%
nrow()
}
at_45 = at_45 %>%
rowwise() %>%
mutate(Home_Score = home_score_at_45(Season, Match),
Away_Score = away_score_at_45(Season, Match),
abs_dif = abs(Home_Score - Away_Score))
tmp_00 = at_45 %>%
filter(abs_dif == 0) %>%
select(Season, Match)
HDA_00 = HDA %>%
inner_join(tmp_00)
nrow(HDA_00)
