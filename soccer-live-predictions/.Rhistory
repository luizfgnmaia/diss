load("data/HDA_dc.RData")
load("data/first_matches.RData")
HDA = HDA_dc %>%
anti_join(first_matches)
nrow(HDA)
HDA[which(HDA == 0, arr.ind = TRUE)]
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
HDA = HDA_dc %>%
anti_join(first_matches)
nrow(HDA)
GeoMean = apply(HDA[,c(45:56)], 2, EnvStats::geoMean)
GeoMean
all = tibble(GeoMean = apply(HDA[,c(45:56)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
all %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean")
all %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
names(HDA)
scores = tibble(GeoMean = apply(HDA[,c(57:68)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
scores %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the scores")
scores %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
matches = reds %>%
filter(Season > 2015, Half == 1) %>%
select(Season, Match)
nrow(matches)
matches
HDA_reds = HDA %>%
right_join(matches)
HDA_reds
nrow(HDA_reds)
HDA_reds = HDA %>%
right_join(matches)
results_reds = tibble(GeoMean = apply(HDA_reds[,c(45:56)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
results_reds %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches with a red card in the first half") +
ylab("Geometric mean for the results")
results_reds %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
GeoMean = apply(HDA_reds[,c(45:56)], 2, EnvStats::geoMean)
GeoMean
HDA_reds = HDA %>%
right_join(matches)
HDA_reds
View(HDA_reds)
results_reds = tibble(GeoMean = apply(HDA_reds[,c(45:56)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
results_reds
HDA_reds[,c(45:56)]
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
HDA = HDA_dc %>%
anti_join(first_matches)
nrow(HDA)
results = tibble(GeoMean = apply(HDA[,c(45:56)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
results %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the results")
results %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
scores = tibble(GeoMean = apply(HDA[,c(57:68)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
scores %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the scores")
scores %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
matches = reds %>%
filter(Season > 2015, Half == 1) %>%
select(Season, Match)
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
matches = reds %>%
filter(Season > 2015, Half == 1) %>%
select(Season, Match)
nrow(matches)
HDA_reds = HDA %>%
right_join(matches)
View(HDA_reds)
matches = reds %>%
filter(Season > 2015, Half == 1) %>%
select(Season, Match)
View(matches)
HDA_reds = HDA %>%
inner_join(matches)
View(HDA_reds)
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
matches = reds %>%
filter(Season > 2015, Half == 1) %>%
select(Season, Match)
HDA_reds = HDA %>%
inner_join(matches)
nrow(HDA_reds)
results_reds = tibble(GeoMean = apply(HDA_reds[,c(45:56)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
results_reds %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches with a red card in the first half") +
ylab("Geometric mean for the results")
results_reds %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
HDA_no_reds = HDA %>%
anti_join(matches)
results_no_reds = tibble(GeoMean = apply(HDA_no_reds[,c(45:56)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
results_no_reds %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches with no red cards in the first half") +
ylab("Geometric mean for the results")
results_no_reds %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
load("weight/data/first_matches.RData")
csi_mod_0_pred_0(0.0065)
library(dplyr)
load("scrape/data/results2.RData")
load("scrape/data/goals.RData")
load("scrape/data/reds.RData")
load("2015-2020/data/input.RData")
source("weigth/fit_mod_0.R")
source("pred/pred_mod_0.R")
load("weight/data/matches_to_be_predicted.RData")
load("weight/data/first_matches.RData")
pnk_Result <- function(Result, pH, pD, pA) {
p = c(pH, pD, pA)
p[Result]
}
pnk_Score <- function(Score, Match) {
event = paste0(Match$Score_Home, "-", Match$Score_Away)
p = Score[event]
ifelse(is.na(p), 0, p)
}
csi_mod_0_pred_0 <- function(csi) {
set.seed(1)
mod_0 = fit_mod_0_dates(csi)
predictions_mod_0 = list()
lst = list()
season_match = NULL
for(i in 1:length(ind)) {
lst$Match = results %>%
filter(Season == copy_results$Season[ind[i]],
Match == copy_results$Match[ind[i]])
season_match[i] = paste(lst$Match$Season, lst$Match$Match)
lst$pred_0 = pred_mod_0(mod_0 = mod_0[[lst$Match$Date]],
n = n_pred,
home_team = lst$Match$Home_Team,
away_team = lst$Match$Away_Team)
predictions_mod_0[[i]] = lst
print(paste0(round(100*i/length(ind), 2), "%"))
}
names(predictions_mod_0) = season_match
HDA = tibble()
for(i in 1:length(predictions_mod_0)) {
tmp1 = predictions_mod_0[[i]]$Match %>%
select(-Stoppage_Time_1, -Stoppage_Time_2) %>%
mutate(Result = ifelse(Score_Home > Score_Away, 1,
ifelse(Score_Home == Score_Away, 2,
3)))
Home_mod_0_pred_0 = predictions_mod_0[[i]]$pred_0$Result[[1]]
Draw_mod_0_pred_0 = predictions_mod_0[[i]]$pred_0$Result[[2]]
Away_mod_0_pred_0 = predictions_mod_0[[i]]$pred_0$Result[[3]]
tmp2 = tibble(Home_mod_0_pred_0, Draw_mod_0_pred_0, Away_mod_0_pred_0)
hda = cbind(tmp1, tmp2)
HDA = rbind(HDA, hda)
}
pnk_Score_mod_0_pred_0 = NULL
for(i in 1:nrow(HDA)) {
pnk_Score_mod_0_pred_0[i] = pnk_Score(predictions_mod_0[[i]]$pred_0$Score, predictions_mod_0[[i]]$Match)
}
HDA = HDA %>%
rowwise() %>%
mutate(pnk_Result_mod_0_pred_0 = pnk_Result(Result, Home_mod_0_pred_0, Draw_mod_0_pred_0, Away_mod_0_pred_0)) %>%
cbind(pnk_Score_mod_0_pred_0) %>%
anti_join(first_matches)
GeoMean_Results = EnvStats::geoMean(HDA$pnk_Result_mod_0_pred_0)
GeoMean_Scores = EnvStats::geoMean(HDA$pnk_Result_mod_0_pred_0)
ret = list(GeoMean_Results = GeoMean_Results,
GeoMean_Scores = GeoMean_Scores,
HDA = HDA)
ret
}
csi_mod_0_pred_0(0.0065)
library(dplyr)
load("scrape/data/results2.RData")
load("scrape/data/goals.RData")
load("scrape/data/reds.RData")
load("2015-2020/data/input.RData")
source("weigth/fit_mod_0.R")
source("pred/pred_mod_0.R")
load("weight/data/matches_to_be_predicted.RData")
load("weight/data/first_matches.RData")
source("weight/fit_mod_0.R")
source("weight/fit_mod_0.R")
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0.R', echo=TRUE)
0.0065/3.5
seq(from = 0.0002, to = 0.02, by = 0.002)
seq(from = 0.0002, to = 0.02, by = 0.0002)
seq(from = 0.0001, to = 0.02, by = 0.0001)
val = seq(from = 0.0001, to = 0.02, by = 0.0001)
val
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0.R', echo=TRUE)
lst_csi_mod_0_pred_0[[i]][2]
i
i=2
print(lst_csi_mod_0_pred_0[[i]][2])
print(lst_csi_mod_0_pred_0[[i]][3])
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0.R', echo=TRUE)
names(lst_csi_mod_0_pred_0) = values_to_test
save(lst_csi_mod_0_pred_0, file = "weight/data/lst_csi_mod_0_pred_0.RData")
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0.R', echo=TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("weight/data/HDA_dc.RData")
load("weight/data/first_matches.RData")
HDA = HDA_dc %>%
anti_join(first_matches)
nrow(HDA)
load("data/csi_mod_0_pred_0.RData")
library(dplyr)
library(ggplot2)
load("data/csi_mod_0_pred_0.RData")
load("data/lst_csi_mod_0_pred_0.RData")
lst_csi_mod_0_pred_0
csi = names(lst_csi_mod_0_pred_0)
csi
csi = names(lst_csi_mod_0_pred_0) %>%
as.numeric()
casi
csi
i=1
csi = as.numeric(names(lst_csi_mod_0_pred_0))
GeoMean_Results = NULL
GeoMean_Scores = NULL
for(i in 1:length(lst_csi_mod_0_pred_0)) {
GeoMean_Results = lst_csi_mod_0_pred_0[[i]]$GeoMean_Results
GeoMean_Scores = lst_csi_mod_0_pred_0[[i]]$GeoMean_Scores
}
GeoMean_Results
csi = as.numeric(names(lst_csi_mod_0_pred_0))
GeoMean_Results = NULL
GeoMean_Scores = NULL
for(i in 1:length(lst_csi_mod_0_pred_0)) {
GeoMean_Results[i] = lst_csi_mod_0_pred_0[[i]]$GeoMean_Results
GeoMean_Scores[i] = lst_csi_mod_0_pred_0[[i]]$GeoMean_Scores
}
GeoMean_Results
plot(GeoMean_Results)
plot(GeoMean_Scores)
tib_csi = tibble(csi, GeoMean_Results, GeoMean_Scores)
tib %>%
arrange(desc(GeoMean_Results))
tib_csi %>%
arrange(desc(GeoMean_Results))
tib_csi %>%
arrange(desc(GeoMean_Scores))
0.00065/3.5
0.0065/3.5
tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Results)) +
geom_lines() +
geom_point() +
theme_bw()
tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Results)) +
geom_line() +
geom_point() +
theme_bw()
tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Results)) +
geom_line() +
geom_point() +
theme_bw() +
ylab("Geometric mean for the results")
tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Scores)) +
geom_line() +
geom_point() +
theme_bw() +
ylab("Geometric mean for the scores")
# Dixon & Coles csi
0.0065 / 3.5
load("weigth/data/HDA_dc.RData")
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/goodness_of_fit_hc.R', echo=TRUE)
library(dplyr)
library(stringr)
load("weight/data/predictions_mod_0_dc.RData")
load("weight/data/predictions_mod_3_dc.RData")
load("weight/data/HDA_dc.RData")
load("weight/data/first_matches.RData")
first_matches = first_matches %>%
mutate(tmp = 1)
HDA_dc = HDA_dc %>%
left_join(first_matches)
View(HDA_dc)
which(HDA_dc$tmp == 1)
predictions_mod_0_dc[[5]]
matches_to_remove = which(HDA_dc$tmp == 1)
matches_to_remove
predictions_mod_0_dc[[1548]]
predictions_mod_0_dc = predictions_mod_0_dc[[-matches_to_remove]]
predictions_mod_0_dc = predictions_mod_0_dc[[-c(matches_to_remove)]]
predictions_mod_0_dc = predictions_mod_0_dc[-c(matches_to_remove)]
predictions_mod_0_dc[5]
predictions_mod_0_dc[[5]]
matches_to_remove
predictions_mod_0_dc[[1548]]
length(predictions_mod_0_dc)
length(predictions_mod_3_dc)
predictions_mod_0_dc = predictions_mod_3_dc[-matches_to_remove]
predictions_mod_3_dc = predictions_mod_3_dc[-matches_to_remove]
length(predictions_mod_3_dc)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/goodness_of_fit_hc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/goodness_of_fit_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/goodness_of_fit_dc.R', echo=TRUE)
tab_results
lst = list(tmp, prob_mod_0_dc, prob_mod_3_dc)
tab_results = matrix(NA, ncol = 3, nrow = 3)
tab_home_goals = matrix(NA, ncol = 6, nrow = 3)
tab_away_goals = matrix(NA, ncol = 6, nrow = 3)
for(i in 1:length(lst)) {
tab_results[i,] = lst[[i]]$Results
tab_home_goals[i,] = lst[[i]]$Home_Goals
tab_away_goals[i,] = lst[[i]]$Away_Goals
}
rownames(tab_results) = c("Observed", paste("Model", c("0", "3")))
rownames(tab_home_goals) = c("Observed", paste("Model", c("0", "3")))
rownames(tab_away_goals) = c("Observed", paste("Model", c("0", "3")))
colnames(tab_results) = c("Home", "Draw", "Away")
colnames(tab_home_goals) = c(0:4, "5+")
colnames(tab_away_goals) = c(0:4, "5+")
save.image("weight/data/goodness_of_fit_dc.RData")
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/goodness_of_fit_dc.R', echo=TRUE)
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/data/goodness_of_fit_dc.RData")
library(dplyr)
load("/weight/data/goodness_of_fit_dc.RData")
library(dplyr)
load("weight/data/goodness_of_fit_dc.RData")
tab_results
tab_results[,1]
tab_results[1,]
observed = tab_results[1,]
observed
load("weight/data/predictions_mod_0_dc.RData")
library(dplyr)
load("weight/data/goodness_of_fit_dc.RData")
load("weight/data/predictions_mod_0_dc.RData")
observed = tab_results[1,]
for(i in 1:length(predictions_mod_0_dc)) {
results = predictions_mod_0_dc[[i]]$Match %>%
select(-Stoppage_Time_1, -Stoppage_Time_2) %>%
mutate(Result = ifelse(Score_Home > Score_Away, 1,
ifelse(Score_Home == Score_Away, 2,
3)))
}
results
library(dplyr)
load("weight/data/goodness_of_fit_dc.RData")
load("weight/data/predictions_mod_0_dc.RData")
observed = tab_results[1,]
res = tibble()
for(i in 1:length(predictions_mod_0_dc)) {
tmp1 = predictions_mod_0_dc[[i]]$Match %>%
select(-Stoppage_Time_1, -Stoppage_Time_2) %>%
mutate(Result = ifelse(Score_Home > Score_Away, 1,
ifelse(Score_Home == Score_Away, 2,
3)))
res = rbind(res, tmp1)
}
res
load("weight/data/first_matches.RData")
nrow(res)
res = res %>%
left_join(first_matches)
nrow(res)
library(dplyr)
load("weight/data/goodness_of_fit_dc.RData")
load("weight/data/predictions_mod_0_dc.RData")
load("weight/data/first_matches.RData")
observed = tab_results[1,]
res = tibble()
for(i in 1:length(predictions_mod_0_dc)) {
tmp1 = predictions_mod_0_dc[[i]]$Match %>%
select(-Stoppage_Time_1, -Stoppage_Time_2) %>%
mutate(Result = ifelse(Score_Home > Score_Away, 1,
ifelse(Score_Home == Score_Away, 2,
3)))
res = rbind(res, tmp1)
}
res = res %>%
anti_join(first_matches)
nrow(res)
pnk_Result <- function(Result, pH, pD, pA) {
p = c(pH, pD, pA)
p[Result]
}
observed[1]
library(dplyr)
load("weight/data/goodness_of_fit_dc.RData")
load("weight/data/predictions_mod_0_dc.RData")
load("weight/data/first_matches.RData")
pnk_Result <- function(Result, pH, pD, pA) {
p = c(pH, pD, pA)
p[Result]
}
observed = tab_results[1,]
res = tibble()
for(i in 1:length(predictions_mod_0_dc)) {
tmp1 = predictions_mod_0_dc[[i]]$Match %>%
select(-Stoppage_Time_1, -Stoppage_Time_2) %>%
mutate(Result = ifelse(Score_Home > Score_Away, 1,
ifelse(Score_Home == Score_Away, 2,
3)))
res = rbind(res, tmp1)
}
res = res %>%
anti_join(first_matches) %>%
rowwise() %>%
mutate(pnk_Result = pnk_Result(Result, observed[1], observed[2], observed[3]))
res
EnvStats::geoMean(res$pnk_Result)
mean(res$pnk_Result)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/naive.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/naive.R', echo=TRUE)
