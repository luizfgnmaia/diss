home_goals
away_goals
pred_mod_0 <- function(mod_0, home_team, away_team, score_home = 0, score_away = 0, minute = 0, half = 1, end_minute = 45, end_half = 2) {
if(half == 1 & end_half == 1) {
remaining_1st_half = end_minute - minute
} else if(half == 1) { # 1 e 2
remaining_1st_half = 45 - minute
} else if(half == 2) { # 2 e 2
remaining_1st_half = 0
}
if(half == 2 & end_half == 2) {
remaining_2nd_half = end_minute - minute
} else if(end_half == 2) { # 1 e 2
remaining_2nd_half = end_minute
} else if(end_half == 1) { # 1 e 1
remaining_2nd_half = 0
}
remaining = remaining_1st_half + remaining_2nd_half
gamma = mod_0$gamma
alpha_i = mod_0$alpha[home_team]
beta_i = mod_0$beta[home_team]
alpha_j = mod_0$alpha[away_team]
beta_j = mod_0$beta[away_team]
tmp_hg = NULL
tmp_ag = NULL
home_goals = NULL
away_goals = NULL
for(g in 1:21) {
tmp_hg[g] = dpois(g-1, lambda = exp(alpha_i + beta_j + gamma) * remaining/90)
tmp_ag[g] = dpois(g-1, lambda = exp(alpha_j + beta_i) * remaining/90)
}
for(g in (score_home+1):21) {
home_goals[g] = tmp_hg[g-score_home]
}
home_goals[which(is.na(home_goals))] = 0
for(g in (score_away+1):21) {
away_goals[g] = tmp_ag[g-score_away]
}
away_goals[which(is.na(away_goals))] = 0
mat_results = home_goals %*% t(away_goals)
rownames(mat_results) = 0:20
colnames(mat_results) = 0:20
home_win = sum(mat_results[lower.tri(mat_results)])
away_win = sum(mat_results[upper.tri(mat_results)])
draw = 1 - home_win - away_win
winner = c(home_win, draw, away_win)
names(winner) = c(home_team, "Draw", away_team)
freq_scores = NULL
nam = NULL
for(i in 1:21) {
for(j in 1:21) {
freq_scores = c(freq_scores, mat_results[i,j])
nam = c(nam, paste0(rownames(mat_results)[i], "-", rownames(mat_results)[j]))
}
}
names(freq_scores) = nam
freq_scores = sort(freq_scores, decreasing = TRUE)
list("Result" = winner, "Score" = freq_scores)
}
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/data/mod_0_dc.RData")
pred_mod_0(mod_0, home_team = "Flamengo", away_team = "Fluminense", score_home = 3, score_away = 0)
pred_mod_0(mod_0, home_team = "Flamengo", away_team = "Fluminense", score_home = 1, score_away = 0)
pred_mod_0(mod_0, home_team = "Flamengo", away_team = "Fluminense", score_home = 1, score_away = 2)
pred_mod_0(mod_0, home_team = "Flamengo", away_team = "Fluminense", score_home = 1, score_away = 5)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/pred/pred_mod_0_v2.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_0_dc_v2.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/HDA_dc_v2.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/goodness_of_fit_dc_3_v2.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0_v2.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0_v2.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/csi_mod_0_pred_0_v2.R', echo=TRUE)
library(dplyr)
library(ggplot2)
load("data/lst_csi_mod_0_pred_0_v2.RData")
csi = as.numeric(names(lst_csi_mod_0_pred_0))
GeoMean_Results = NULL
GeoMean_Scores = NULL
for(i in 1:length(lst_csi_mod_0_pred_0)) {
GeoMean_Results[i] = lst_csi_mod_0_pred_0[[i]]$GeoMean_Results
GeoMean_Scores[i] = lst_csi_mod_0_pred_0[[i]]$GeoMean_Scores
}
tib_csi = tibble(csi, GeoMean_Results, GeoMean_Scores)
tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Results)) +
geom_line() +
geom_point() +
theme_bw() +
ylab("Geometric mean for the results")
library(latex2exp)
options(OutDec = ",")
p = tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Results)) +
geom_line() +
geom_point() +
theme_bw() +
ylab("Média geométrica") +
xlab(TeX("$\\xi$")) +
scale_x_continuous(breaks = c(0, 0.0005, 0.001, 0.0015, 0.002, 0.0025, 0.003, 0.0035, 0.004)) +
geom_vline(xintercept = 0.0065 / 3.5, col = "red")
p
ggsave(filename = "xi.png",
plot = p, width = 10, height = 5, dpi = 1000)
options(OutDec = ".")
tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Scores)) +
geom_line() +
geom_point() +
theme_bw() +
ylab("Geometric mean for the scores")
tib_csi %>%
arrange(desc(GeoMean_Results))
tib_csi %>%
arrange(desc(GeoMean_Scores))
# Dixon & Coles csi
0.0065 / 3.5
library(dplyr)
library(ggplot2)
load("data/lst_csi_mod_0_pred_0_v2.RData")
csi = as.numeric(names(lst_csi_mod_0_pred_0))
csi
View(lst_csi_mod_0_pred_0)
lst_csi_mod_0_pred_0
names(lst_csi_mod_0_pred_0)
csi = seq(from = 0, to = 0.004, by = 0.0001)
csi
GeoMean_Results = NULL
GeoMean_Scores = NULL
for(i in 1:length(lst_csi_mod_0_pred_0)) {
GeoMean_Results[i] = lst_csi_mod_0_pred_0[[i]]$GeoMean_Results
GeoMean_Scores[i] = lst_csi_mod_0_pred_0[[i]]$GeoMean_Scores
}
tib_csi = tibble(csi, GeoMean_Results, GeoMean_Scores)
tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Results)) +
geom_line() +
geom_point() +
theme_bw() +
ylab("Geometric mean for the results")
library(latex2exp)
options(OutDec = ",")
p = tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Results)) +
geom_line() +
geom_point() +
theme_bw() +
ylab("Média geométrica") +
xlab(TeX("$\\xi$")) +
scale_x_continuous(breaks = c(0, 0.0005, 0.001, 0.0015, 0.002, 0.0025, 0.003, 0.0035, 0.004)) +
geom_vline(xintercept = 0.0065 / 3.5, col = "red")
p
ggsave(filename = "xi.png",
plot = p, width = 10, height = 5, dpi = 1000)
options(OutDec = ".")
tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Scores)) +
geom_line() +
geom_point() +
theme_bw() +
ylab("Geometric mean for the scores")
tib_csi %>%
arrange(desc(GeoMean_Results))
tib_csi %>%
arrange(desc(GeoMean_Scores))
# Dixon & Coles csi
0.0065 / 3.5
p = tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Scores)) +
geom_line() +
geom_point() +
theme_bw() +
ylab("Média geométrica") +
xlab(TeX("$\\xi$")) +
scale_x_continuous(breaks = c(0, 0.0005, 0.001, 0.0015, 0.002, 0.0025, 0.003, 0.0035, 0.004)) +
geom_vline(xintercept = 0.0065 / 3.5, col = "red")
p
ggsave(filename = "xi.png",
plot = p, width = 10, height = 5, dpi = 1000)
options(OutDec = ".")
library(dplyr)
library(ggplot2)
load("data/lst_csi_mod_0_pred_0_v2.RData")
csi = seq(from = 0, to = 0.004, by = 0.0001)
GeoMean_Results = NULL
GeoMean_Scores = NULL
for(i in 1:length(lst_csi_mod_0_pred_0)) {
GeoMean_Results[i] = lst_csi_mod_0_pred_0[[i]]$GeoMean_Results
GeoMean_Scores[i] = lst_csi_mod_0_pred_0[[i]]$GeoMean_Scores
}
tib_csi = tibble(csi, GeoMean_Results, GeoMean_Scores)
tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Results)) +
geom_line() +
geom_point() +
theme_bw() +
ylab("Geometric mean for the results")
library(latex2exp)
options(OutDec = ",")
p = tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Results)) +
geom_line() +
geom_point() +
theme_bw() +
ylab("Média geométrica") +
xlab(TeX("$\\xi$")) +
scale_x_continuous(breaks = c(0, 0.0005, 0.001, 0.0015, 0.002, 0.0025, 0.003, 0.0035, 0.004)) +
geom_vline(xintercept = 0.0065 / 3.5, col = "red")
p
ggsave(filename = "xi.png",
plot = p, width = 10, height = 5, dpi = 1000)
options(OutDec = ".")
p = tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Scores)) +
geom_line() +
geom_point() +
theme_bw() +
ylab("Média geométrica") +
xlab(TeX("$\\xi$")) +
scale_x_continuous(breaks = c(0, 0.0005, 0.001, 0.0015, 0.002, 0.0025, 0.003, 0.0035, 0.004)) +
geom_vline(xintercept = 0.0065 / 3.5, col = "red")
p
ggsave(filename = "xi2.png",
plot = p, width = 10, height = 5, dpi = 1000)
options(OutDec = ".")
tib_csi %>%
arrange(desc(GeoMean_Results))
tib_csi %>%
arrange(desc(GeoMean_Scores))
# Dixon & Coles csi
0.0065 / 3.5
library(dplyr)
library(ggplot2)
load("data/lst_csi_mod_0_pred_0_v2.RData")
csi = seq(from = 0, to = 0.004, by = 0.0001)
GeoMean_Results = NULL
GeoMean_Scores = NULL
for(i in 1:length(lst_csi_mod_0_pred_0)) {
GeoMean_Results[i] = lst_csi_mod_0_pred_0[[i]]$GeoMean_Results
GeoMean_Scores[i] = lst_csi_mod_0_pred_0[[i]]$GeoMean_Scores
}
tib_csi = tibble(csi, GeoMean_Results, GeoMean_Scores)
tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Results)) +
geom_line() +
geom_point() +
theme_bw() +
ylab("Geometric mean for the results")
library(latex2exp)
options(OutDec = ",")
p = tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Results)) +
geom_line() +
geom_point() +
theme_bw() +
ylab("Média geométrica") +
xlab(TeX("$\\xi$")) +
scale_x_continuous(breaks = c(0, 0.0005, 0.001, 0.0015, 0.002, 0.0025, 0.003, 0.0035, 0.004)) +
geom_vline(xintercept = 0.0065 / 3.5, col = "red")
p
ggsave(filename = "xi.png",
plot = p, width = 10, height = 5, dpi = 1000)
p = tib_csi %>%
ggplot(aes(x = csi, y = GeoMean_Scores)) +
geom_line() +
geom_point() +
theme_bw() +
ylab("Média geométrica") +
xlab(TeX("$\\xi$")) +
scale_x_continuous(breaks = c(0, 0.0005, 0.001, 0.0015, 0.002, 0.0025, 0.003, 0.0035, 0.004)) +
geom_vline(xintercept = 0.0065 / 3.5, col = "red")
p
ggsave(filename = "xi2.png",
plot = p, width = 10, height = 5, dpi = 1000)
tib_csi %>%
arrange(desc(GeoMean_Results))
tib_csi %>%
arrange(desc(GeoMean_Scores))
# Dixon & Coles csi
0.0065 / 3.5
dv = 1.1745
dv*(log(2) - log(1))
#dv = 1.1745
dv = 0.1608
dv*(log(2) - log(1))
#dv = 1.1745
dv = 0.1608
dv*(log(2) - log(1))
exp(dv*(log(2) - log(1)))
exp(dv*(log(10) - log(1)))
dv = 1.1745
exp(dv*(log(2) - log(1)))
exp(dv*(log(10) - log(1)))
exp(log(dv)*(log(2) - log(1)))
exp(log(dv)*(log(10) - log(1)))
exp(3*2)
exp(goal*1)
goal = -0.0984
exp(goal*1)
exp(goal*2)
exp(goal)^2
goal = -0.0984
exp(goal*2)
exp(goal)^2
valor^(log(2)-log(1))
valor = 1.1745
valor^(log(2)-log(1))
valor^(log(10-log(1))
valor^(log(10-log(1))
valor^(log(10)-log(1))
valor = 0.1608
exp(valor*(log(2)-log(1)))
exp(valor*(log(10)-log(1)))
valor = log(1.1745)
valor
exp(valor*(log(2)-log(1)))
exp(valor*(log(10)-log(1)))
exp(3*2)
2*exp(3)
exp(3*2)
exp(log(3)*2)
3^2
# antigo
valor = log(1.1745)
exp(valor*(log(2)-log(1)))
exp(valor*(log(10)-log(1)))
# novo
valor = 1.1745
valor^(log(2)-log(1))
valor^(log(10)-log(1))
# antigo
valor = log(1.1745)
exp(valor*(log(2)-log(1)))
load("scrape/data/reds.RData")
library(dplyr)
load("scrape/data/reds.RData")
reds %>%
filter(Season == 2020) %>%
count(Team)
49/380
53/380
0.9*18
0.7*22
0.5*26
0.3*30
95/200
0*9*95/200 # por stamina
0.9*95/200 # por stamina
(0.9*95)/200 # por stamina
per_sta = 0.9*95/200 # por stamina
per_min = per_sta/5
per_min
24*60*per_min
per_day = 24*60*per_min
per_day
# novo
valor = 1.1745
valor^(log(2)-log(1))
valor^(log(10)-log(1))
1.1745^log(2)
load("weight/data/pred_fla_inter.RData")
library(dplyr)
library(tidyr)
library(ggplot2)
library(future.apply)
wide = tibble()
for(i in 1:91) {
wide = rbind(wide, pred[[i]]$Result)
}
names(wide) = c("Flamengo", "Empate", "Internacional")
wide$Minuto = 0:90
long = wide %>%
pivot_longer(cols = c("Flamengo", "Empate", "Internacional"),
names_to = "Resultado",
values_to = "Probabilidade")
p = long %>%
mutate(Resultado = factor(Resultado, levels = c("Flamengo", "Empate", "Internacional"))) %>%
ggplot(aes(x = Minuto, y = Probabilidade, col = Resultado)) +
geom_vline(xintercept = 11, linetype = "dashed") +
geom_vline(xintercept = 28, linetype = "dashed") +
geom_vline(xintercept = 17+45, linetype = "dashed") +
geom_vline(xintercept = 3+45, linetype = "dashed", col = "red") +
geom_line(size = 1) +
theme_bw() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90))
p
?geom_line
p = long %>%
mutate(Resultado = factor(Resultado, levels = c("Flamengo", "Empate", "Internacional"))) %>%
ggplot(aes(x = Minuto, y = Probabilidade, col = Resultado)) +
geom_vline(xintercept = 11, linetype = "dashed") +
geom_vline(xintercept = 28, linetype = "dashed") +
geom_vline(xintercept = 17+45, linetype = "dashed") +
geom_vline(xintercept = 3+45, linetype = "dashed", col = "red") +
geom_line(size = 1, color = c("red", "green", "gray")) +
theme_bw() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90))
p
p = long %>%
mutate(Resultado = factor(Resultado, levels = c("Flamengo", "Empate", "Internacional"))) %>%
ggplot(aes(x = Minuto, y = Probabilidade, col = Resultado)) +
geom_vline(xintercept = 11, linetype = "dashed") +
geom_vline(xintercept = 28, linetype = "dashed") +
geom_vline(xintercept = 17+45, linetype = "dashed") +
geom_vline(xintercept = 3+45, linetype = "dashed", col = "red") +
geom_line(size = 1) +
theme_bw() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90)) +
scale_color_manual()
p
long %>%
mutate(Resultado = factor(Resultado, levels = c("Flamengo", "Empate", "Internacional"))) %>%
ggplot(aes(x = Minuto, y = Probabilidade, col = Resultado)) +
geom_vline(xintercept = 11, linetype = "dashed") +
geom_vline(xintercept = 28, linetype = "dashed") +
geom_vline(xintercept = 17+45, linetype = "dashed") +
geom_vline(xintercept = 3+45, linetype = "dashed", col = "red") +
geom_line(size = 1) +
theme_bw() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90))
p = long %>%
mutate(Resultado = factor(Resultado, levels = c("Flamengo", "Empate", "Internacional"))) %>%
ggplot(aes(x = Minuto, y = Probabilidade, col = Resultado)) +
geom_vline(xintercept = 11, linetype = "dashed") +
geom_vline(xintercept = 28, linetype = "dashed") +
geom_vline(xintercept = 17+45, linetype = "dashed") +
geom_vline(xintercept = 3+45, linetype = "dashed", col = "red") +
geom_line(size = 1) +
theme_bw() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90)) +
scale_color_manual("#F8766D", "#7CAE00", "gray")
p
p = long %>%
mutate(Resultado = factor(Resultado, levels = c("Flamengo", "Empate", "Internacional"))) %>%
ggplot(aes(x = Minuto, y = Probabilidade, col = Resultado)) +
geom_vline(xintercept = 11, linetype = "dashed") +
geom_vline(xintercept = 28, linetype = "dashed") +
geom_vline(xintercept = 17+45, linetype = "dashed") +
geom_vline(xintercept = 3+45, linetype = "dashed", col = "red") +
geom_line(size = 1) +
theme_bw() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90)) +
scale_color_manual(c("#F8766D", "#7CAE00", "gray"))
p
p = long %>%
mutate(Resultado = factor(Resultado, levels = c("Flamengo", "Empate", "Internacional"))) %>%
ggplot(aes(x = Minuto, y = Probabilidade, col = Resultado)) +
geom_vline(xintercept = 11, linetype = "dashed") +
geom_vline(xintercept = 28, linetype = "dashed") +
geom_vline(xintercept = 17+45, linetype = "dashed") +
geom_vline(xintercept = 3+45, linetype = "dashed", col = "red") +
geom_line(size = 1) +
theme_bw() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90)) +
scale_color_manual(values = c("#F8766D", "#7CAE00", "gray"))
p
p = long %>%
mutate(Resultado = factor(Resultado, levels = c("Flamengo", "Empate", "Internacional"))) %>%
ggplot(aes(x = Minuto, y = Probabilidade, col = Resultado)) +
geom_vline(xintercept = 11, linetype = "dashed") +
geom_vline(xintercept = 28, linetype = "dashed") +
geom_vline(xintercept = 17+45, linetype = "dashed") +
geom_vline(xintercept = 3+45, linetype = "dashed", col = "red") +
geom_line(size = 1) +
theme_bw() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90)) +
scale_color_manual(values = c("#F8766D", "#7CAE00", "gray50"))
p
p = long %>%
mutate(Resultado = factor(Resultado, levels = c("Flamengo", "Empate", "Internacional"))) %>%
ggplot(aes(x = Minuto, y = Probabilidade, col = Resultado)) +
geom_vline(xintercept = 11, linetype = "dashed") +
geom_vline(xintercept = 28, linetype = "dashed") +
geom_vline(xintercept = 17+45, linetype = "dashed") +
geom_vline(xintercept = 3+45, linetype = "dashed", col = "red") +
geom_line(size = 1) +
theme_bw() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90)) +
scale_color_manual(values = c("#F8766D", "#7CAE00", "gray70"))
p
p = long %>%
mutate(Resultado = factor(Resultado, levels = c("Flamengo", "Empate", "Internacional"))) %>%
ggplot(aes(x = Minuto, y = Probabilidade, col = Resultado)) +
geom_vline(xintercept = 11, linetype = "dashed") +
geom_vline(xintercept = 28, linetype = "dashed") +
geom_vline(xintercept = 17+45, linetype = "dashed") +
geom_vline(xintercept = 3+45, linetype = "dashed", col = "red") +
geom_line(size = 1) +
theme_bw() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90)) +
scale_color_manual(values = c("#F8766D", "#7CAE00", "gray60"))
p
p = long %>%
mutate(Resultado = factor(Resultado, levels = c("Flamengo", "Empate", "Internacional"))) %>%
ggplot(aes(x = Minuto, y = Probabilidade, col = Resultado)) +
geom_vline(xintercept = 11, linetype = "dashed") +
geom_vline(xintercept = 28, linetype = "dashed") +
geom_vline(xintercept = 17+45, linetype = "dashed") +
geom_vline(xintercept = 3+45, linetype = "dashed", col = "red") +
geom_line(size = 1) +
theme_bw() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90)) +
scale_color_manual(values = c("#F8766D", "#7CAE00", "gray55"))
p
ggsave(filename = paste0("weight/plots/fla_inter.png"),
plot = p, width = 10, height = 5, dpi = 1000)
# novo
valor = 1.1745
valor^(log(2))
?log
# novo
valor = 1.1745
valor^(log(2))
valor^(log(10))
