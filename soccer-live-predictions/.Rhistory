tmp_x2[(mandante$Minute[m]+1):(45+U2[k]+1)] = tmp_x2[mandante$Minute[m]] + mandante %>% filter(Minute == mandante$Minute[m], Stoppage_Time == mandante$Stoppage_Time[m]) %>% nrow()
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y2[(visitante$Minute[m]+1):(45+U2[k]+1)] = tmp_y2[visitante$Minute[m]] + visitante %>% filter(Minute == mandante$Minute[m], Stoppage_Time == mandante$Stoppage_Time[m]) %>% nrow()
}
}
x2s[[k]] = tmp_x2
y2s[[k]] = tmp_y2
} else {
x2s[[k]] = rep(0, (45+U2[k]+1))
y2s[[k]] = rep(0, (45+U2[k]+1))
}
}
for(k in 1:N) {
x2s[[k]] = x2s[[k]] + x1s[[k]][length(x1s[[k]])]
y2s[[k]] = y2s[[k]] + y1s[[k]][length(y1s[[k]])]
}
I1s = list(); I2s = list()
for(k in 1:N) {
I1s[[k]] = c(0, t1s[[k]], 45+U1[k]) %>%
unique() %>%
sort()
I2s[[k]] = c(0, t2s[[k]], 45+U2[k]) %>%
unique() %>%
sort()
}
# I1r e I2r
I1r = list(); I2r = list()
source('~/.active-rstudio-document', encoding = 'UTF-8')
library(dplyr)
load("scrape/data/results.RData")
load("scrape/data/goals.RData")
load("scrape/data/reds.RData")
results = results %>%
filter(Season == 2018)
goals = goals %>%
filter(Season == 2018)
reds = reds %>%
filter(Season == 2018)
#### Resultados
results$ind = 1:nrow(results)
copy_results = results %>%
select(Season, Match, ind)
# U1, U2
U1 = results$Stoppage_Time_1
U2 = results$Stoppage_Time_2
# times, i, j, N, n
times = tibble(Id = 1:length(unique(results$Home_Team)), Time = sort(unique(results$Home_Team)))
tmp1 = times %>%
rename(Home_Team = Time,
i = Id)
tmp2 = times %>%
rename(Away_Team = Time,
j = Id)
results = results %>%
inner_join(tmp1) %>%
inner_join(tmp2) %>%
rename(x = Score_Home,
y = Score_Away) %>%
mutate(k = 1:nrow(.)) %>%
select(k, i, j, x, y)
i = results$i; j = results$j; x = results$x; y = results$y
N = nrow(results); n = nrow(times)
#### Gols
goals = goals %>%
mutate(J = ifelse(Team == 2, 1, 0))
goals$Stoppage_Time[is.na(goals$Stoppage_Time)] = 0
goals$Minute = goals$Minute + goals$Stoppage_Time
goals = goals %>%
left_join(copy_results)
# t1, t2, J1, J2, x1, x2, y1, y2, m1, m2, I1, I2
gols_primeiro_tempo = goals %>%
filter(Half == 1)
gols_segundo_tempo = goals %>%
filter(Half == 2)
t1 = list(); t2 = list(); J1 = list(); J2 = list()
x1 = list(); x2 = list(); y1 = list(); y2 = list()
m1 = NULL; m2 = NULL
for(k in 1:N) {
primeiro_tempo = gols_primeiro_tempo %>%
filter(ind == k)
segundo_tempo = gols_segundo_tempo %>%
filter(ind == k)
t1[[k]] = primeiro_tempo$Minute
t2[[k]] = segundo_tempo$Minute
J1[[k]] = primeiro_tempo$J
J2[[k]] = segundo_tempo$J
m1[k] = nrow(primeiro_tempo)
m2[k] = nrow(segundo_tempo)
if(nrow(primeiro_tempo) > 0) {
tmp_x1 = rep(0, 45+U1[k]+1) # primeira entrada é o minuto 0
tmp_y1 = rep(0, 45+U1[k]+1)
mandante = primeiro_tempo %>%
filter(J == 0)
visitante = primeiro_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x1[(mandante$Minute[m]+1):(45+U1[k]+1)] = tmp_x1[mandante$Minute[m]]+1
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y1[(visitante$Minute[m]+1):(45+U1[k]+1)] = tmp_y1[visitante$Minute[m]]+1
}
}
x1[[k]] = tmp_x1
y1[[k]] = tmp_y1
} else {
x1[[k]] = rep(0, (45+U1[k]+1))
y1[[k]] = rep(0, (45+U1[k]+1))
}
if(nrow(segundo_tempo) > 0) {
tmp_x2 = rep(0, 45+U2[k]+1) # primeira entrada é o minuto 45
tmp_y2 = rep(0, 45+U2[k]+1)
mandante = segundo_tempo %>%
filter(J == 0)
visitante = segundo_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x2[(mandante$Minute[m]+1):(45+U2[k]+1)] = tmp_x2[mandante$Minute[m]]+1
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y2[(visitante$Minute[m]+1):(45+U2[k]+1)] = tmp_y2[visitante$Minute[m]]+1
}
}
x2[[k]] = tmp_x2
y2[[k]] = tmp_y2
} else {
x2[[k]] = rep(0, (45+U2[k]+1))
y2[[k]] = rep(0, (45+U2[k]+1))
}
}
for(k in 1:N) {
x2[[k]] = x2[[k]] + x1[[k]][length(x1[[k]])]
y2[[k]] = y2[[k]] + y1[[k]][length(y1[[k]])]
}
I1 = list(); I2 = list()
for(k in 1:N) {
I1[[k]] = c(0, t1[[k]], 45+U1[k]) %>%
unique() %>%
sort()
I2[[k]] = c(0, t2[[k]], 45+U2[k]) %>%
unique() %>%
sort()
}
#### Reds
reds = reds %>%
mutate(J = ifelse(Team == 2, 1, 0))
reds$Stoppage_Time[is.na(reds$Stoppage_Time)] = 0
reds$Minute = reds$Minute + reds$Stoppage_Time
reds = reds %>%
inner_join(copy_results)
# t1s, t2s, J1s, J2s, x1s, x2s, y1s, y2s, m1s, m2s, I1s, I2s
reds_primeiro_tempo = reds %>%
filter(Half == 1)
reds_segundo_tempo = reds %>%
filter(Half == 2)
t1s = list(); t2s = list(); J1s = list(); J2s = list()
x1s = list(); x2s = list(); y1s = list(); y2s = list()
m1s = NULL; m2s = NULL
for(k in 1:N) {
primeiro_tempo = reds_primeiro_tempo %>%
filter(ind == k)
segundo_tempo = reds_segundo_tempo %>%
filter(ind == k)
t1s[[k]] = primeiro_tempo$Minute
t2s[[k]] = segundo_tempo$Minute
J1s[[k]] = primeiro_tempo$J
J2s[[k]] = segundo_tempo$J
m1s[k] = nrow(primeiro_tempo)
m2s[k] = nrow(segundo_tempo)
if(nrow(primeiro_tempo) > 0) {
tmp_x1 = rep(0, 45+U1[k]+1) # primeira entrada é o minuto 0
tmp_y1 = rep(0, 45+U1[k]+1)
mandante = primeiro_tempo %>%
filter(J == 0)
visitante = primeiro_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x1[(mandante$Minute[m]+1):(45+U1[k]+1)] = tmp_x1[mandante$Minute[m]] + mandante %>% filter(Minute == mandante$Minute[m], Stoppage_Time == mandante$Stoppage_Time[m]) %>% nrow()
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y1[(visitante$Minute[m]+1):(45+U1[k]+1)] = tmp_y1[visitante$Minute[m]] + visitante %>% filter(Minute == mandante$Minute[m], Stoppage_Time == mandante$Stoppage_Time[m]) %>% nrow()
}
}
x1s[[k]] = tmp_x1
y1s[[k]] = tmp_y1
} else {
x1s[[k]] = rep(0, (45+U1[k]+1))
y1s[[k]] = rep(0, (45+U1[k]+1))
}
if(nrow(segundo_tempo) > 0) {
tmp_x2 = rep(0, 45+U2[k]+1) # primeira entrada é o minuto 45
tmp_y2 = rep(0, 45+U2[k]+1)
mandante = segundo_tempo %>%
filter(J == 0)
visitante = segundo_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x2[(mandante$Minute[m]+1):(45+U2[k]+1)] = tmp_x2[mandante$Minute[m]] + mandante %>% filter(Minute == mandante$Minute[m], Stoppage_Time == mandante$Stoppage_Time[m]) %>% nrow()
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y2[(visitante$Minute[m]+1):(45+U2[k]+1)] = tmp_y2[visitante$Minute[m]] + visitante %>% filter(Minute == mandante$Minute[m], Stoppage_Time == mandante$Stoppage_Time[m]) %>% nrow()
}
}
x2s[[k]] = tmp_x2
y2s[[k]] = tmp_y2
} else {
x2s[[k]] = rep(0, (45+U2[k]+1))
y2s[[k]] = rep(0, (45+U2[k]+1))
}
}
for(k in 1:N) {
x2s[[k]] = x2s[[k]] + x1s[[k]][length(x1s[[k]])]
y2s[[k]] = y2s[[k]] + y1s[[k]][length(y1s[[k]])]
}
I1s = list(); I2s = list()
for(k in 1:N) {
I1s[[k]] = c(0, t1s[[k]], 45+U1[k]) %>%
unique() %>%
sort()
I2s[[k]] = c(0, t2s[[k]], 45+U2[k]) %>%
unique() %>%
sort()
}
# I1r e I2r
I1r = list(); I2r = list()
for(k in 1:N) {
I1r[[k]] = c(I1[[k]], I1s[[k]]) %>%
unique() %>%
sort()
I2r[[k]] = c(I2[[k]], I2s[[k]]) %>%
unique() %>%
sort()
}
# H1, H2, A1, A2
H1 = list(); H2 = list(); A1 = list(); A2 = list()
for(k in 1:N) {
if(length(t1[[k]]) > 0) {
if(t1[[k]][length(t1[[k]])] == (45+U1[k])) {
H1[[k]] = c(as.integer(!J1[[k]]))
A1[[k]] = c(J1[[k]])
} else {
H1[[k]] = c(as.integer(!J1[[k]]), 0)
A1[[k]] = c(J1[[k]], 0)
}
} else {
H1[[k]] = 0
A1[[k]] = 0
}
if(length(t2[[k]]) > 0) {
if(t2[[k]][length(t2[[k]])] == (45+U2[k])) {
H2[[k]] = c(as.integer(!J2[[k]]))
A2[[k]] = c(J2[[k]])
} else {
H2[[k]] = c(as.integer(!J2[[k]]), 0)
A2[[k]] = c(J2[[k]], 0)
}
} else {
H2[[k]] = 0
A2[[k]] = 0
}
}
H1 = unlist(H1)
H2 = unlist(H2)
A1 = unlist(A1)
A2 = unlist(A2)
# H1r, H2r, A1r, A2r
H1r = list(); H2r = list(); A1r = list(); A2r = list()
for(k in 1:N) {
tmp_H1 = NULL; tmp_A1 = NULL; tmp_H2 = NULL; tmp_A2 = NULL
for(l in 2:(length(I1r[[k]]))) {
tmp_H1[l-1] = x1[[k]][I1r[[k]][l]+1] - x1[[k]][I1r[[k]][l]]
tmp_A1[l-1] = y1[[k]][I1r[[k]][l]+1] - y1[[k]][I1r[[k]][l]]
}
for(l in 2:(length(I2r[[k]]))) {
tmp_H2[l-1] = x2[[k]][I2r[[k]][l]+1] - x2[[k]][I2r[[k]][l]]
tmp_A2[l-1] = y2[[k]][I2r[[k]][l]+1] - y2[[k]][I2r[[k]][l]]
}
H1r[[k]] = tmp_H1
A1r[[k]] = tmp_A1
H2r[[k]] = tmp_H2
A2r[[k]] = tmp_A2
}
H1r = unlist(H1r)
H2r = unlist(H2r)
A1r = unlist(A1r)
A2r = unlist(A2r)
# H1s, H2s, A1s, A2s
H1s = list(); H2s = list(); A1s = list(); A2s = list()
for(k in 1:N) {
tmp_H1s = NULL; tmp_A1s = NULL; tmp_H2s = NULL; tmp_A2s = NULL
for(l in 2:(length(I1s[[k]]))) {
tmp_H1s[l-1] = x1s[[k]][I1s[[k]][l]+1] - x1s[[k]][I1s[[k]][l]]
tmp_A1s[l-1] = y1s[[k]][I1s[[k]][l]+1] - y1s[[k]][I1s[[k]][l]]
}
for(l in 2:(length(I2s[[k]]))) {
tmp_H2s[l-1] = x2s[[k]][I2s[[k]][l]+1] - x2s[[k]][I2s[[k]][l]]
tmp_A2s[l-1] = y2s[[k]][I2s[[k]][l]+1] - y2s[[k]][I2s[[k]][l]]
}
H1s[[k]] = tmp_H1s
A1s[[k]] = tmp_A1s
H2s[[k]] = tmp_H2s
A2s[[k]] = tmp_A2s
}
A1s[[119]]
A2s[[119]]
H2s[[119]]
t2s[[119]]
I2s[[119]]
I2r[[119]]
I2[[119]]
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input.R', encoding = 'UTF-8')
max(H1r)
max(A1s)
max(A2s)
A1s
H1s
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input.R', encoding = 'UTF-8')
max(A2s)
max(A1s)
max(H1s)
max(H2s)
max(H2s)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input.R', encoding = 'UTF-8')
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input.R', encoding = 'UTF-8')
max(A2s)
max(H2s)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input_mod_r2.R', echo=TRUE)
M1_lambda
colnames(M1_lambda)
x_minus_y = M1_lambda[, "x"] - M1_lambda[, "y"]
x_minus_y
xs_minus_ys = M1_lambda[, "xs"] - M1_lambda[, "ys"]
xs_minus_ys
colnames(M1_lambda)
M1_lambda = M1_lambda[,-42:49]
M1_lambda = M1_lambda[,-c(42:49)]
colnames(M1_lambda)
load("2020/data/input.RData")
load("2020/data/input_mod_r1.RData")
x_minus_y = M1_lambda[, "x"] - M1_lambda[, "y"]
xs_minus_ys = M1_lambda[, "xs"] - M1_lambda[, "ys"]
colnames(M1_lambda)
M1_lambda = M1_lambda[,-43:50]
load("2020/data/input.RData")
load("2020/data/input_mod_r1.RData")
x_minus_y = M1_lambda[, "x"] - M1_lambda[, "y"]
xs_minus_ys = M1_lambda[, "xs"] - M1_lambda[, "ys"]
M1_lambda = M1_lambda[,-c(43:50)]
M1_lambda
colnames(M1_lambda)
zero_1 = rep(0, L1)
zero_2 = rep(0, L2)
M1_lambda = cbind(M1_lambda, x_minus_y, zero_1, xs_minus_ys, zero_1)
load("2020/data/input.RData")
load("2020/data/input_mod_r1.RData")
zero_1 = rep(0, L1)
zero_2 = rep(0, L2)
x_minus_y = M1_lambda[, "x"] - M1_lambda[, "y"]
ys_minus_xs = M1_lambda[, "ys"] - M1_lambda[, "xs"]
M1_lambda = M1_lambda[,-c(43:50)]
M1_lambda = cbind(M1_lambda, x_minus_y, zero_1, xs_minus_ys, zero_1)
colnames(M1_lambda)[43:47] = c("x-y", "0", "ys-ss", "0")
load("2020/data/input.RData")
load("2020/data/input_mod_r1.RData")
zero_1 = rep(0, L1)
zero_2 = rep(0, L2)
x_minus_y = M1_lambda[, "x"] - M1_lambda[, "y"]
ys_minus_xs = M1_lambda[, "ys"] - M1_lambda[, "xs"]
M1_lambda = M1_lambda[,-c(43:50)]
M1_lambda = cbind(M1_lambda, x_minus_y, zero_1, ys_minus_xs, zero_1)
colnames(M1_lambda)[43:47] = c("x-y", "0", "ys-xs", "0")
colnames(M1_lambda)
colnames(M1_lambda)[43:46] = c("x-y", "0", "ys-xs", "0")
View(M1_lambda)
load("2020/data/input.RData")
load("2020/data/input_mod_r1.RData")
zero_1 = rep(0, L1)
zero_2 = rep(0, L2)
x_minus_y = M1_lambda[, "x"] - M1_lambda[, "y"]
ys_minus_xs = M1_lambda[, "ys"] - M1_lambda[, "xs"]
M1_lambda = M1_lambda[,-c(43:50)]
M1_lambda = cbind(M1_lambda, x_minus_y, zero_1, ys_minus_xs, zero_1)
colnames(M1_lambda)[43:46] = c("x-y", "0", "ys-xs", "0")
y_minus_x = M1_mu[, "y"] - M1_mu[, "x"]
xs_minus_ys = M1_mu[, "xs"] - M1_mu[, "ys"]
M1_mu = M1_mu[,-c(43:50)]
M1_mu = cbind(M1_mu, zero_1, y_minus_x, zero_1, xs_minus_ys)
colnames(M1_mu)[43:46] = c("0", "y-x", "0", "xs-ys")
x_minus_y = M2_lambda[, "x"] - M2_lambda[, "y"]
ys_minus_xs = M2_lambda[, "ys"] - M2_lambda[, "xs"]
M1_lambda = M2_lambda[,-c(43:50)]
M1_lambda = cbind(M2_lambda, x_minus_y, zero_2, ys_minus_xs, zero_2)
colnames(M2_lambda)[43:46] = c("x-y", "0", "ys-xs", "0")
y_minus_x = M2_mu[, "y"] - M2_mu[, "x"]
xs_minus_ys = M2_mu[, "xs"] - M2_mu[, "ys"]
M1_mu = M2_mu[,-c(43:50)]
M1_mu = cbind(M2_mu, zero_2, y_minus_x, zero_2, xs_minus_ys)
colnames(M2_mu)[43:46] = c("0", "y-x", "0", "xs-ys")
load("2020/data/input.RData")
load("2020/data/input_mod_r1.RData")
zero_1 = rep(0, L1)
zero_2 = rep(0, L2)
x_minus_y = M1_lambda[, "x"] - M1_lambda[, "y"]
ys_minus_xs = M1_lambda[, "ys"] - M1_lambda[, "xs"]
M1_lambda = M1_lambda[,-c(43:50)]
M1_lambda = cbind(M1_lambda, x_minus_y, zero_1, ys_minus_xs, zero_1)
colnames(M1_lambda)[43:46] = c("x-y", "0", "ys-xs", "0")
y_minus_x = M1_mu[, "y"] - M1_mu[, "x"]
xs_minus_ys = M1_mu[, "xs"] - M1_mu[, "ys"]
M1_mu = M1_mu[,-c(43:50)]
M1_mu = cbind(M1_mu, zero_1, y_minus_x, zero_1, xs_minus_ys)
colnames(M1_mu)[43:46] = c("0", "y-x", "0", "xs-ys")
x_minus_y = M2_lambda[, "x"] - M2_lambda[, "y"]
ys_minus_xs = M2_lambda[, "ys"] - M2_lambda[, "xs"]
M2_lambda = M2_lambda[,-c(43:50)]
M2_lambda = cbind(M2_lambda, x_minus_y, zero_2, ys_minus_xs, zero_2)
colnames(M2_lambda)[43:46] = c("x-y", "0", "ys-xs", "0")
y_minus_x = M2_mu[, "y"] - M2_mu[, "x"]
xs_minus_ys = M2_mu[, "xs"] - M2_mu[, "ys"]
M2_mu = M2_mu[,-c(43:50)]
M2_mu = cbind(M2_mu, zero_2, y_minus_x, zero_2, xs_minus_ys)
colnames(M2_mu)[43:46] = c("0", "y-x", "0", "xs-ys")
View(M1_mu)
View(M2_mu)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_r1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_r1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input_mod_r2.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_r2.R', echo=TRUE)
View(mod_r2)
mod_r2
options(knitr.kable.NA = "–")
library(dplyr)
library(knitr)
load("data/input.RData")
load("data/mod_r2.RData")
alphas_betas = tibble(Team = times$Time,
alpha = exp(mod_r$alpha),
beta = exp(mod_r$beta))
alphas_betas = tibble(Team = times$Time,
alpha = exp(mod_r1$alpha),
beta = exp(mod_r1$beta))
options(knitr.kable.NA = "–")
library(dplyr)
library(knitr)
load("data/input.RData")
load("data/mod_r22.RData")
options(knitr.kable.NA = "–")
library(dplyr)
library(knitr)
load("data/input.RData")
load("data/mod_r2.RData")
alphas_betas = tibble(Team = times$Time,
alpha = exp(mod_r2$alpha),
beta = exp(mod_r2$beta))
kable(alphas_betas, digits = 4, caption = "Alphas and betas",
col.names = c("Team", "$\\alpha$", "$\\beta$"))
mod_r2$omega
Parameter = c("$\\gamma_h$", "$\\tau$", "$\\omega_{\\lambda (x-y)}$",
"$\\omega_{\\mu_(y-x)}$", "$\\omega_{\\lambda (y^*-x^*)}$",
"$\\omega_{\\mu_(x^*-y^*)}$")
goals = tibble(Parameter,
Estimative = c(exp(mod_r2$gamma), exp(mod_r2$tau), mod_r2$omega))
kable(goals, digits = 4, caption = "Goal rate parameters")
Parameter = c("$A_\\lambda$", "$A_\\mu$")
reds = tibble(Parameter, Estimative = exp(c(mod_r2$a)))
kable(reds, digits = 8, caption = "Red card rate parameters")
Parameter = c("$\\eta_1$", "$\\eta_2$", "$\\phi_1$", "$\\phi_2$",
"$\\rho_1$", "$\\rho_2$", "$\\kappa$")
st = tibble(Parameter,
Estimative = c(mod_r2$eta, mod_r2$phi, mod_r2$rho, mod_r2$kappa))
kable(st, digits = 4, caption = "Stoppage time parameters")
options(knitr.kable.NA = "–")
library(dplyr)
library(knitr)
load("data/input.RData")
load("data/mod_r1.RData")
alphas_betas = tibble(Team = times$Time,
alpha = exp(mod_r1$alpha),
beta = exp(mod_r1$beta))
kable(alphas_betas, digits = 4, caption = "Alphas and betas",
col.names = c("Team", "$\\alpha$", "$\\beta$"))
Parameter = c("$\\gamma_h$", "$\\tau$", "$\\omega_{\\lambda x}$",
"$\\omega_{\\lambda y}$", "$\\omega_{\\mu x}$",
"$\\omega_{\\mu y}$", "$\\omega_{\\lambda x^*}$",
"$\\omega_{\\lambda y^*}$", "$\\omega_{\\mu x^*}$",
"$\\omega_{\\mu y^*}$")
goals = tibble(Parameter,
Estimative = c(exp(mod_r1$gamma), exp(mod_r1$tau), mod_r1$omega))
kable(goals, digits = 4, caption = "Goal rate parameters")
Parameter = c("$A_\\lambda$", "$A_\\mu$")
reds = tibble(Parameter, Estimative = exp(c(mod_r1$a)))
kable(reds, digits = 8, caption = "Red card rate parameters")
Parameter = c("$\\eta_1$", "$\\eta_2$", "$\\phi_1$", "$\\phi_2$",
"$\\rho_1$", "$\\rho_2$", "$\\kappa$")
st = tibble(Parameter,
Estimative = c(mod_r1$eta, mod_r1$phi, mod_r1$rho, mod_r1$kappa))
kable(st, digits = 4, caption = "Stoppage time parameters")
mod_r1$loglik
