x1 = list(); x2 = list(); y1 = list(); y2 = list()
m1 = NULL; m2 = NULL
for(k in 1:N) {
primeiro_tempo = gols_primeiro_tempo %>%
filter(ind == k)
segundo_tempo = gols_segundo_tempo %>%
filter(ind == k)
t1[[k]] = primeiro_tempo$Minute
t2[[k]] = segundo_tempo$Minute
J1[[k]] = primeiro_tempo$J
J2[[k]] = segundo_tempo$J
m1[k] = nrow(primeiro_tempo)
m2[k] = nrow(segundo_tempo)
if(nrow(primeiro_tempo) > 0) {
tmp_x1 = rep(0, 45+U1[k]+1) # primeira entrada é o minuto 0
tmp_y1 = rep(0, 45+U1[k]+1)
mandante = primeiro_tempo %>%
filter(J == 0)
visitante = primeiro_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x1[(mandante$Minute[m]+1):(45+U1[k]+1)] = tmp_x1[mandante$Minute[m]]+1
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y1[(visitante$Minute[m]+1):(45+U1[k]+1)] = tmp_y1[visitante$Minute[m]]+1
}
}
x1[[k]] = tmp_x1
y1[[k]] = tmp_y1
} else {
x1[[k]] = rep(0, (45+U1[k]+1))
y1[[k]] = rep(0, (45+U1[k]+1))
}
if(nrow(segundo_tempo) > 0) {
tmp_x2 = rep(0, 45+U2[k]+1) # primeira entrada é o minuto 45
tmp_y2 = rep(0, 45+U2[k]+1)
mandante = segundo_tempo %>%
filter(J == 0)
visitante = segundo_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x2[(mandante$Minute[m]+1):(45+U2[k]+1)] = tmp_x2[mandante$Minute[m]]+1
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y2[(visitante$Minute[m]+1):(45+U2[k]+1)] = tmp_y2[visitante$Minute[m]]+1
}
}
x2[[k]] = tmp_x2
y2[[k]] = tmp_y2
} else {
x2[[k]] = rep(0, (45+U2[k]+1))
y2[[k]] = rep(0, (45+U2[k]+1))
}
}
for(k in 1:N) {
x2[[k]] = x2[[k]] + x1[[k]][length(x1[[k]])]
y2[[k]] = y2[[k]] + y1[[k]][length(y1[[k]])]
}
I1 = list(); I2 = list()
for(k in 1:N) {
I1[[k]] = c(0, t1[[k]], 45+U1[k]) %>%
unique() %>%
sort()
I2[[k]] = c(0, t2[[k]], 45+U2[k]) %>%
unique() %>%
sort()
}
#### Reds
reds = reds %>%
mutate(J = ifelse(Team == 2, 1, 0))
reds$Stoppage_Time[is.na(reds$Stoppage_Time)] = 0
reds$Minute = reds$Minute + reds$Stoppage_Time
reds = reds %>%
inner_join(copy_results)
# t1s, t2s, J1s, J2s, x1s, x2s, y1s, y2s, m1s, m2s, I1s, I2s
reds_primeiro_tempo = reds %>%
filter(Half == 1)
reds_segundo_tempo = reds %>%
filter(Half == 2)
t1s = list(); t2s = list(); J1s = list(); J2s = list()
x1s = list(); x2s = list(); y1s = list(); y2s = list()
m1s = NULL; m2s = NULL
for(k in 1:N) {
primeiro_tempo = reds_primeiro_tempo %>%
filter(ind == k)
segundo_tempo = reds_segundo_tempo %>%
filter(ind == k)
t1s[[k]] = primeiro_tempo$Minute
t2s[[k]] = segundo_tempo$Minute
J1s[[k]] = primeiro_tempo$J
J2s[[k]] = segundo_tempo$J
m1s[k] = nrow(primeiro_tempo)
m2s[k] = nrow(segundo_tempo)
if(nrow(primeiro_tempo) > 0) {
tmp_x1 = rep(0, 45+U1[k]+1) # primeira entrada é o minuto 0
tmp_y1 = rep(0, 45+U1[k]+1)
mandante = primeiro_tempo %>%
filter(J == 0)
visitante = primeiro_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x1[(mandante$Minute[m]+1):(45+U1[k]+1)] = tmp_x1[mandante$Minute[m]] + mandante %>% filter(Minute == mandante$Minute[m], Stoppage_Time == mandante$Stoppage_Time[m]) %>% nrow()
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y1[(visitante$Minute[m]+1):(45+U1[k]+1)] = tmp_y1[visitante$Minute[m]] + visitante %>% filter(Minute == visitante$Minute[m], Stoppage_Time == visitante$Stoppage_Time[m]) %>% nrow()
}
}
x1s[[k]] = tmp_x1
y1s[[k]] = tmp_y1
} else {
x1s[[k]] = rep(0, (45+U1[k]+1))
y1s[[k]] = rep(0, (45+U1[k]+1))
}
if(nrow(segundo_tempo) > 0) {
tmp_x2 = rep(0, 45+U2[k]+1) # primeira entrada é o minuto 45
tmp_y2 = rep(0, 45+U2[k]+1)
mandante = segundo_tempo %>%
filter(J == 0)
visitante = segundo_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x2[(mandante$Minute[m]+1):(45+U2[k]+1)] = tmp_x2[mandante$Minute[m]] + mandante %>% filter(Minute == mandante$Minute[m], Stoppage_Time == mandante$Stoppage_Time[m]) %>% nrow()
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y2[(visitante$Minute[m]+1):(45+U2[k]+1)] = tmp_y2[visitante$Minute[m]] + visitante %>% filter(Minute == visitante$Minute[m], Stoppage_Time == visitante$Stoppage_Time[m]) %>% nrow()
}
}
x2s[[k]] = tmp_x2
y2s[[k]] = tmp_y2
} else {
x2s[[k]] = rep(0, (45+U2[k]+1))
y2s[[k]] = rep(0, (45+U2[k]+1))
}
}
for(k in 1:N) {
x2s[[k]] = x2s[[k]] + x1s[[k]][length(x1s[[k]])]
y2s[[k]] = y2s[[k]] + y1s[[k]][length(y1s[[k]])]
}
I1s = list(); I2s = list()
for(k in 1:N) {
I1s[[k]] = c(0, t1s[[k]], 45+U1[k]) %>%
unique() %>%
sort()
I2s[[k]] = c(0, t2s[[k]], 45+U2[k]) %>%
unique() %>%
sort()
}
# I1r e I2r (intervalos para os gols considerando que a taxa muda com um cartão vermelho)
I1r = list(); I2r = list()
for(k in 1:N) {
I1r[[k]] = c(I1[[k]], I1s[[k]]) %>%
unique() %>%
sort()
I2r[[k]] = c(I2[[k]], I2s[[k]]) %>%
unique() %>%
sort()
}
# H1, H2, A1, A2 (dummies para os gols)
H1 = list(); H2 = list(); A1 = list(); A2 = list()
for(k in 1:N) {
if(length(t1[[k]]) > 0) {
if(t1[[k]][length(t1[[k]])] == (45+U1[k])) {
H1[[k]] = c(as.integer(!J1[[k]]))
A1[[k]] = c(J1[[k]])
} else {
H1[[k]] = c(as.integer(!J1[[k]]), 0)
A1[[k]] = c(J1[[k]], 0)
}
} else {
H1[[k]] = 0
A1[[k]] = 0
}
if(length(t2[[k]]) > 0) {
if(t2[[k]][length(t2[[k]])] == (45+U2[k])) {
H2[[k]] = c(as.integer(!J2[[k]]))
A2[[k]] = c(J2[[k]])
} else {
H2[[k]] = c(as.integer(!J2[[k]]), 0)
A2[[k]] = c(J2[[k]], 0)
}
} else {
H2[[k]] = 0
A2[[k]] = 0
}
}
H1 = unlist(H1)
H2 = unlist(H2)
A1 = unlist(A1)
A2 = unlist(A2)
# H1r, H2r, A1r, A2r (dummies para os gols considerando que a taxa muda com um cartão vermelho)
H1r = list(); H2r = list(); A1r = list(); A2r = list()
for(k in 1:N) {
tmp_H1 = NULL; tmp_A1 = NULL; tmp_H2 = NULL; tmp_A2 = NULL
for(l in 2:(length(I1r[[k]]))) {
tmp_H1[l-1] = x1[[k]][I1r[[k]][l]+1] - x1[[k]][I1r[[k]][l]]
tmp_A1[l-1] = y1[[k]][I1r[[k]][l]+1] - y1[[k]][I1r[[k]][l]]
}
for(l in 2:(length(I2r[[k]]))) {
tmp_H2[l-1] = x2[[k]][I2r[[k]][l]+1] - x2[[k]][I2r[[k]][l]]
tmp_A2[l-1] = y2[[k]][I2r[[k]][l]+1] - y2[[k]][I2r[[k]][l]]
}
H1r[[k]] = tmp_H1
A1r[[k]] = tmp_A1
H2r[[k]] = tmp_H2
A2r[[k]] = tmp_A2
}
H1r = unlist(H1r)
H2r = unlist(H2r)
A1r = unlist(A1r)
A2r = unlist(A2r)
# H1s, H2s, A1s, A2s (dummies para os cartões vermelhos) (se existirem dois cartões para um mesmo time no mesmo minuto, recebe valor 2 mas isso não aconteceu em 2020)
H1s = list(); H2s = list(); A1s = list(); A2s = list()
for(k in 1:N) {
tmp_H1s = NULL; tmp_A1s = NULL; tmp_H2s = NULL; tmp_A2s = NULL
for(l in 2:(length(I1s[[k]]))) {
tmp_H1s[l-1] = x1s[[k]][I1s[[k]][l]+1] - x1s[[k]][I1s[[k]][l]]
tmp_A1s[l-1] = y1s[[k]][I1s[[k]][l]+1] - y1s[[k]][I1s[[k]][l]]
}
for(l in 2:(length(I2s[[k]]))) {
tmp_H2s[l-1] = x2s[[k]][I2s[[k]][l]+1] - x2s[[k]][I2s[[k]][l]]
tmp_A2s[l-1] = y2s[[k]][I2s[[k]][l]+1] - y2s[[k]][I2s[[k]][l]]
}
H1s[[k]] = tmp_H1s
A1s[[k]] = tmp_A1s
H2s[[k]] = tmp_H2s
A2s[[k]] = tmp_A2s
}
H1s = unlist(H1s)
H2s = unlist(H2s)
A1s = unlist(A1s)
A2s = unlist(A2s)
# g1, r1, g2, r2 (variáveis para os acréscimos)
g1 = unlist(lapply(t1, function(x) sum(x < 45)))
r1 = unlist(lapply(t1s, function(x) sum(x < 45)))
g2 = unlist(lapply(t2, function(x) sum(x < 45)))
r2 = unlist(lapply(t2s, function(x) sum(x < 45)))
# c (variável da diferença de gols para o acréscimo do segundo tempo)
c = NULL
for(k in 1:N) {
c[k] = as.integer(abs(x2[[k]][46] - y2[[k]][46]) <= 1)
}
times$Time = stringr::str_replace_all(times$Time, "\\s-\\s.*", "")
times$Time[1] = "Athletico-PR"
times$Time[2] = "Atlético-GO"
times$Time[3] = "Atlético-MG"
tib1 = tibble(Season = results$Season, Date = results$Date, Match = results$Match,
Lines1 = cumsum(unlist(lapply(I1r, function(x) length(x) - 1))))
lst1 = lst()
lst1[[1]] = c(1:tib1$Lines1[1])
for(k in 2:N) {
lst1[[k]] = c((tib1$Lines1[k-1]+1):tib1$Lines1[k])
}
tib1$Lines1 = lst1
tib2 = tibble(Season = results$Season, Date = results$Date, Match = results$Match,
Lines2 = cumsum(unlist(lapply(I2r, function(x) length(x) - 1))))
lst2 = lst()
lst2[[1]] = c(1:tib2$Lines2[1])
for(k in 2:N) {
lst2[[k]] = c((tib2$Lines2[k-1]+1):tib2$Lines2[k])
}
tib2$Lines2 = lst2
match_dates = full_join(tib1, tib2)
match_dates
I1s
tib1 = tibble(Season = results$Season, Date = results$Date, Match = results$Match,
Lines1 = cumsum(unlist(lapply(I1r, function(x) length(x) - 1))))
lst1 = lst()
lst1[[1]] = c(1:tib1$Lines1[1])
for(k in 2:N) {
lst1[[k]] = c((tib1$Lines1[k-1]+1):tib1$Lines1[k])
}
tib1$Lines1 = lst1
tib2 = tibble(Season = results$Season, Date = results$Date, Match = results$Match,
Lines2 = cumsum(unlist(lapply(I2r, function(x) length(x) - 1))))
lst2 = lst()
lst2[[1]] = c(1:tib2$Lines2[1])
for(k in 2:N) {
lst2[[k]] = c((tib2$Lines2[k-1]+1):tib2$Lines2[k])
}
tib2$Lines2 = lst2
tib1s = tibble(Season = results$Season, Date = results$Date, Match = results$Match,
Lines1s = cumsum(unlist(lapply(I1s, function(x) length(x) - 1))))
lst1s = lst()
lst1s[[1]] = c(1:tib1s$Lines1s[1])
for(k in 2:N) {
lst1s[[k]] = c((tib1s$Lines1s[k-1]+1):tib1s$Lines1s[k])
}
tib1s$Lines1s = lst1s
tib2s = tibble(Season = results$Season, Date = results$Date, Match = results$Match,
Lines2s = cumsum(unlist(lapply(I2s, function(x) length(x) - 1))))
lst2s = lst()
lst2s[[1]] = c(1:tib2s$Lines2s[1])
for(k in 2:N) {
lst2s[[k]] = c((tib2s$Lines2s[k-1]+1):tib2s$Lines2s[k])
}
tib2s$Lines2s = lst2s
match_dates = full_join(tib1, tib2, tib1s, tib2s)
tib1s
tib1
tib2
tib1s
tib2s
full_join(tib1, tib2, tib1s, tib2s)
match_dates = tib1 %>%
full_join(tib2) %>%
full_join(tib1s) %>%
full_join(tib2s)
View(match_dates)
L1s
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input.R', encoding = 'UTF-8', echo=TRUE)
# também preciso saber quais linhas são do delta1s e delta2s
library(CVXR)
library(dplyr)
load("scrape/data/results.RData")
res = results %>%
filter(Season == 2020) %>%
arrange(Date)
dates = unique(res$Date)
dates = dates[dates >= dates[32]]
models = list()
delta1s
load("2020/data/input.RData")
load("2020/data/input_mod_1.RData")
delta1s
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
# também preciso saber quais linhas são do delta1s e delta2s
library(CVXR)
library(dplyr)
load("scrape/data/results.RData")
res = results %>%
filter(Season == 2020) %>%
arrange(Date)
dates = unique(res$Date)
dates = dates[dates >= dates[32]]
load("2020/data/input.RData")
load("2020/data/input_mod_1.RData")
lines = match_dates %>%
filter(Date >= dates[i])
i=1
load("2020/data/input.RData")
load("2020/data/input_mod_1.RData")
lines = match_dates %>%
filter(Date >= dates[i])
lines1 = lines$Lines1 %>%
unlist()
lines2 = lines$Lines2 %>%
unlist()
lines1s = lines$Lines1s %>%
unlist()
lines2s = lines$Lines2s %>%
unlist()
M1_lambda = M1_lambda[lines1,]
M1_mu = M1_mu[lines1,]
M2_lambda = M2_lambda[lines2,]
M2_mu = M2_mu[lines2,]
delta1 = delta1[lines1]
delta2 = delta2[lines2]
H1r = H1r[lines1]
H2r = H2r[lines2]
delta1s = delta1s[lines1s]
delta2s = delta2s[lines2s]
int_reds_1 = int_reds_1[lines1s]
int_reds_2 = int_reds_2[lines2s]
H1s = H1s[lines1s]
H2s = H2s[lines2s]
t0 = Sys.time()
alpha = Variable(n)
beta = Variable(n)
gamma = Variable(1)
tau = Variable(1)
omega = Variable(6)
theta = vstack(alpha, beta, gamma, tau, omega)
eta = Variable(2)
rho = Variable(2)
kappa = Variable(1)
pi1 = eta[1] + rho[1] * r1
pi2 = eta[2] + rho[2] * r2 + c * kappa
a = Variable(2)
loglambda1 = log(delta1) + M1_lambda %*% theta
logmu1 = log(delta1) + M1_mu %*% theta
loglambda2 = log(delta2) + M2_lambda %*% theta
logmu2 = log(delta2) + M2_mu %*% theta
loglambda1s = log(int_reds_1) + a[1]
logmu1s = log(int_reds_1) + a[2]
loglambda2s = log(int_reds_2) + a[1]
logmu2s = log(int_reds_2) + a[2]
log_lik_goals = sum_entries(
- exp(loglambda1) - exp(logmu1) +
H1r*loglambda1 + A1r*logmu1) +
sum_entries(
- exp(loglambda2) - exp(logmu2) +
+ H2r*loglambda2 + A2r*logmu2)
source('~/.active-rstudio-document', echo=TRUE)
i
source('~/.active-rstudio-document', echo=TRUE)
options(knitr.kable.NA = "–")
options(scipen = 999)
library(dplyr)
library(knitr)
load("data/input.RData")
load("data/mod_1.RData")
alphas_betas = tibble(Team = times$Time,
alpha = exp(mod_1$alpha),
beta = exp(mod_1$beta))
kable(alphas_betas, digits = 4, caption = "Alphas and betas",
col.names = c("Team", "$\\alpha$", "$\\beta$"))
Parameter = c("$\\gamma_h$", "$\\tau$", "$\\omega_{\\lambda x}$",
"$\\omega_{\\lambda y}$", "$\\omega_{\\mu x}$",
"$\\omega_{\\mu y}$", "$\\omega_{\\lambda (y^*-x^*)}$",
"$\\omega_{\\mu_(x^*-y^*)}$")
goals = tibble(Parameter,
Estimative = c(exp(mod_1$gamma), exp(mod_1$tau), mod_1$omega))
kable(goals, digits = 4, caption = "Goal rate parameters")
Parameter = c("$A_\\lambda$", "$A_\\mu$")
reds = tibble(Parameter, Estimative = exp(mod_1$a))
kable(reds, digits = 8, caption = "Red card rate parameters")
Parameter = c("$\\eta_1$", "$\\eta_2$", "$\\rho_1$", "$\\rho_2$", "$\\kappa$")
st = tibble(Parameter,
Estimative = c(mod_1$eta, mod_1$rho, mod_1$kappa))
kable(st, digits = 4, caption = "Stoppage time parameters")
mod_1$loglik
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_1.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_1.R', echo=TRUE)
lines
lines1
library(dplyr)
load("scrape/data/results.RData")
res = results %>%
filter(Season == 2020) %>%
arrange(Date)
dates = unique(res$Date)
dates = dates[dates >= dates[32]]
load("2020/data/input.RData")
load("2020/data/input_mod_1.RData")
lines = match_dates %>%
filter(Date >= dates[k])
k=1
load("2020/data/input.RData")
load("2020/data/input_mod_1.RData")
lines = match_dates %>%
filter(Date >= dates[k])
lines
U1
tib1 = tibble(Season = results$Season, Date = results$Date, Match = results$Match,
Ind = results$ind,
Lines1 = cumsum(unlist(lapply(I1r, function(x) length(x) - 1))))
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input.R', encoding = 'UTF-8', echo=TRUE)
load("scrape/data/results.RData")
res = results %>%
filter(Season == 2020) %>%
arrange(Date)
dates = unique(res$Date)
dates = dates[dates >= dates[32]]
models = list()
k=1
load("2020/data/input.RData")
load("2020/data/input_mod_1.RData")
lines = match_dates %>%
filter(Date >= dates[k])
lines
r1
r2
ind1 == ind2
ind1 = lines1$Ind
ind2 = lines2$Ind
ind1 = lines1$Ind
ind2 = lines2$Ind
ind1 = lines$Ind
ind2 = lines$Ind
ind1==ind2
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/models.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/models.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_dates.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_dates.R', echo=TRUE)
mod_dates
library(ggplot2)
alpha = NULL
beta = NULL
for(i in 1:length(mod_dates)) {
alpha[i] = mod_dates[[i]]$alpha$Flamengo
beta[i] = mod_dates[[i]]$beta$Flamengo
}
alpha
i
mod_dates[[i]]$alpha$Flamengo
mod_dates[[i]]
mod_dates[[i]]$alpha
mod_dates[[i]]$alpha["Flamengo"]
alpha = NULL
beta = NULL
for(i in 1:length(mod_dates)) {
alpha[i] = mod_dates[[i]]$alpha["Flamengo"]
beta[i] = mod_dates[[i]]$beta["Flamengo"]
}
alpha
beta
alpha
beta
max(beta)
