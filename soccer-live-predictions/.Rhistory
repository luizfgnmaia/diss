load("scrape/data/results2.RData")
results = results %>%
arrange(Date)
teams = unique(results$Home_Team)
first_matches = list()
for(i in 1:length(teams)) {
first_matches[[i]] = head(sort(c(which(results$Home_Team == teams[i]), which(results$Away_Team == teams[i]))), 4)
}
first_matches = sort(do.call(c, first_matches))
first_matches
load("scrape/data/results2.RData")
results = results %>%
arrange(Date)
teams = unique(results$Home_Team)
first_matches = list()
for(i in 1:length(teams)) {
first_matches[[i]] = head(sort(c(which(results$Home_Team == teams[i]), which(results$Away_Team == teams[i]))), 4)
}
first_matches = sort(unique(do.call(c, first_matches)))
# preciso das 4 primeiras partidas de cada time
first_matches
load("scrape/data/results2.RData")
results = results %>%
arrange(Date)
teams = unique(results$Home_Team)
tmp = list()
for(i in 1:length(teams)) {
tmp[[i]] = head(sort(c(which(results$Home_Team == teams[i]), which(results$Away_Team == teams[i]))), 4)
}
tmp = sort(unique(do.call(c, tmp)))
first_mathces = results[, tmp]
first_matches= results[tmp, ]
View(first_matches)
load("scrape/data/results2.RData")
results = results %>%
arrange(Date)
teams = unique(results$Home_Team)
tmp = list()
for(i in 1:length(teams)) {
tmp[[i]] = head(sort(c(which(results$Home_Team == teams[i]), which(results$Away_Team == teams[i]))), 4)
}
tmp = sort(unique(do.call(c, tmp)))
first_matches = results[tmp, ] %>%
select(-Stoppage_Time_1,-Stoppage_Time_2)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/first_matches.R', echo=TRUE)
load("scrape/data/results2.RData")
results = results %>%
arrange(Date)
teams = unique(results$Home_Team)
tmp = list()
for(i in 1:length(teams)) {
tmp[[i]] = head(sort(c(which(results$Home_Team == teams[i]), which(results$Away_Team == teams[i]))), 4)
}
tmp = sort(unique(do.call(c, tmp)))
first_matches = results[tmp, ] %>%
select(-Stoppage_Time_1,-Stoppage_Time_2)
save(first_matches, file = "weight/data/first_matches.RData")
View(first_matches)
load("scrape/data/results2.RData")
results = results %>%
arrange(Date)
teams = unique(results$Home_Team)
tmp = list()
for(i in 1:length(teams)) {
tmp[[i]] = head(sort(c(which(results$Home_Team == teams[i]), which(results$Away_Team == teams[i]))), 4)
}
tmp = sort(unique(do.call(c, tmp)))
first_matches = results[tmp, ] %>%
select(-Stoppage_Time_1,-Stoppage_Time_2) %>%
filter(Season > 2015)
save(first_matches, file = "weight/data/first_matches.RData")
View(first_matches)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
nrow(HDA)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_rc_dc.RData")
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
nrow(HDA_rc)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
nrow(HDA_dc)
HDA = HDA_dc %>%
anti_join(first_matches)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
HDA = HDA_dc %>%
anti_join(first_matches)
nrow(HDA)
names(HDA)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/HDA_dc.R', echo=TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
HDA = HDA_dc %>%
anti_join(first_matches)
nrow(HDA)
names(HDA)
HDA %>%
summarise(GeoMean_Results_mod_0 = EnvStats::geoMean(pnk_Result_mod_0),
GeoMean_Results_mod_3 = EnvStats::geoMean(pnk_Result_mod_3),
GeoMean_Scores_mod_0 = EnvStats::geoMean(pnk_Scores_mod_0),
GeoMean_Scores_mod_3 = EnvStats::geoMean(pnk_Scores_mod_3))
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
HDA = HDA_dc %>%
anti_join(first_matches)
nrow(HDA)
HDA %>%
summarise(GeoMean_Results_mod_0 = EnvStats::geoMean(pnk_Result_mod_0),
GeoMean_Results_mod_3 = EnvStats::geoMean(pnk_Result_mod_3),
GeoMean_Scores_mod_0 = EnvStats::geoMean(pnk_Scores_mod_0),
GeoMean_Scores_mod_3 = EnvStats::geoMean(pnk_Scores_mod_3))
names(HDA)
HDA %>%
summarise(GeoMean_Results_mod_0 = EnvStats::geoMean(pnk_Result_mod_0),
GeoMean_Results_mod_3 = EnvStats::geoMean(pnk_Result_mod_3),
GeoMean_Scores_mod_0 = EnvStats::geoMean(pnk_Score_mod_0),
GeoMean_Scores_mod_3 = EnvStats::geoMean(pnk_Score_mod_3))
load("scrape/data/results2.RData")
load("2015-2020/data/input.RData")
source("pred/pred_mod_0.R")
source("pred/input_pred.R")
i=1
season_match[i] = paste(lst$Match$Season, lst$Match$Match)
paste(lst$Match$Season, lst$Match$Match)
ret = list()
lst = list()
lst$Match = results %>%
filter(Season == copy_results$Season[ind[i]],
Match == copy_results$Match[ind[i]])
ind
load("scrape/data/results2.RData")
load("2015-2020/data/input.RData")
source("pred/pred_mod_0.R")
source("pred/input_pred.R")
ind
source("weight/predict_matches_mod_3.R")
ind
load("weight/data/matches_to_be_predicted.RData")
ind
load("scrape/data/results2.RData")
load("2015-2020/data/input.RData")
source("pred/pred_mod_0.R")
source("pred/input_pred.R")
ret = list()
lst = list()
i=1
ind
lst$Match = results %>%
filter(Season == copy_results$Season[ind[i]],
Match == copy_results$Match[ind[i]])
season_match[i] = paste(lst$Match$Season, lst$Match$Match)
season_match = NULL
season_match[i] = paste(lst$Match$Season, lst$Match$Match)
input_15 = input_pred(ind = ind[i], min = 15)
input_15
input
input_15
input_pred(ind = ind[i], min = 15)
input_pred
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_dixon_coles_mod_0.R', echo=TRUE)
load("scrape/data/results2.RData")
load("scrape/data/goals.RData")
load("scrape/data/reds.RData")
load("2015-2020/data/input.RData")
source("pred/pred_mod_0.R")
source("pred/input_pred.R")
load("weight/data/dixon_coles_mod_0.RData")
load("weight/data/matches_to_be_predicted.RData")
ret = list()
lst = list()
season_match = NULL
lst$Match = results %>%
filter(Season == copy_results$Season[ind[i]],
Match == copy_results$Match[ind[i]])
season_match[i] = paste(lst$Match$Season, lst$Match$Match)
lst$pred_0 = pred_mod_0(mod_0 = mod_0[[lst$Match$Date]],
n = n_pred,
home_team = lst$Match$Home_Team,
away_team = lst$Match$Away_Team)
mod_0 = dixon_coles_mod_0
lst$pred_0 = pred_mod_0(mod_0 = mod_0[[lst$Match$Date]],
n = n_pred,
home_team = lst$Match$Home_Team,
away_team = lst$Match$Away_Team)
mod_0
mod_0[[lst$Match$Date]]
lst$Match = results %>%
filter(Season == copy_results$Season[ind[i]],
Match == copy_results$Match[ind[i]])
season_match[i] = paste(lst$Match$Season, lst$Match$Match)
mod_0[[lst$Match$Date]]
ind
lst$
Match
i
i=1
lst$Match = results %>%
filter(Season == copy_results$Season[ind[i]],
Match == copy_results$Match[ind[i]])
season_match[i] = paste(lst$Match$Season, lst$Match$Match)
lst$pred_0 = pred_mod_0(mod_0 = mod_0[[lst$Match$Date]],
n = n_pred,
home_team = lst$Match$Home_Team,
away_team = lst$Match$Away_Team)
n_pred = 10
lst$pred_0 = pred_mod_0(mod_0 = mod_0[[lst$Match$Date]],
n = n_pred,
home_team = lst$Match$Home_Team,
away_team = lst$Match$Away_Team)
input_15 = input_pred(ind = ind[i], min = 15)
input_15
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_dixon_coles_mod_0.R', echo=TRUE)
load("scrape/data/goals.RData")
load("scrape/data/reds.RData")
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_dixon_coles_mod_0.R', echo=TRUE)
?load
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_dixon_coles_mod_0.R', echo=TRUE)
load("weight/data/dixon_coles_mod_0.RData")
load("weight/data/matches_to_be_predicted.RData")
source("weight/predict_matches_mod_0.R")
source("weight/predict_matches_mod_0.R")
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_dixon_coles_mod_0.R', echo=TRUE)
load("weigth/data/dixon_coles_mod_0.RData")
load("weight/data/dixon_coles_mod_0.RData")
load("weight/data/matches_to_be_predicted.RData")
ind
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_0.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/mod_0_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/mod_3_dc.R', encoding = 'UTF-8', echo=TRUE)
load("weight/data/mod_0_dc.RData")
mod_0_dc[[1]]
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/mod_3_dc.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_0.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_0.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_0.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_3_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_3_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_0_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_3_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_0_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_3_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_3_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_0_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_3_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/predicting_matches_mod_3_dc.R', echo=TRUE)
load("weight/data/mod_0_dc.RData")
load("weight/data/mod_3_dc.RData")
HDA_dc = tibble()
load("weight/data/predictions_mod_0_dc.RData")
load("weight/data/predictions_mod_3_dc.RData")
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/HDA_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/HDA_dc.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/weight/HDA_dc.R', echo=TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
nrow(HDA2)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
HDA = HDA_dc
nrow(HDA)
names(HDA)
all = tibble(GeoMean = apply(HDA[,c(45:56)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
apply(HDA[,c(45:56)], 2, EnvStats::geoMean)
warnings()
HDA2[which(HDA == 0, arr.ind = TRUE)]
HDA[which(HDA == 0, arr.ind = TRUE)]
View(HDA)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
HDA = HDA_dc %>%
anti_join(first_matches)
nrow(HDA)
HDA[which(HDA == 0, arr.ind = TRUE)]
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
HDA = HDA_dc %>%
anti_join(first_matches)
nrow(HDA)
GeoMean = apply(HDA[,c(45:56)], 2, EnvStats::geoMean)
GeoMean
all = tibble(GeoMean = apply(HDA[,c(45:56)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
all %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean")
all %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
names(HDA)
scores = tibble(GeoMean = apply(HDA[,c(57:68)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
scores %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the scores")
scores %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
matches = reds %>%
filter(Season > 2015, Half == 1) %>%
select(Season, Match)
nrow(matches)
matches
HDA_reds = HDA %>%
right_join(matches)
HDA_reds
nrow(HDA_reds)
HDA_reds = HDA %>%
right_join(matches)
results_reds = tibble(GeoMean = apply(HDA_reds[,c(45:56)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
results_reds %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches with a red card in the first half") +
ylab("Geometric mean for the results")
results_reds %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
GeoMean = apply(HDA_reds[,c(45:56)], 2, EnvStats::geoMean)
GeoMean
HDA_reds = HDA %>%
right_join(matches)
HDA_reds
View(HDA_reds)
results_reds = tibble(GeoMean = apply(HDA_reds[,c(45:56)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
results_reds
HDA_reds[,c(45:56)]
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA_dc.RData")
load("data/first_matches.RData")
HDA = HDA_dc %>%
anti_join(first_matches)
nrow(HDA)
results = tibble(GeoMean = apply(HDA[,c(45:56)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
results %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the results")
results %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
scores = tibble(GeoMean = apply(HDA[,c(57:68)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
scores %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Geometric mean for the scores")
scores %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
matches = reds %>%
filter(Season > 2015, Half == 1) %>%
select(Season, Match)
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
matches = reds %>%
filter(Season > 2015, Half == 1) %>%
select(Season, Match)
nrow(matches)
HDA_reds = HDA %>%
right_join(matches)
View(HDA_reds)
matches = reds %>%
filter(Season > 2015, Half == 1) %>%
select(Season, Match)
View(matches)
HDA_reds = HDA %>%
inner_join(matches)
View(HDA_reds)
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
matches = reds %>%
filter(Season > 2015, Half == 1) %>%
select(Season, Match)
HDA_reds = HDA %>%
inner_join(matches)
nrow(HDA_reds)
results_reds = tibble(GeoMean = apply(HDA_reds[,c(45:56)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
results_reds %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches with a red card in the first half") +
ylab("Geometric mean for the results")
results_reds %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
HDA_no_reds = HDA %>%
anti_join(matches)
results_no_reds = tibble(GeoMean = apply(HDA_no_reds[,c(45:56)], 2, EnvStats::geoMean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 2)),
Model = factor(c(rep("0", 6),
rep("3", 6))))
results_no_reds %>%
ggplot(aes(x = Minute, y = GeoMean, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches with no red cards in the first half") +
ylab("Geometric mean for the results")
results_no_reds %>%
pivot_wider(id_cols = "Model", values_from = "GeoMean", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
