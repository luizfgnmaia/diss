} else if(x1[i] == 1 & y1[i] == 1) {
par[i, 3] = 1
} else if((x1[i] - y1[i] == 0) & x1[i] >= 2 & y1[i] >= 2) {
par[i, 4] = 1
} else if((x1[i] - y >= 1) & x1[i] >= 2) {
par[i, 5] = 1
} else if((x1[i] - y1[i] <= -1) & y1[i] >= 2)  {
par[i, 6] = 1
} else {
print("Error.")
}
}
i
par[i, 1]
par[i, 1]
par1 = matrix(0, nrow = nrow(M1_lambda), ncol = 6)
colnames(par1) = c("10", "01", "11", "22", "21", "12")
for(i in 1:nrow(M1_lambda)) {
if(x == 0 & y == 0) {
# do nothing
} else if(x1[i] == 1 & y1[i] == 0) {
par1[i, 1] = 1
} else if(x1[i] == 0 & y1[i] == 1) {
par1[i, 2] = 1
} else if(x1[i] == 1 & y1[i] == 1) {
par1[i, 3] = 1
} else if((x1[i] - y1[i] == 0) & x1[i] >= 2 & y1[i] >= 2) {
par1[i, 4] = 1
} else if((x1[i] - y >= 1) & x1[i] >= 2) {
par1[i, 5] = 1
} else if((x1[i] - y1[i] <= -1) & y1[i] >= 2) {
par1[i, 6] = 1
} else {
print("Error.")
}
}
warnings()
par1 = matrix(0, nrow = nrow(M1_lambda), ncol = 6)
colnames(par1) = c("10", "01", "11", "22", "21", "12")
x1
y1
for(i in 1:nrow(M1_lambda)) {
if(x1[i] == 0 & y1[i] == 0) {
# do nothing
} else if(x1[i] == 1 & y1[i] == 0) {
par1[i, 1] = 1
} else if(x1[i] == 0 & y1[i] == 1) {
par1[i, 2] = 1
} else if(x1[i] == 1 & y1[i] == 1) {
par1[i, 3] = 1
} else if((x1[i] - y1[i] == 0) & x1[i] >= 2 & y1[i] >= 2) {
par1[i, 4] = 1
} else if((x1[i] - y >= 1) & x1[i] >= 2) {
par1[i, 5] = 1
} else if((x1[i] - y1[i] <= -1) & y1[i] >= 2) {
par1[i, 6] = 1
} else {
print("Error.")
}
}
i
for(i in 1:nrow(M1_lambda)) {
if(x1[i] == 0 & y1[i] == 0) {
# do nothing
} else if(x1[i] == 1 & y1[i] == 0) {
par1[i, 1] = 1
} else if(x1[i] == 0 & y1[i] == 1) {
par1[i, 2] = 1
} else if(x1[i] == 1 & y1[i] == 1) {
par1[i, 3] = 1
} else if((x1[i] - y1[i] == 0) & x1[i] >= 2 & y1[i] >= 2) {
par1[i, 4] = 1
} else if((x1[i] - y >= 1) & x1[i] >= 2) {
par1[i, 5] = 1
} else if((x1[i] - y1[i] <= -1) & y1[i] >= 2) {
par1[i, 6] = 1
} else {
print(paste0("Error in i = ", i))
}
}
par1 = matrix(0, nrow = nrow(M1_lambda), ncol = 6)
colnames(par1) = c("10", "01", "11", "22", "21", "12")
for(i in 1:nrow(M1_lambda)) {
if(x1[i] == 0 & y1[i] == 0) {
# do nothing
} else if(x1[i] == 1 & y1[i] == 0) {
par1[i, 1] = 1
} else if(x1[i] == 0 & y1[i] == 1) {
par1[i, 2] = 1
} else if(x1[i] == 1 & y1[i] == 1) {
par1[i, 3] = 1
} else if((x1[i] - y1[i] == 0) & x1[i] >= 2 & y1[i] >= 2) {
par1[i, 4] = 1
} else if((x1[i] - y1[i] >= 1) & x1[i] >= 2) {
par1[i, 5] = 1
} else if((x1[i] - y1[i] <= -1) & y1[i] >= 2) {
par1[i, 6] = 1
} else {
print(paste0("Error in i = ", i))
}
}
par1
par2 = matrix(0, nrow = nrow(M2_lambda), ncol = 6)
colnames(par2) = c("10", "01", "11", "22", "21", "12")
for(i in 1:nrow(M2_lambda)) {
if(x2[i] == 0 & y2[i] == 0) {
# do nothing
} else if(x2[i] == 1 & y2[i] == 0) {
par2[i, 1] = 1
} else if(x2[i] == 0 & y2[i] == 1) {
par2[i, 2] = 1
} else if(x2[i] == 1 & y2[i] == 1) {
par2[i, 3] = 1
} else if((x2[i] - y2[i] == 0) & x2[i] >= 2 & y2[i] >= 2) {
par2[i, 4] = 1
} else if((x2[i] - y2[i] >= 1) & x2[i] >= 2) {
par2[i, 5] = 1
} else if((x2[i] - y2[i] <= -1) & y2[i] >= 2) {
par2[i, 6] = 1
} else {
print(paste0("Error in i = ", i))
}
}
colnames(M1_lambda)
load("2020/data/input.RData")
load("2020/data/input_mod_1.RData")
x1 = M1_lambda[,"x"]
y1 = M1_lambda[,"y"]
x2 = M2_lambda[,"x"]
y2 = M2_lambda[,"y"]
par1 = matrix(0, nrow = nrow(M1_lambda), ncol = 6)
colnames(par1) = c("10", "01", "11", "22", "21", "12")
for(i in 1:nrow(M1_lambda)) {
if(x1[i] == 0 & y1[i] == 0) {
# do nothing
} else if(x1[i] == 1 & y1[i] == 0) {
par1[i, 1] = 1
} else if(x1[i] == 0 & y1[i] == 1) {
par1[i, 2] = 1
} else if(x1[i] == 1 & y1[i] == 1) {
par1[i, 3] = 1
} else if((x1[i] - y1[i] == 0) & x1[i] >= 2 & y1[i] >= 2) {
par1[i, 4] = 1
} else if((x1[i] - y1[i] >= 1) & x1[i] >= 2) {
par1[i, 5] = 1
} else if((x1[i] - y1[i] <= -1) & y1[i] >= 2) {
par1[i, 6] = 1
} else {
print(paste0("Error in i = ", i))
}
}
par2 = matrix(0, nrow = nrow(M2_lambda), ncol = 6)
colnames(par2) = c("10", "01", "11", "22", "21", "12")
for(i in 1:nrow(M2_lambda)) {
if(x2[i] == 0 & y2[i] == 0) {
# do nothing
} else if(x2[i] == 1 & y2[i] == 0) {
par2[i, 1] = 1
} else if(x2[i] == 0 & y2[i] == 1) {
par2[i, 2] = 1
} else if(x2[i] == 1 & y2[i] == 1) {
par2[i, 3] = 1
} else if((x2[i] - y2[i] == 0) & x2[i] >= 2 & y2[i] >= 2) {
par2[i, 4] = 1
} else if((x2[i] - y2[i] >= 1) & x2[i] >= 2) {
par2[i, 5] = 1
} else if((x2[i] - y2[i] <= -1) & y2[i] >= 2) {
par2[i, 6] = 1
} else {
print(paste0("Error in i = ", i))
}
}
load("2020/data/input_mod_2.RData")
colnames(M1_lambda)
last2 = M1_lambda[(ncol(M1_lambda)-1):M1_lambda,]
last2 = M1_lambda[,(ncol(M1_lambda)-1):M1_lambda]
last2 = M1_lambda[,(ncol(M1_lambda)-1):ncol(M1_lambda)]
last2
colnames(M1_lambda)
M1_lambda[,-(ncol(M1_lambda)-1):ncol(M1_lambda)]
M1_lambda[,-c((ncol(M1_lambda)-1):ncol(M1_lambda))]
M1_lambda[,-c((ncol(M1_lambda)-1):ncol(M1_lambda))] %>% colnames()
last2 = M1_lambda[,-c((ncol(M1_lambda)-1):ncol(M1_lambda))]
M1_lambda = rbind(M1_lambda[,-c((ncol(M1_lambda)-3):ncol(M1_lambda))],
a
)
last2 = M1_lambda[,-c((ncol(M1_lambda)-1):ncol(M1_lambda))]
M1_lambda = cbind(M1_lambda[,-c((ncol(M1_lambda)-3):ncol(M1_lambda))],
M1_lambda = cbind(M1_lambda[,-c((ncol(M1_lambda)-3):ncol(M1_lambda))],
par1,
M1_lambda[,c((ncol(M1_lambda)-1):ncol(M1_lambda))))
save.image("2020/data/input_mod_5.RData")
M1_lambda = cbind(M1_lambda[,-c((ncol(M1_lambda)-3):ncol(M1_lambda))],
par1,
M1_lambda[,c((ncol(M1_lambda)-1):ncol(M1_lambda))))
save.image("2020/data/input_mod_5.RData")
cbind(M1_lambda[,-c((ncol(M1_lambda)-3):ncol(M1_lambda))],
par1)
M1_lambda = cbind(M1_lambda[,-c((ncol(M1_lambda)-3):ncol(M1_lambda))],
par1,
M1_lambda[,c((ncol(M1_lambda)-1):ncol(M1_lambda)))
M1_lambda = cbind(M1_lambda[,-c((ncol(M1_lambda)-3):ncol(M1_lambda))],
par1,
M1_lambda[,c((ncol(M1_lambda)-1):ncol(M1_lambda)))
M1_lambda = cbind(M1_lambda[,-c((ncol(M1_lambda)-3):ncol(M1_lambda))],
par1,
M1_lambda[,c((ncol(M1_lambda)-1):ncol(M1_lambda))
)
M1_lambda = cbind(M1_lambda[,-c((ncol(M1_lambda)-3):ncol(M1_lambda))],
par1,
M1_lambda[,(ncol(M1_lambda)-1):ncol(M1_lambda))
M1_lambda = cbind(M1_lambda[,-c((ncol(M1_lambda)-3):ncol(M1_lambda))],
par1,
M1_lambda[,(ncol(M1_lambda)-1):ncol(M1_lambda)))
last2 = M1_lambda[,c((ncol(M1_lambda)-1):ncol(M1_lambda))]
last2
M1_lambda = cbind(M1_lambda[,-c((ncol(M1_lambda)-3):ncol(M1_lambda))],
par1,
last2)
M1_lambda = cbind(M1_lambda[,-c((ncol(M1_lambda)-3):ncol(M1_lambda))],
par1,
M1_lambda[,c((ncol(M1_lambda)-1):ncol(M1_lambda))])
load("2020/data/input.RData")
load("2020/data/input_mod_1.RData")
x1 = M1_lambda[,"x"]
y1 = M1_lambda[,"y"]
x2 = M2_lambda[,"x"]
y2 = M2_lambda[,"y"]
par1 = matrix(0, nrow = nrow(M1_lambda), ncol = 6)
colnames(par1) = c("10", "01", "11", "22", "21", "12")
for(i in 1:nrow(M1_lambda)) {
if(x1[i] == 0 & y1[i] == 0) {
# do nothing
} else if(x1[i] == 1 & y1[i] == 0) {
par1[i, 1] = 1
} else if(x1[i] == 0 & y1[i] == 1) {
par1[i, 2] = 1
} else if(x1[i] == 1 & y1[i] == 1) {
par1[i, 3] = 1
} else if((x1[i] - y1[i] == 0) & x1[i] >= 2 & y1[i] >= 2) {
par1[i, 4] = 1
} else if((x1[i] - y1[i] >= 1) & x1[i] >= 2) {
par1[i, 5] = 1
} else if((x1[i] - y1[i] <= -1) & y1[i] >= 2) {
par1[i, 6] = 1
} else {
print(paste0("Error in i = ", i))
}
}
par2 = matrix(0, nrow = nrow(M2_lambda), ncol = 6)
colnames(par2) = c("10", "01", "11", "22", "21", "12")
for(i in 1:nrow(M2_lambda)) {
if(x2[i] == 0 & y2[i] == 0) {
# do nothing
} else if(x2[i] == 1 & y2[i] == 0) {
par2[i, 1] = 1
} else if(x2[i] == 0 & y2[i] == 1) {
par2[i, 2] = 1
} else if(x2[i] == 1 & y2[i] == 1) {
par2[i, 3] = 1
} else if((x2[i] - y2[i] == 0) & x2[i] >= 2 & y2[i] >= 2) {
par2[i, 4] = 1
} else if((x2[i] - y2[i] >= 1) & x2[i] >= 2) {
par2[i, 5] = 1
} else if((x2[i] - y2[i] <= -1) & y2[i] >= 2) {
par2[i, 6] = 1
} else {
print(paste0("Error in i = ", i))
}
}
load("2020/data/input_mod_2.RData")
last2 = M1_lambda[,c((ncol(M1_lambda)-1):ncol(M1_lambda))]
M1_lambda = cbind(M1_lambda[,-c((ncol(M1_lambda)-3):ncol(M1_lambda))],
par1,
M1_lambda[,c((ncol(M1_lambda)-1):ncol(M1_lambda))])
colnames(M1_lambdsa)
colnames(M1_lambda)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input_mod_5.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input_mod_5.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input_mod_5.R', echo=TRUE)
View(M1_lambda)
colnames(M1_lambda)[(ncol(M1_lambda)-8):(ncol(M1_lambda)-2)]
colnames(M1_lambda)[(ncol(M1_lambda)-7):(ncol(M1_lambda)-2)]
colnames(M1_lambda)[(ncol(M1_lambda)-7):(ncol(M1_lambda)-1)]
colnames(M1_mu)[(ncol(M1_mu)-7):(ncol(M1_mu)-2)]
colnames(M1_mu)
load("2020/data/input.RData")
load("2020/data/input_mod_1.RData")
x1 = M1_lambda[,"x"]
y1 = M1_lambda[,"y"]
x2 = M2_lambda[,"x"]
y2 = M2_lambda[,"y"]
par1 = matrix(0, nrow = nrow(M1_lambda), ncol = 6)
colnames(par1) = c("10", "01", "11", "22", "21", "12")
for(i in 1:nrow(M1_lambda)) {
if(x1[i] == 0 & y1[i] == 0) {
# do nothing
} else if(x1[i] == 1 & y1[i] == 0) {
par1[i, 1] = 1
} else if(x1[i] == 0 & y1[i] == 1) {
par1[i, 2] = 1
} else if(x1[i] == 1 & y1[i] == 1) {
par1[i, 3] = 1
} else if((x1[i] - y1[i] == 0) & x1[i] >= 2 & y1[i] >= 2) {
par1[i, 4] = 1
} else if((x1[i] - y1[i] >= 1) & x1[i] >= 2) {
par1[i, 5] = 1
} else if((x1[i] - y1[i] <= -1) & y1[i] >= 2) {
par1[i, 6] = 1
} else {
print(paste0("Error in i = ", i))
}
}
par2 = matrix(0, nrow = nrow(M2_lambda), ncol = 6)
colnames(par2) = c("10", "01", "11", "22", "21", "12")
for(i in 1:nrow(M2_lambda)) {
if(x2[i] == 0 & y2[i] == 0) {
# do nothing
} else if(x2[i] == 1 & y2[i] == 0) {
par2[i, 1] = 1
} else if(x2[i] == 0 & y2[i] == 1) {
par2[i, 2] = 1
} else if(x2[i] == 1 & y2[i] == 1) {
par2[i, 3] = 1
} else if((x2[i] - y2[i] == 0) & x2[i] >= 2 & y2[i] >= 2) {
par2[i, 4] = 1
} else if((x2[i] - y2[i] >= 1) & x2[i] >= 2) {
par2[i, 5] = 1
} else if((x2[i] - y2[i] <= -1) & y2[i] >= 2) {
par2[i, 6] = 1
} else {
print(paste0("Error in i = ", i))
}
}
load("2020/data/input_mod_2.RData")
M1_lambda = cbind(M1_lambda[,-c((ncol(M1_lambda)-3):ncol(M1_lambda))],
par1,
0, 0, 0, 0, 0, 0,
M1_lambda[,c((ncol(M1_lambda)-1):ncol(M1_lambda))])
M2_lambda = cbind(M2_lambda[,-c((ncol(M2_lambda)-3):ncol(M2_lambda))],
par2,
0, 0, 0, 0, 0, 0,
M2_lambda[,c((ncol(M2_lambda)-1):ncol(M2_lambda))])
M1_mu = cbind(M1_mu[,-c((ncol(M1_mu)-3):ncol(M1_mu))],
0, 0, 0, 0, 0, 0,
par1,
M1_mu[,c((ncol(M1_mu)-1):ncol(M1_mu))])
M2_mu = cbind(M2_mu[,-c((ncol(M2_mu)-3):ncol(M2_mu))],
0, 0, 0, 0, 0, 0,
par2,
M2_mu[,c((ncol(M2_mu)-1):ncol(M2_mu))])
colnames(M1_lambda)[(ncol(M1_lambda)-7):(ncol(M1_lambda)-2)] = "0"
colnames(M2_lambda)[(ncol(M2_lambda)-7):(ncol(M2_lambda)-2)] = "0"
colnames(M1_mu)[(ncol(M1_mu)-7):(ncol(M1_mu)-2)]
colnames(M1_mu)
colnames(M1_mu)[(ncol(M1_mu)-13):(ncol(M1_mu)-8)]
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input_mod_5.R', echo=TRUE)
library(CVXR)
load("2020/data/input.RData")
load("2020/data/input_mod_5.RData")
colnames(M1_lambda)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_5.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_5.R', echo=TRUE)
mod_5$omega
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input_mod_5.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_5.R', echo=TRUE)
options(knitr.kable.NA = "–")
options(scipen = 999)
library(dplyr)
library(knitr)
load("data/input.RData")
load("data/mod_5.RData")
alphas_betas = tibble(Team = times$Time,
alpha = exp(mod_5$alpha),
beta = exp(mod_5$beta))
kable(alphas_betas, digits = 4, caption = "Alphas and betas",
col.names = c("Team", "$\\alpha$", "$\\beta$"))
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_5.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_5.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/input_mod_5.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2020/mod_5.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2019/input_mod_4.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2019/input_mod_5.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2019/mod_4.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2015-2019/mod_5.R', echo=TRUE)
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/data/mod_5.RData")
lambda_10 = mod_5$lambda_xy["10"]
lambda_10
mod_5$lambda_xy
ind_xy = xy(score_home, score_away)
xy <- function(x, y) {
if(x == 0 & y == 0) {
return(1)
} else if(x == 1 & y == 0) {
return(2)
} else if(x == 0 & y == 1) {
return(3)
} else if(x == 1 & y == 1) {
return(4)
} else if((x - y == 0) & x >= 2 & y >= 2) {
return(5)
} else if((x - y1 >= 1) & x >= 2) {
return(6)
} else if((x - y1 <= -1) & y >= 2) {
return(7)
} else {
raise("Error")
}
}
ind_xy = xy(score_home, score_away)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/pred/mod_5_2015_2019.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/pred/mod_5_2015_2019.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/pred/mod_5_2015_2019.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/pred/predicting_matches_mod_5_2015_2019.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/pred/pred_mod_5.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/pred/mod_5_2015_2019.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/pred/predicting_matches_mod_5_2015_2019.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/pred/HDA.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/pred/HDA.R', echo=TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA.RData")
nrow(HDA)
names(HDA)
RPS = apply(HDA[,c(99:104, 117:128)], 2, mean)
RPS
all = tibble(RPS = apply(HDA[,c(99:104, 117:128)], 2, mean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 3)),
Model = factor(c(rep("0", 6), rep("3 (2015-2019)", 6),
rep("5 (2015-2019)", 6)),
levels = c("0", "3 (2015-2019)", "5 (2015-2019)")))
all %>%
ggplot(aes(x = Minute, y = RPS, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Ranked Probability Score")
all %>%
pivot_wider(id_cols = "Model", values_from = "RPS", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA.RData")
nrow(HDA)
all = tibble(RPS = apply(HDA[,c(99:104, 117:128)], 2, mean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 3)),
Model = factor(c(rep("0", 6), rep("3 (2015-2019)", 6),
rep("5 (2015-2019)", 6)),
levels = c("0", "3 (2015-2019)", "5 (2015-2019)")))
all %>%
ggplot(aes(x = Minute, y = RPS, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All predicted matches") +
ylab("Ranked Probability Score")
all %>%
pivot_wider(id_cols = "Model", values_from = "RPS", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
first_100 = tibble(RPS = apply(HDA[c(1:100),c(99:104, 117:128)], 2, mean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 4)),
Model = factor(c(rep("0", 6), rep("3", 6), rep("3 (2019)", 6),
rep("3 (2015-2019)", 6)),
levels = c("0", "3", "3 (2019)", "3 (2015-2019)")))
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
load("data/HDA.RData")
nrow(HDA)
names(HDA)
load("scrape/data/results.RData")
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/scrape/data/reds.RData")
reds = reds %>%
filter(Season == 2020, Half == 1)
reds
matches = reds %>%
filter(Season == 2020, Half == 1) %>%
.$Match
nrow(matches)
matches = reds %>%
filter(Season == 2020, Half == 1) %>%
.$Match
length(matches)
HDA_reds = HDA %>%
filter(Match %in% matches)
all_reds = tibble(Brier = apply(HDA_reds[,c(129:134, 147:158)], 2, mean),
Minute = as.integer(rep(c(0, 15, 30, 45, 60, 75), 3)),
Model = factor(c(rep("0", 6), rep("3 (2015-2019)", 6),
rep("5 (2015-2019)", 6)),
levels = c("0", "3 (2015-2019)", "5 (2015-2019)")))
all_reds %>%
ggplot(aes(x = Minute, y = Brier, col = Model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75)) +
theme_bw() +
ggtitle("All matches with red cards in the first half") +
ylab("Brier Score")
all %>%
pivot_wider(id_cols = "Model", values_from = "Brier", names_from = "Minute",
names_prefix = "Minute ") %>%
kable()
