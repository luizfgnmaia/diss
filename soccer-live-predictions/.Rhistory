beta
gamma
match_dates
x
View(resultrs)
View(results)
x
View(results %>% filter(Season ==2020))
x
library(CVXR)
library(dplyr)
library(caret)
load("scrape/data/results.RData")
res = results %>%
filter(Season == 2020) %>%
arrange(Date)
dates = unique(res$Date)
dates
ind
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_0_dates.R', echo=TRUE)
library(CVXR)
library(dplyr)
library(caret)
load("scrape/data/results.RData")
res = results %>%
filter(Season == 2020) %>%
arrange(Date)
dates = unique(res$Date)
library(CVXR)
library(dplyr)
library(caret)
load("scrape/data/results.RData")
res = results %>%
filter(Season == 2020) %>%
arrange(Date)
dates = unique(res$Date)
k=2
load("2020/data/input.RData")
lines = match_dates %>%
filter(Date < dates[k])
lines1 = lines$Lines1 %>%
unlist()
lines2 = lines$Lines2 %>%
unlist()
ind = lines$Ind
ind
x = x[ind]
y = y[ind]
i = i[ind]
j = j[ind]
x
y
i
j
dates
lines = match_dates %>%
filter(Date < dates[k])
lines1 = lines$Lines1 %>%
unlist()
lines2 = lines$Lines2 %>%
unlist()
lines
k
dates[1]
dates[2]
lines = match_dates %>%
filter(Date < dates[k])
lines1 = lines$Lines1 %>%
unlist()
lines2 = lines$Lines2 %>%
unlist()
ind = lines$Ind
x = x[ind]
y = y[ind]
i = i[ind]
j = j[ind]
goals = c(x, y)
alpha = as.factor(c(i, j))
beta = as.factor(c(j, i))
gamma = c(rep(1, N), rep(0, N))
df = data.frame(alpha, beta, gamma)
dmy = dummyVars(" ~ .", data = df)
gamma = c(rep(1, N), rep(0, N))
goals = c(x, y)
alpha = as.factor(c(i, j))
beta = as.factor(c(j, i))
gamma = c(rep(1, N), rep(0, N))
gamma
N
length(ind)
goals = c(x, y)
alpha = as.factor(c(i, j))
beta = as.factor(c(j, i))
gamma = c(rep(1, length(ind)), rep(0, length(ind)))
df = data.frame(alpha, beta, gamma)
dmy = dummyVars(" ~ .", data = df)
M = as.matrix(data.frame(predict(dmy, newdata = df)))
t0 = Sys.time()
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
log_lik = sum_entries(goals * M %*% theta - exp(M %*% theta))
M
M = matrix(0, col = 2*n, nrow = N)
M = matrix(0, ncol = 2*n, nrow = N)
load("2020/data/input.RData")
M = matrix(0, ncol = 2*n, nrow = N)
M
k=1
alpha = rep(0, n)
beta = rep(0, n)
alpha[i[k]] = 1
beta[j[k]] = 1
alpha
beta
M = matrix(0, ncol = 2*n, nrow = N)
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[i[k]] = 1
beta[j[k]] = 1
M[k,] = c(alpha, beta)
}
View(M)
colnames(M) = c(paste0("alpha_", 1:20), paste0("beta_", 1:20))
View(M)
load("2020/data/input.RData")
t0 = Sys.time()
goals = c(x, y)
alpha = as.factor(c(i, j))
beta = as.factor(c(j, i))
gamma = c(rep(1, N), rep(0, N))
# https://stackoverflow.com/questions/4560459/all-levels-of-a-factor-in-a-model-matrix-in-r
df = data.frame(alpha, beta, gamma)
dmy = dummyVars(" ~ .", data = df)
M = as.matrix(data.frame(predict(dmy, newdata = df)))
View(M)
load("2020/data/input.RData")
M1 = matrix(0, ncol = 2*n, nrow = N)
M2 = matrix(0, ncol = 2*n, nrow = N)
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[i[k]] = 1
beta[j[k]] = 1
M1[k,] = c(alpha, beta)
M2[k,] = c(beta, alpha)
}
colnames(M1) = c(paste0("alpha_", 1:20), paste0("beta_", 1:20))
colnames(M2) = c(paste0("alpha_", 1:20), paste0("beta_", 1:20))
M1
load("2020/data/input.RData")
M1 = matrix(0, ncol = 2*n, nrow = N)
M2 = matrix(0, ncol = 2*n, nrow = N)
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[i[k]] = 1
beta[j[k]] = 1
M1[k,] = c(alpha, beta)
M2[k,] = c(beta, alpha)
}
M1 = cbind(M1, rep(1, N))
M2 = cbind(M2, rep(2, N))
colnames(M1) = c(paste0("alpha_", 1:20), paste0("beta_", 1:20), "gamma")
colnames(M2) = c(paste0("alpha_", 1:20), paste0("beta_", 1:20), "gamma")
MM = rbind(M1, M2)
load("2020/data/input.RData")
t0 = Sys.time()
goals = c(x, y)
alpha = as.factor(c(i, j))
beta = as.factor(c(j, i))
gamma = c(rep(1, N), rep(0, N))
# https://stackoverflow.com/questions/4560459/all-levels-of-a-factor-in-a-model-matrix-in-r
df = data.frame(alpha, beta, gamma)
dmy = dummyVars(" ~ .", data = df)
M = as.matrix(data.frame(predict(dmy, newdata = df)))
MM == M
A=MM == M
sum9A
sum(A)
dim(MM)
760*41
760*40
sum(M != MM)
View(A)
M1 = matrix(0, ncol = 2*n, nrow = N)
M2 = matrix(0, ncol = 2*n, nrow = N)
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[i[k]] = 1
beta[j[k]] = 1
M1[k,] = c(alpha, beta)
M2[k,] = c(beta, alpha)
}
M1 = cbind(M1, rep(1, N))
M2 = cbind(M2, rep(0, N))
colnames(M1) = c(paste0("alpha_", 1:20), paste0("beta_", 1:20), "gamma")
colnames(M2) = c(paste0("alpha_", 1:20), paste0("beta_", 1:20), "gamma")
MM = rbind(M1, M2)
M == MM
A=M == MM
sum9A
sum(A)
dim(A)
760*41
load("2020/data/input.RData")
M1 = matrix(0, ncol = 2*n, nrow = N)
M2 = matrix(0, ncol = 2*n, nrow = N)
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[i[k]] = 1
beta[j[k]] = 1
M1[k,] = c(alpha, beta)
M2[k,] = c(beta, alpha)
}
M1 = cbind(M1, rep(1, N))
M2 = cbind(M2, rep(0, N))
colnames(M1) = c(paste0("alpha_", 1:20), paste0("beta_", 1:20), "gamma")
colnames(M2) = c(paste0("alpha_", 1:20), paste0("beta_", 1:20), "gamma")
M = rbind(M1, M2)
goals = c(x, y)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input_mod_0.R', echo=TRUE)
load("2020/data/input_mod_0.RData")
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_0_dates.R', echo=TRUE)
library(CVXR)
library(dplyr)
library(caret)
load("scrape/data/results.RData")
res = results %>%
filter(Season == 2020) %>%
arrange(Date)
dates = unique(res$Date)
mod_0_dates = list()
k=1
load("2020/data/input.RData")
load("2020/data/input_mod_0.RData")
lines = match_dates %>%
filter(Date < dates[k])
lines1 = lines$Lines1 %>%
unlist()
lines2 = lines$Lines2 %>%
unlist()
ind = lines$Ind
M1 = M1[ind,]
M2 = M2[ind,]
M = rbind(M1, M2)
x = x[ind]
y = y[ind]
goals = c(x, y)
dim(M)
M1
load("2020/data/input_mod_0.RData")
m1
M1
ind
k=1
lines = match_dates %>%
filter(Date < dates[k])
lines1 = lines$Lines1 %>%
unlist()
lines2 = lines$Lines2 %>%
unlist()
k=2
lines = match_dates %>%
filter(Date < dates[k])
lines1 = lines$Lines1 %>%
unlist()
lines2 = lines$Lines2 %>%
unlist()
ind = lines$Ind
M1 = M1[ind,]
M2 = M2[ind,]
M = rbind(M1, M2)
x = x[ind]
y = y[ind]
goals = c(x, y)
goals
M1
M2
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
log_lik = sum_entries(goals * M %*% theta - exp(M %*% theta))
objective = Maximize(log_lik)
constraints = list(sum(alpha) - sum(beta) == 0)
problem = Problem(objective, constraints)
solution = solve(problem, solver = "MOSEK")
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_0_dates.R', echo=TRUE)
k
length(dates)
library(CVXR)
library(dplyr)
library(caret)
load("scrape/data/results.RData")
res = results %>%
filter(Season == 2020) %>%
arrange(Date)
dates = unique(res$Date)
mod_0_dates = list()
length(dates)
for(k in 2:length(dates)) {
load("2020/data/input.RData")
load("2020/data/input_mod_0.RData")
lines = match_dates %>%
filter(Date < dates[k])
lines1 = lines$Lines1 %>%
unlist()
lines2 = lines$Lines2 %>%
unlist()
ind = lines$Ind
M1 = M1[ind,]
M2 = M2[ind,]
M = rbind(M1, M2)
x = x[ind]
y = y[ind]
goals = c(x, y)
t0 = Sys.time()
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
log_lik = sum_entries(goals * M %*% theta - exp(M %*% theta))
objective = Maximize(log_lik)
constraints = list(sum(alpha) - sum(beta) == 0)
problem = Problem(objective, constraints)
solution = solve(problem, solver = "MOSEK")
duration = Sys.time() - t0
mod_0 = list(alpha = as.vector(c(solution$getValue(alpha))),
beta = as.vector(solution$getValue(beta)),
gamma = as.vector(solution$getValue(gamma)),
value = solution$value,
duration = duration)
names(mod_0$alpha) = times$Time
names(mod_0$beta) = times$Time
mod_0_dates[[k]] = mod_0
print(paste0(round(100*k/length(dates), 2), "%"))
}
k
rm(k)
k
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input_mod_0.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input_mod_0.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_0_dates.R', echo=TRUE)
mod_0_dates[[1]]
mod_0_dates[[2]]
mod_0_dates[[100]]
exp( 0.2713601)
library(CVXR)
library(caret)
load("2020/data/input.RData")
load("2020/data/input_mod_0.RData")
t0 = Sys.time()
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
log_lik = sum_entries(goals * M %*% theta - exp(M %*% theta))
objective = Maximize(log_lik)
constraints = list(sum(alpha) - sum(beta) == 0)
problem = Problem(objective, constraints)
solution = solve(problem, solver = "MOSEK")
duration = Sys.time() - t0
mod_0 = list(alpha = as.vector(c(solution$getValue(alpha))),
beta = as.vector(solution$getValue(beta)),
gamma = as.vector(solution$getValue(gamma)),
value = solution$value,
duration = duration)
names(mod_0$alpha) = times$Time
names(mod_0$beta) = times$Time
load("2020/data/input.RData")
load("2020/data/input_mod_0.RData")
t0 = Sys.time()
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
log_lik = sum_entries(goals * M %*% theta - exp(M %*% theta))
objective = Maximize(log_lik)
constraints = list(sum(alpha) - sum(beta) == 0)
problem = Problem(objective, constraints)
solution = solve(problem, solver = "MOSEK")
load("2020/data/input.RData")
load("2020/data/input_mod_0.RData")
t0 = Sys.time()
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
log_lik = sum_entries(goals * M %*% theta - exp(M %*% theta))
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/input_mod_0.R', echo=TRUE)
library(CVXR)
library(caret)
load("2020/data/input.RData")
load("2020/data/input_mod_0.RData")
t0 = Sys.time()
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
log_lik = sum_entries(goals * M %*% theta - exp(M %*% theta))
objective = Maximize(log_lik)
constraints = list(sum(alpha) - sum(beta) == 0)
problem = Problem(objective, constraints)
solution = solve(problem, solver = "MOSEK")
duration = Sys.time() - t0
mod_0 = list(alpha = as.vector(c(solution$getValue(alpha))),
beta = as.vector(solution$getValue(beta)),
gamma = as.vector(solution$getValue(gamma)),
value = solution$value,
duration = duration)
names(mod_0$alpha) = times$Time
names(mod_0$beta) = times$Time
save(mod_0, file = "2020/data/mod_0.RData")
mod_0
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/mod_0_dates.R', echo=TRUE)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/predicting_matches_mod_0.R', encoding = 'UTF-8', echo=TRUE)
load("2020/data/input.RData")
load("scrape/data/results.RData")
load("scrape/data/goals.RData")
load("scrape/data/reds.RData")
load("2020/data/mod_dates.RData")
source("2020/pred_mod_0_dates.R")
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/predicting_matches_mod_0.R', encoding = 'UTF-8', echo=TRUE)
predictions_mod_0
predictions_mod_0[[1]]
predictions_mod_0[[1]]
predictions_mod_0[[1]]$Match
predictions_mod_0[[1]]$pred_0
head(predictions_mod_0[[1]]$pred_0)
i = 1
predictions_mod_0[[i]]$Match
load("2020/data/predictions_mod_0.RData")
i = 1
predictions_mod_0[[i]]$Match
head(predictions_mod_0[[i]]$pred_0)
head(predictions_mod_15[[i]]$pred_0)
predictions_mod_0[[i]]$Match
head(predictions_mod_0[[i]]$pred_0)
head(predictions_mod_0[[i]]$pred_15)
head(predictions_mod_0[[i]]$pred_30)
head(predictions_mod_0[[i]]$pred_45)
head(predictions_mod_0[[i]]$pred_60)
head(predictions_mod_0[[i]]$pred_75)
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/predicting_matches_mod_0.R', encoding = 'UTF-8', echo=TRUE)
i = 1
predictions_mod_0[[i]]$Match
head(predictions_mod_0[[i]]$pred_0)
head(predictions_mod_0[[i]]$pred_15)
head(predictions_mod_0[[i]]$pred_30)
head(predictions_mod_0[[i]]$pred_45)
head(predictions_mod_0[[i]]$pred_60)
head(predictions_mod_0[[i]]$pred_75)
i = 100
predictions_mod_0[[i]]$Match
head(predictions_mod_0[[i]]$pred_0)
head(predictions_mod_0[[i]]$pred_15)
head(predictions_mod_0[[i]]$pred_30)
head(predictions_mod_0[[i]]$pred_45)
head(predictions_mod_0[[i]]$pred_60)
head(predictions_mod_0[[i]]$pred_75)
predictions_mod_0[[i]]$Match
head(predictions_mod_0[[i]]$pred_0)
predictions_mod_0[[i]]$pred_0
i = 200
predictions_mod_0[[i]]$Match
head(predictions_mod_0[[i]]$pred_0)
head(predictions_mod_0[[i]]$pred_15)
head(predictions_mod_0[[i]]$pred_30)
head(predictions_mod_0[[i]]$pred_45)
head(predictions_mod_0[[i]]$pred_60)
head(predictions_mod_0[[i]]$pred_75)
source("2020/pred_mod_1.R")
source("2020/pred_mod_0.R")
pred_mod_0(home_team = "Flamengo", away_team = "Internacional", score_home = 0, score_away = 0)
pred_mod_0(home_team = "Fluminense", away_team = "Red Bull Bragantino", score_home = 0, score_away = 0)
i = 200
predictions_mod_0[[i]]$Match
head(predictions_mod_0[[i]]$pred_0)
i = 250
predictions_mod_0[[i]]$Match
head(predictions_mod_0[[i]]$pred_0)
head(predictions_mod_0[[i]]$pred_15)
head(predictions_mod_0[[i]]$pred_30)
head(predictions_mod_0[[i]]$pred_45)
head(predictions_mod_0[[i]]$pred_60)
head(predictions_mod_0[[i]]$pred_75)
head(predictions_mod_0[[i]]$pred_0)
View(predictions_mod_0[[i]]$pred_0)
load("2020/data/mod_dates.RData")
load("~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/data/mod_dates.RData")
View(mod_dates)
mod_dates
source('~/GitHub/soccer-live-predictions/soccer-live-predictions/2020/predicting_matches_mod_0.R', encoding = 'UTF-8', echo=TRUE)
load("2020/data/predictions_mod_0.RData")
i = 250
predictions_mod_0[[i]]$Match
head(predictions_mod_0[[i]]$pred_0)
head(predictions_mod_0[[i]]$pred_15)
head(predictions_mod_0[[i]]$pred_30)
head(predictions_mod_0[[i]]$pred_45)
head(predictions_mod_0[[i]]$pred_60)
head(predictions_mod_0[[i]]$pred_0)
head(predictions_mod_0[[i]]$pred_15)
head(predictions_mod_0[[i]]$pred_30)
head(predictions_mod_0[[i]]$pred_45)
head(predictions_mod_0[[i]]$pred_60)
head(predictions_mod_0[[i]]$pred_75)
