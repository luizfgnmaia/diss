tmp_x1[(mandante$Minuto[m]+1):(45+U1[k]+1)] = tmp_x1[mandante$Minuto[m]]+1
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y1[(visitante$Minuto[m]+1):(45+U1[k]+1)] = tmp_y1[visitante$Minuto[m]]+1
}
}
x1s[[k]] = tmp_x1
y1s[[k]] = tmp_y1
} else {
x1s[[k]] = rep(0, (45+U1[k]+1))
y1s[[k]] = rep(0, (45+U1[k]+1))
}
if(nrow(segundo_tempo) > 0) {
tmp_x2 = rep(0, 45+U2[k]+1) # primeira entrada é o minuto 45
tmp_y2 = rep(0, 45+U2[k]+1)
mandante = segundo_tempo %>%
filter(J == 0)
visitante = segundo_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x2[(mandante$Minuto[m]+1-45):(45+U2[k]+1)] = tmp_x2[mandante$Minuto[m]-45]+1
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y2[(visitante$Minuto[m]+1-45):(45+U2[k]+1)] = tmp_y2[visitante$Minuto[m]-45]+1
}
}
x2s[[k]] = tmp_x2
y2s[[k]] = tmp_y2
} else {
x2s[[k]] = rep(0, (45+U2[k]+1))
y2s[[k]] = rep(0, (45+U2[k]+1))
}
}
for(k in 1:N) {
x2s[[k]] = x2s[[k]] + x1s[[k]][length(x1s[[k]])]
y2s[[k]] = y2s[[k]] + y1s[[k]][length(y1s[[k]])]
}
# H1, H2, A1, A2
H1 = list(); H2 = list(); A1 = list(); A2 = list()
for(k in 1:N) {
H1[[k]] = c(as.integer(!J1[[k]]), 0)
H2[[k]] = c(as.integer(!J2[[k]]), 0)
A1[[k]] = c(J1[[k]], 0)
A2[[k]] = c(J2[[k]], 0)
}
H1 = unlist(H1)
H2 = unlist(H2)
A1 = unlist(A1)
A2 = unlist(A2)
times$Time = stringr::str_replace_all(times$Time, "\\s-\\s.*", "")
times$Time[1] = "Athletico-PR"
times$Time[2] = "Atlético-MG"
times$Time[10] = "CSA"
# Voltando a considerar o segundo tempo começando no minuto 0
for(k in 1:N) {
t2[[k]] = t2[[k]] - 45
t2s[[k]] = t2s[[k]] - 45
I2[[k]] = I2[[k]] - 45
}
rm(list = setdiff(ls(), c("U1", "U2", "times", "i", "j", "N", "n", "x", "y",
"t1", "t2", "J1", "J2", "x1", "x2", "y1", "y2", "m1", "m2", "I1", "I2",
"t1s", "t2s", "J1s", "J2s", "x1s", "x2s", "y1s", "y2s", "m1s", "m2s",
"H1", "H2", "A1", "A2")))
save.image("dados_serie_a_2019.RData")
i1
I1
source('~/diss/code/dados_mod_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/diss/code/dados_mod_2.R', echo=TRUE)
source('~/diss/code/dados_serie_a_2019.R', encoding = 'UTF-8', echo=TRUE)
source('~/diss/code/dados_mod_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/diss/code/dados_mod_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/diss/code/dados_mod_2.R', echo=TRUE)
source('~/diss/code/dados_mod_3.R', echo=TRUE)
source('~/diss/code/dados_mod_4.R', echo=TRUE)
source('~/diss/code/mod_0.R', echo=TRUE)
source('~/diss/code/mod_1.R', echo=TRUE)
source('~/diss/code/mod_2.R', echo=TRUE)
source('~/diss/code/mod_3.R', echo=TRUE)
source('~/diss/code/mod_3_Rsolnp.R', echo=TRUE)
library(dplyr)
load("dados_serie_a_2019.RData")
# delta1, delta2, L1, L2, M1_lambda, M1_mu, M2_lambda, M2_mu
diff1 = list()
diff2 = list()
for(k in 1:N) {
diff1[[k]] = diff(I1[[k]])
diff2[[k]] = diff(I2[[k]])
}
delta1 = unlist(diff1)
delta2 = unlist(diff2)
L1 = length(delta1)
L2 = length(delta2)
M1_lambda = matrix(0, ncol = 2*n, nrow = L1)
row = 0
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[i[k]] = 1
beta[j[k]] = 1
tmp = c(alpha, beta)
for(l in 1:length(diff1[[k]])) {
M1_lambda[(row+l),] = tmp
}
row = row + length(diff1[[k]])
}
gamma = rep(1, L1)
M1_lambda = cbind(M1_lambda, gamma)
M1_lambda = M1_lambda[,-1]
colnames(M1_lambda) = c(paste0("alpha_", 2:n), paste0("beta_", 1:n), "gamma")
M2_lambda = matrix(0, ncol = 2*n, nrow = L2)
row = 0
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[i[k]] = 1
beta[j[k]] = 1
tmp = c(alpha, beta)
for(l in 1:length(diff2[[k]])) {
M2_lambda[(row+l),] = tmp
}
row = row + length(diff2[[k]])
}
gamma = rep(1, L2)
M2_lambda = cbind(M2_lambda, gamma)
M2_lambda = M2_lambda[,-1]
colnames(M2_lambda) = c(paste0("alpha_", 2:n), paste0("beta_", 1:n), "gamma")
M1_mu = matrix(0, ncol = 2*n, nrow = L1)
row = 0
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[j[k]] = 1
beta[i[k]] = 1
tmp = c(alpha, beta)
for(l in 1:(length(diff1[[k]]))) {
M1_mu[(row+l),] = tmp
}
row = row + length(diff1[[k]])
}
gamma = rep(0, L1)
M1_mu = cbind(M1_mu, gamma)
M1_mu = M1_mu[,-1]
colnames(M1_mu) = c(paste0("alpha_", 2:n), paste0("beta_", 1:n), "gamma")
M2_mu = matrix(0, ncol = 2*n, nrow = L2)
row = 0
for(k in 1:N) {
alpha = rep(0, n)
beta = rep(0, n)
alpha[j[k]] = 1
beta[i[k]] = 1
tmp = c(alpha, beta)
for(l in 1:(length(diff2[[k]]))) {
M2_mu[(row+l),] = tmp
}
row = row + length(diff2[[k]])
}
gamma = rep(0, L2)
M2_mu = cbind(M2_mu, gamma)
M2_mu = M2_mu[,-1]
colnames(M2_mu) = c(paste0("alpha_", 2:n), paste0("beta_", 1:n), "gamma")
# g1, r1, g2, r2
g1 = unlist(lapply(t1, function(x) length(x < 45)))
r1 = unlist(lapply(t1s, function(x) length(x < 45)))
g2 = unlist(lapply(t2, function(x) length(x < 90)))
r2 = unlist(lapply(t2s, function(x) length(x < 90)))
# c (parâmetro da diferença de gols para o acréscimo do segundo tempo)
c = NULL
for(k in 1:N) {
c[k] = as.integer(abs(x2[[k]][46] - y2[[k]][46]) <= 1)
}
# Removendo os intervalos de tamanho 0
ind1 = which(delta1 == 0)
ind2 = which(delta2 == 0)
delta1 = delta1[-ind1]
delta2 = delta2[-ind2]
M1_lambda = M1_lambda[-ind1,]
M1_mu = M1_mu[-ind1,]
M2_lambda = M2_lambda[-ind2,]
M2_mu = M2_mu[-ind2,]
H1 = H1[-ind1]
A1 = A1[-ind1]
H2 = H2[-ind2]
A2 = A2[-ind2]
L1 = L1 - length(ind1)
L2 = L2 - length(ind2)
ind1
x1[154]
x2[154]
load("resultados.RData")
load("data/resultados.RData")
resultados %>%
filter(Ano == 2019, Campeonato == "Campeonato Brasileiro Série A", Jogo == 154)
ind1
x1[154]
x2[154]
load("data/gols.RData")
gols %>%
filter(Ano == 2019, Campeonato == "Campeonato Brasileiro Série A", Jogo == 154)
ind1
gols %>%
filter(Ano == 2019, Campeonato == "Campeonato Brasileiro Série A") %>% View()
View(resultados)
ind1
x1[154]
x2[154]
não é o jogo 154
load("data/gols.RData")
load("data/resultados.RData")
gols %>%
filter(Ano == 2019, Campeonato == "Campeonato Brasileiro Série A") %>% View()
resultados %>%
filter(Ano == 2019, Campeonato == "Campeonato Brasileiro Série A") %>% View()
ind1
x1[154]
x2[154]
não é o jogo 154
load("data/gols.RData")
load("data/resultados.RData")
gols %>%
filter(Ano == 2019, Campeonato == "Campeonato Brasileiro Série A") %>% View()
a = resultados %>%
filter(Ano == 2019, Campeonato == "Campeonato Brasileiro Série A")
View(a)
x1[31]
x2[31]
gols %>%
filter(Ano == 2019, Campeonato == "Campeonato Brasileiro Série A", Jogo == 1) %>% View()
x[1]
x1
x1[1]
y1[1]
x2[1]
y2[1]
gols %>%
filter(Ano == 2019, Campeonato == "Campeonato Brasileiro Série A") %>% View()
a = resultados %>%
filter(Ano == 2019, Campeonato == "Campeonato Brasileiro Série A")
View(a)
gols %>%
filter(Ano == 2019, Campeonato == "Campeonato Brasileiro Série A") %>% View()
# No jogo 65 da série B de 2018, ocorreu um gol aos 90+8 minutos e o
# jogo teve apenas 4 minutos de acréscimos.
# Em 106 jogos entre 2014 e 2019, ocorreu um gol no último minuto de um
# tempo mas acredito que isso não dê problema.
library(dplyr)
load("data/resultados.RData")
load("data/gols.RData")
# Primeiro tempo
t1 = gols %>%
rename(Acréscimo_Gol = Acréscimo) %>%
filter(!is.na(Acréscimo_Gol),
Tempo == "1º",
Ano >= 2014) %>%
select("Campeonato", "Ano", "Jogo", "Tempo", "Acréscimo_Gol") %>%
left_join(resultados) %>%
rowwise() %>%
mutate(problema = Acréscimo_Gol >= Acréscimos_1) %>%
filter(problema == TRUE)
View(t1)
gols %>%
filter(Ano == 2019, Campeonato == "Campeonato Brasileiro Série A", Jogo == 329) %>% View()
a = resultados %>%
filter(Ano == 2019, Campeonato == "Campeonato Brasileiro Série A", Jogo == 329)
View(a)
x1[[329]]
x2[[329]]
I1[[329]]
H1[[329]]
A1[[329]]
H1[[329]]
library(dplyr)
load("data/resultados.RData")
load("data/gols.RData")
load("data/reds.RData")
#### Resultados
resultados = resultados %>%
filter(Campeonato == "Campeonato Brasileiro Série A",
Ano == 2019) %>%
filter(!is.na(Placar_1))
resultados$ind = 1:nrow(resultados)
copy_resultados = resultados %>%
select(Campeonato, Ano, Jogo, ind)
# U1, U2
U1 = resultados$Acréscimos_1
U2 = resultados$Acréscimos_2
# times, i, j, N, n
times = tibble(Id = 1:length(unique(resultados$Time_1)), Time = sort(unique(resultados$Time_1)))
tmp1 = times %>%
rename(Time_1 = Time,
i = Id)
tmp2 = times %>%
rename(Time_2 = Time,
j = Id)
resultados = resultados %>%
inner_join(tmp1) %>%
inner_join(tmp2) %>%
rename(x = Placar_1,
y = Placar_2) %>%
mutate(k = 1:nrow(.)) %>%
select(k, i, j, x, y)
i = resultados$i; j = resultados$j; x = resultados$x; y = resultados$y
N = nrow(resultados); n = nrow(times)
#### Gols
gols = gols %>%
filter(Campeonato == "Campeonato Brasileiro Série A",
Ano == 2019) %>%
mutate(J = ifelse(Time == "Visitante", 1, 0))
gols$Acréscimo[is.na(gols$Acréscimo)] = 0
gols$Minuto[which(gols$Tempo == "2º")] = gols$Minuto[which(gols$Tempo == "2º")] + 45
gols$Minuto = gols$Minuto + gols$Acréscimo
gols = gols %>%
left_join(copy_resultados)
# t1, t2, J1, J2, x1, x2, y1, y2, m1, m2, I1, I2
gols_primeiro_tempo = gols %>%
filter(Tempo == "1º")
gols_segundo_tempo = gols %>%
filter(Tempo == "2º")
t1 = list(); t2 = list(); J1 = list(); J2 = list()
x1 = list(); x2 = list(); y1 = list(); y2 = list()
m1 = NULL; m2 = NULL
for(k in 1:N) {
primeiro_tempo = gols_primeiro_tempo %>%
filter(ind == k)
segundo_tempo = gols_segundo_tempo %>%
filter(ind == k)
t1[[k]] = primeiro_tempo$Minuto
t2[[k]] = segundo_tempo$Minuto
J1[[k]] = primeiro_tempo$J
J2[[k]] = segundo_tempo$J
m1[k] = nrow(primeiro_tempo)
m2[k] = nrow(segundo_tempo)
if(nrow(primeiro_tempo) > 0) {
tmp_x1 = rep(0, 45+U1[k]+1) # primeira entrada é o minuto 0
tmp_y1 = rep(0, 45+U1[k]+1)
mandante = primeiro_tempo %>%
filter(J == 0)
visitante = primeiro_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x1[(mandante$Minuto[m]+1):(45+U1[k]+1)] = tmp_x1[mandante$Minuto[m]]+1
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y1[(visitante$Minuto[m]+1):(45+U1[k]+1)] = tmp_y1[visitante$Minuto[m]]+1
}
}
x1[[k]] = tmp_x1
y1[[k]] = tmp_y1
} else {
x1[[k]] = rep(0, (45+U1[k]+1))
y1[[k]] = rep(0, (45+U1[k]+1))
}
if(nrow(segundo_tempo) > 0) {
tmp_x2 = rep(0, 45+U2[k]+1) # primeira entrada é o minuto 45
tmp_y2 = rep(0, 45+U2[k]+1)
mandante = segundo_tempo %>%
filter(J == 0)
visitante = segundo_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x2[(mandante$Minuto[m]+1-45):(45+U2[k]+1)] = tmp_x2[mandante$Minuto[m]-45]+1
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y2[(visitante$Minuto[m]+1-45):(45+U2[k]+1)] = tmp_y2[visitante$Minuto[m]-45]+1
}
}
x2[[k]] = tmp_x2
y2[[k]] = tmp_y2
} else {
x2[[k]] = rep(0, (45+U2[k]+1))
y2[[k]] = rep(0, (45+U2[k]+1))
}
}
for(k in 1:N) {
x2[[k]] = x2[[k]] + x1[[k]][length(x1[[k]])]
y2[[k]] = y2[[k]] + y1[[k]][length(y1[[k]])]
}
I1 = list(); I2 = list()
for(k in 1:N) {
I1[[k]] = c(0, t1[[k]], 45+U1[k]) %>%
#unique() %>%
sort()
I2[[k]] = c(45, t2[[k]], 90+U2[k]) %>%
#unique() %>%
sort()
}
#### Reds
reds = reds %>%
filter(Campeonato == "Campeonato Brasileiro Série A",
Ano == 2019) %>%
mutate(J = ifelse(Time == "Visitante", 1, 0))
reds$Acréscimo[is.na(reds$Acréscimo)] = 0
reds$Minuto[which(reds$Tempo == "2º")] = reds$Minuto[which(reds$Tempo == "2º")] + 45
reds$Minuto = reds$Minuto + reds$Acréscimo
reds = reds %>%
inner_join(copy_resultados)
# t1s, t2s, J1s, J2s, x1s, x2s, y1s, y2s, m1s, m2s
reds_primeiro_tempo = reds %>%
filter(Tempo == "1º")
reds_segundo_tempo = reds %>%
filter(Tempo == "2º")
t1s = list(); t2s = list(); J1s = list(); J2s = list()
x1s = list(); x2s = list(); y1s = list(); y2s = list()
m1s = NULL; m2s = NULL
for(k in 1:N) {
primeiro_tempo = reds_primeiro_tempo %>%
filter(ind == k)
segundo_tempo = reds_segundo_tempo %>%
filter(ind == k)
t1s[[k]] = primeiro_tempo$Minuto
t2s[[k]] = segundo_tempo$Minuto
J1s[[k]] = primeiro_tempo$J
J2s[[k]] = segundo_tempo$J
m1s[k] = nrow(primeiro_tempo)
m2s[k] = nrow(segundo_tempo)
if(nrow(primeiro_tempo) > 0) {
tmp_x1 = rep(0, 45+U1[k]+1) # primeira entrada é o minuto 0
tmp_y1 = rep(0, 45+U1[k]+1)
mandante = primeiro_tempo %>%
filter(J == 0)
visitante = primeiro_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x1[(mandante$Minuto[m]+1):(45+U1[k]+1)] = tmp_x1[mandante$Minuto[m]]+1
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y1[(visitante$Minuto[m]+1):(45+U1[k]+1)] = tmp_y1[visitante$Minuto[m]]+1
}
}
x1s[[k]] = tmp_x1
y1s[[k]] = tmp_y1
} else {
x1s[[k]] = rep(0, (45+U1[k]+1))
y1s[[k]] = rep(0, (45+U1[k]+1))
}
if(nrow(segundo_tempo) > 0) {
tmp_x2 = rep(0, 45+U2[k]+1) # primeira entrada é o minuto 45
tmp_y2 = rep(0, 45+U2[k]+1)
mandante = segundo_tempo %>%
filter(J == 0)
visitante = segundo_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x2[(mandante$Minuto[m]+1-45):(45+U2[k]+1)] = tmp_x2[mandante$Minuto[m]-45]+1
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y2[(visitante$Minuto[m]+1-45):(45+U2[k]+1)] = tmp_y2[visitante$Minuto[m]-45]+1
}
}
x2s[[k]] = tmp_x2
y2s[[k]] = tmp_y2
} else {
x2s[[k]] = rep(0, (45+U2[k]+1))
y2s[[k]] = rep(0, (45+U2[k]+1))
}
}
for(k in 1:N) {
x2s[[k]] = x2s[[k]] + x1s[[k]][length(x1s[[k]])]
y2s[[k]] = y2s[[k]] + y1s[[k]][length(y1s[[k]])]
}
# H1, H2, A1, A2
H1 = list(); H2 = list(); A1 = list(); A2 = list()
for(k in 1:N) {
H1[[k]] = c(as.integer(!J1[[k]]), 0)
H2[[k]] = c(as.integer(!J2[[k]]), 0)
A1[[k]] = c(J1[[k]], 0)
A2[[k]] = c(J2[[k]], 0)
}
H1 = unlist(H1)
H2 = unlist(H2)
A1 = unlist(A1)
A2 = unlist(A2)
A1[329]
H1[329]
H1[[329]]
H1
H1[[329]]
A1[[329]]
A1[[328]]
H1[[328]]
H1[[329]]
H1[[329]]
A1[[329]]
H1[ind1]
A1[ind1]
View(resultados)
load("data/resultados.RData")
View(resultados %>% filter(Jogo == 329))
times
source('~/diss/code/dados_mod_1.R', encoding = 'UTF-8', echo=TRUE)
times
time
load("dados_serie_a_2019.RData")
times
source('~/diss/code/dados_mod_1.R', encoding = 'UTF-8', echo=TRUE)
View(M1_lambda)
