}
# score_index_3, score_index_3_st
score_index_3 = list()
for(k in 1:N) {
tmp_score_index = NULL
for(l in 1:(length(lst_int[[k]])-1)) {
tmp_x = lst_x[[k]][lst_int[[k]][l]+1]
tmp_y = lst_y[[k]][lst_int[[k]][l]+1]
tmp_score_index[l] = ifelse(tmp_x == tmp_y, 1,
ifelse(tmp_x - tmp_y >= 1, 2,
ifelse(tmp_x - tmp_y <= -1, 3,
0)))
}
score_index_3[[k]] = tmp_score_index
}
score_index_3_st = list()
for(k in 1:N) {
tmp_score_index = NULL
for(l in 1:(length(lst_int_st[[k]])-1)) {
tmp_x = lst_x[[k]][lst_int_st[[k]][l]+1]
tmp_y = lst_y[[k]][lst_int_st[[k]][l]+1]
tmp_score_index[l] = ifelse(tmp_x == tmp_y, 1,
ifelse(tmp_x - tmp_y >= 1, 2,
ifelse(tmp_x - tmp_y <= -1, 3,
0)))
}
score_index_3_st[[k]] = tmp_score_index
}
# score_index_7 = list()
# for(k in 1:N) {
#   tmp_score_index = NULL
#   for(l in 1:(length(lst_int[[k]])-1)) {
#     tmp_x = lst_x[[k]][lst_int[[k]][l]+1]
#     tmp_y = lst_y[[k]][lst_int[[k]][l]+1]
#     tmp_score_index[l] = ifelse(tmp_x == 0 & tmp_y == 0, 1,
#                  ifelse(tmp_x == 1 & tmp_y == 0, 2,
#                         ifelse(tmp_x == 0 & tmp_y == 1, 3,
#                                ifelse(tmp_x == 1 & tmp_y == 1, 4,
#                                       ifelse(tmp_x - tmp_y == 0 & tmp_x >= 2 & tmp_y >= 2, 5,
#                                              ifelse(tmp_x - tmp_y >= 1 & tmp_x >= 2, 6,
#                                                     ifelse(tmp_x - tmp_y <= -1 & tmp_y >= 2, 7,
#                                                            0)))))))
#   }
#   score_index_7[[k]] = tmp_score_index
# }
# delta, delta_st, L, L_st
tmp = list()
for(k in 1:N) {
tmp[[k]] = diff(lst_int[[k]])
}
delta = unlist(tmp)/90
tmp = list()
for(k in 1:N) {
tmp[[k]] = diff(lst_int_st[[k]])
}
delta_st = unlist(tmp)/90
L = length(delta)
L_st = length(delta_st)
# H, A, H_st, A_st
H = NULL
A = NULL
for(k in 1:N) {
jogo = gols %>%
filter(Jogo == k)
mandante = jogo %>%
filter(Time == "Mandante")
visitante = jogo %>%
filter(Time == "Visitante")
for(l in 1:(length(lst_int[[k]])-1)) {
H = c(H, mandante %>%
filter(Minuto > lst_int[[k]][l],
Minuto <= lst_int[[k]][l+1]) %>%
nrow())
A = c(A, visitante %>%
filter(Minuto > lst_int[[k]][l],
Minuto <= lst_int[[k]][l+1]) %>%
nrow())
}
}
H_st = NULL
A_st = NULL
for(k in 1:N) {
jogo = gols %>%
filter(Jogo == k)
mandante = jogo %>%
filter(Time == "Mandante")
visitante = jogo %>%
filter(Time == "Visitante")
for(l in 1:(length(lst_int_st[[k]])-1)) {
H_st = c(H_st, mandante %>%
filter(Minuto > lst_int_st[[k]][l],
Minuto <= lst_int_st[[k]][l+1]) %>%
nrow())
A_st = c(A_st, visitante %>%
filter(Minuto > lst_int_st[[k]][l],
Minuto <= lst_int_st[[k]][l+1]) %>%
nrow())
}
}
# M1_mod1, M2_mod1, M1_mod1_st, M2_mod1_st, M1_mod_2, M2_mod_2, M1_mod_2_st, M2_mod_2_st
M1_mod1 = matrix(0, ncol = 40, nrow = L)
row = 0
for(k in 1:N) {
alpha = rep(0, 20)
beta = rep(0, 20)
alpha[i[k]] = 1
beta[j[k]] = 1
tmp = c(alpha, beta)
for(l in 1:(length(lst_int[[k]])-1)) {
M1_mod1[(row+l),] = tmp
}
row = row + (length(lst_int[[k]])-1)
}
gamma = rep(1, L)
M1_mod1 = cbind(M1_mod1, gamma)
M1_mod1 = M1_mod1[,-1]
colnames(M1_mod1) = c(paste0("alpha_", 2:20), paste0("beta", 1:20), "gamma")
M2_mod1 = matrix(0, ncol = 40, nrow = L)
row = 0
for(k in 1:N) {
alpha = rep(0, 20)
beta = rep(0, 20)
alpha[j[k]] = 1
beta[i[k]] = 1
tmp = c(alpha, beta)
for(l in 1:(length(lst_int[[k]])-1)) {
M2_mod1[(row+l),] = tmp
}
row = row + (length(lst_int[[k]])-1)
}
gamma = rep(0, L)
M2_mod1 = cbind(M2_mod1, gamma)
M2_mod1 = M2_mod1[,-1]
colnames(M2_mod1) = c(paste0("alpha_", 2:20), paste0("beta", 1:20), "gamma")
M1_mod1_st = matrix(0, ncol = 40, nrow = L_st)
row = 0
for(k in 1:N) {
alpha = rep(0, 20)
beta = rep(0, 20)
alpha[i[k]] = 1
beta[j[k]] = 1
tmp = c(alpha, beta)
for(l in 1:(length(lst_int_st[[k]])-1)) {
M1_mod1_st[(row+l),] = tmp
}
row = row + (length(lst_int_st[[k]])-1)
}
gamma = rep(1, L_st)
M1_mod1_st = cbind(M1_mod1_st, gamma)
M1_mod1_st = M1_mod1_st[,-1]
colnames(M1_mod1_st) = c(paste0("alpha_", 2:20), paste0("beta", 1:20), "gamma")
M2_mod1_st = matrix(0, ncol = 40, nrow = L)
row = 0
for(k in 1:N) {
alpha = rep(0, 20)
beta = rep(0, 20)
alpha[j[k]] = 1
beta[i[k]] = 1
tmp = c(alpha, beta)
for(l in 1:(length(lst_int_st[[k]])-1)) {
M2_mod1_st[(row+l),] = tmp
}
row = row + (length(lst_int_st[[k]])-1)
}
gamma = rep(0, L_st)
M2_mod1_st = cbind(M2_mod1_st, gamma)
M2_mod1_st = M2_mod1_st[,-1]
colnames(M2_mod1_st) = c(paste0("alpha_", 2:20), paste0("beta", 1:20), "gamma")
score_index_3 = unlist(score_index_3)
lambda_10 = rep(0, L)
lambda_01 = rep(0, L)
mu_10 = rep(0, L)
mu_01 = rep(0, L)
lambda_10[which(score_index_3 == 2)] = 1
lambda_01[which(score_index_3 == 3)] = 1
mu_10[which(score_index_3 == 2)] = 1
mu_01[which(score_index_3 == 3)] = 1
zero = rep(0, L)
M1_mod2 = cbind(M1_mod1, lambda_10, lambda_01, zero, zero)
colnames(M1_mod2)[43:44] = c("mu_10", "mu_01")
M2_mod2 = cbind(M2_mod1, zero, zero, mu_10, mu_01)
colnames(M2_mod2)[41:42] = c("lambda_10", "lambda_01")
score_index_3_st = unlist(score_index_3_st)
lambda_10 = rep(0, L_st)
lambda_01 = rep(0, L_st)
mu_10 = rep(0, L_st)
mu_01 = rep(0, L_st)
lambda_10[which(score_index_3_st == 2)] = 1
lambda_01[which(score_index_3_st == 3)] = 1
mu_10[which(score_index_3_st == 2)] = 1
mu_01[which(score_index_3_st == 3)] = 1
zero = rep(0, L_st)
M1_mod2_st = cbind(M1_mod1_st, lambda_10, lambda_01, zero, zero)
colnames(M1_mod2_st)[43:44] = c("mu_10", "mu_01")
M2_mod2_st = cbind(M2_mod1_st, zero, zero, mu_10, mu_01)
colnames(M2_mod2_st)[41:42] = c("lambda_10", "lambda_01")
dim(M2_mod2_st)
dim(M1_mod2_st)
library(dplyr)
load("data/resultados.RData")
load("data/gols.RData")
# i, j, x, y, n, N
resultados = resultados %>%
filter(Campeonato == "Campeonato Brasileiro Série A",
Ano == 2019) %>%
select(-Campeonato, -Ano, -Jogo, -Data)
times = tibble(Id = 1:20, Time = sort(unique(resultados$Time_1)))
tmp1 = times %>%
rename(Time_1 = Time,
i = Id)
tmp2 = times %>%
rename(Time_2 = Time,
j = Id)
resultados = resultados %>%
inner_join(tmp1) %>%
inner_join(tmp2) %>%
rename(x = Placar_1,
y = Placar_2) %>%
mutate(k = 1:nrow(.)) %>%
select(k, i, j, x, y)
i = resultados$i; j = resultados$j; x = resultados$x; y = resultados$y
N = nrow(resultados); n = nrow(times)
# lst_t, lst_J, lst_x, lst_y, lst_int, lst_int_st
gols = gols %>%
filter(Campeonato == "Campeonato Brasileiro Série A",
Ano == 2019) %>%
mutate(Minuto = ifelse(Tempo == "1º", Minuto, Minuto + 45),
t = Minuto/90,
J = ifelse(Time == "Visitante", 1, 0))
lst_t = list()
lst_J = list()
lst_x = list()
lst_y = list()
lst_int = list()
lst_int_st = list()
for(k in 1:N) {
jogo = gols %>%
filter(Jogo == k)
lst_int[[k]] = c(jogo$Minuto, 0, 90) %>%
unique() %>%
sort()
lst_int_st[[k]] = c(jogo$Minuto, 0, 44, 45, 89, 90) %>%
unique() %>%
sort()
if(nrow(jogo) > 0) {
lst_t[[k]] = jogo$t
lst_J[[k]] = jogo$J
tmp_x = rep(0, 91) # primeira entrada é o minuto 0
tmp_y = rep(0, 91)
mandante = jogo %>%
filter(J == 0)
visitante = jogo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x[(mandante$Minuto[m]+1):91] = tmp_x[mandante$Minuto[m]]+1
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y[(visitante$Minuto[m]+1):91] = tmp_y[visitante$Minuto[m]]+1
}
}
lst_x[[k]] = tmp_x
lst_y[[k]] = tmp_y
} else {
lst_t[[k]] = NA
lst_J[[k]] = NA
lst_x[[k]] = rep(0, 91)
lst_y[[k]] = rep(0, 91)
}
}
# score_index_3, score_index_3_st
score_index_3 = list()
for(k in 1:N) {
tmp_score_index = NULL
for(l in 1:(length(lst_int[[k]])-1)) {
tmp_x = lst_x[[k]][lst_int[[k]][l]+1]
tmp_y = lst_y[[k]][lst_int[[k]][l]+1]
tmp_score_index[l] = ifelse(tmp_x == tmp_y, 1,
ifelse(tmp_x - tmp_y >= 1, 2,
ifelse(tmp_x - tmp_y <= -1, 3,
0)))
}
score_index_3[[k]] = tmp_score_index
}
score_index_3_st = list()
for(k in 1:N) {
tmp_score_index = NULL
for(l in 1:(length(lst_int_st[[k]])-1)) {
tmp_x = lst_x[[k]][lst_int_st[[k]][l]+1]
tmp_y = lst_y[[k]][lst_int_st[[k]][l]+1]
tmp_score_index[l] = ifelse(tmp_x == tmp_y, 1,
ifelse(tmp_x - tmp_y >= 1, 2,
ifelse(tmp_x - tmp_y <= -1, 3,
0)))
}
score_index_3_st[[k]] = tmp_score_index
}
# score_index_7 = list()
# for(k in 1:N) {
#   tmp_score_index = NULL
#   for(l in 1:(length(lst_int[[k]])-1)) {
#     tmp_x = lst_x[[k]][lst_int[[k]][l]+1]
#     tmp_y = lst_y[[k]][lst_int[[k]][l]+1]
#     tmp_score_index[l] = ifelse(tmp_x == 0 & tmp_y == 0, 1,
#                  ifelse(tmp_x == 1 & tmp_y == 0, 2,
#                         ifelse(tmp_x == 0 & tmp_y == 1, 3,
#                                ifelse(tmp_x == 1 & tmp_y == 1, 4,
#                                       ifelse(tmp_x - tmp_y == 0 & tmp_x >= 2 & tmp_y >= 2, 5,
#                                              ifelse(tmp_x - tmp_y >= 1 & tmp_x >= 2, 6,
#                                                     ifelse(tmp_x - tmp_y <= -1 & tmp_y >= 2, 7,
#                                                            0)))))))
#   }
#   score_index_7[[k]] = tmp_score_index
# }
# delta, delta_st, L, L_st
tmp = list()
for(k in 1:N) {
tmp[[k]] = diff(lst_int[[k]])
}
delta = unlist(tmp)/90
tmp = list()
for(k in 1:N) {
tmp[[k]] = diff(lst_int_st[[k]])
}
delta_st = unlist(tmp)/90
L = length(delta)
L_st = length(delta_st)
# H, A, H_st, A_st
H = NULL
A = NULL
for(k in 1:N) {
jogo = gols %>%
filter(Jogo == k)
mandante = jogo %>%
filter(Time == "Mandante")
visitante = jogo %>%
filter(Time == "Visitante")
for(l in 1:(length(lst_int[[k]])-1)) {
H = c(H, mandante %>%
filter(Minuto > lst_int[[k]][l],
Minuto <= lst_int[[k]][l+1]) %>%
nrow())
A = c(A, visitante %>%
filter(Minuto > lst_int[[k]][l],
Minuto <= lst_int[[k]][l+1]) %>%
nrow())
}
}
H_st = NULL
A_st = NULL
for(k in 1:N) {
jogo = gols %>%
filter(Jogo == k)
mandante = jogo %>%
filter(Time == "Mandante")
visitante = jogo %>%
filter(Time == "Visitante")
for(l in 1:(length(lst_int_st[[k]])-1)) {
H_st = c(H_st, mandante %>%
filter(Minuto > lst_int_st[[k]][l],
Minuto <= lst_int_st[[k]][l+1]) %>%
nrow())
A_st = c(A_st, visitante %>%
filter(Minuto > lst_int_st[[k]][l],
Minuto <= lst_int_st[[k]][l+1]) %>%
nrow())
}
}
# M1_mod1, M2_mod1, M1_mod1_st, M2_mod1_st, M1_mod_2, M2_mod_2, M1_mod_2_st, M2_mod_2_st
M1_mod1 = matrix(0, ncol = 40, nrow = L)
row = 0
for(k in 1:N) {
alpha = rep(0, 20)
beta = rep(0, 20)
alpha[i[k]] = 1
beta[j[k]] = 1
tmp = c(alpha, beta)
for(l in 1:(length(lst_int[[k]])-1)) {
M1_mod1[(row+l),] = tmp
}
row = row + (length(lst_int[[k]])-1)
}
gamma = rep(1, L)
M1_mod1 = cbind(M1_mod1, gamma)
M1_mod1 = M1_mod1[,-1]
colnames(M1_mod1) = c(paste0("alpha_", 2:20), paste0("beta", 1:20), "gamma")
M2_mod1 = matrix(0, ncol = 40, nrow = L)
row = 0
for(k in 1:N) {
alpha = rep(0, 20)
beta = rep(0, 20)
alpha[j[k]] = 1
beta[i[k]] = 1
tmp = c(alpha, beta)
for(l in 1:(length(lst_int[[k]])-1)) {
M2_mod1[(row+l),] = tmp
}
row = row + (length(lst_int[[k]])-1)
}
gamma = rep(0, L)
M2_mod1 = cbind(M2_mod1, gamma)
M2_mod1 = M2_mod1[,-1]
colnames(M2_mod1) = c(paste0("alpha_", 2:20), paste0("beta", 1:20), "gamma")
M1_mod1_st = matrix(0, ncol = 40, nrow = L_st)
row = 0
for(k in 1:N) {
alpha = rep(0, 20)
beta = rep(0, 20)
alpha[i[k]] = 1
beta[j[k]] = 1
tmp = c(alpha, beta)
for(l in 1:(length(lst_int_st[[k]])-1)) {
M1_mod1_st[(row+l),] = tmp
}
row = row + (length(lst_int_st[[k]])-1)
}
gamma = rep(1, L_st)
M1_mod1_st = cbind(M1_mod1_st, gamma)
M1_mod1_st = M1_mod1_st[,-1]
colnames(M1_mod1_st) = c(paste0("alpha_", 2:20), paste0("beta", 1:20), "gamma")
M2_mod1_st = matrix(0, ncol = 40, nrow = L_st)
row = 0
for(k in 1:N) {
alpha = rep(0, 20)
beta = rep(0, 20)
alpha[j[k]] = 1
beta[i[k]] = 1
tmp = c(alpha, beta)
for(l in 1:(length(lst_int_st[[k]])-1)) {
M2_mod1_st[(row+l),] = tmp
}
row = row + (length(lst_int_st[[k]])-1)
}
gamma = rep(0, L_st)
M2_mod1_st = cbind(M2_mod1_st, gamma)
M2_mod1_st = M2_mod1_st[,-1]
colnames(M2_mod1_st) = c(paste0("alpha_", 2:20), paste0("beta", 1:20), "gamma")
score_index_3 = unlist(score_index_3)
lambda_10 = rep(0, L)
lambda_01 = rep(0, L)
mu_10 = rep(0, L)
mu_01 = rep(0, L)
lambda_10[which(score_index_3 == 2)] = 1
lambda_01[which(score_index_3 == 3)] = 1
mu_10[which(score_index_3 == 2)] = 1
mu_01[which(score_index_3 == 3)] = 1
zero = rep(0, L)
M1_mod2 = cbind(M1_mod1, lambda_10, lambda_01, zero, zero)
colnames(M1_mod2)[43:44] = c("mu_10", "mu_01")
M2_mod2 = cbind(M2_mod1, zero, zero, mu_10, mu_01)
colnames(M2_mod2)[41:42] = c("lambda_10", "lambda_01")
score_index_3_st = unlist(score_index_3_st)
lambda_10 = rep(0, L_st)
lambda_01 = rep(0, L_st)
mu_10 = rep(0, L_st)
mu_01 = rep(0, L_st)
lambda_10[which(score_index_3_st == 2)] = 1
lambda_01[which(score_index_3_st == 3)] = 1
mu_10[which(score_index_3_st == 2)] = 1
mu_01[which(score_index_3_st == 3)] = 1
zero = rep(0, L_st)
M1_mod2_st = cbind(M1_mod1_st, lambda_10, lambda_01, zero, zero)
colnames(M1_mod2_st)[43:44] = c("mu_10", "mu_01")
M2_mod2_st = cbind(M2_mod1_st, zero, zero, mu_10, mu_01)
colnames(M2_mod2_st)[41:42] = c("lambda_10", "lambda_01")
View(M2_mod2_st)
dim(M2_mod2_st)
dim(M1_mod2_st)
# M1_mod3, M2_mod3
ro_1 = NULL
ro_2 = NULL
for(k in 1:N) {
for(l in 1:(length(lst_int_st[[k]])-1)) {
ro_1 = c(ro_1, ifelse(lst_int_st[[k]][l] == 44 & lst_int_st[[k]][l+1] == 45, 1, 0))
}
}
ro_1
length(ro_1)
dim(M1_mod1_st)
# M1_mod3, M2_mod3
ro_1 = NULL
ro_2 = NULL
for(k in 1:N) {
for(l in 1:(length(lst_int_st[[k]])-1)) {
ro_1 = c(ro_1, ifelse(lst_int_st[[k]][l] == 44 & lst_int_st[[k]][l+1] == 45, 1, 0))
ro_2 = c(ro_2, ifelse(lst_int_st[[k]][l] == 89 & lst_int_st[[k]][l+1] == 90, 1, 0))
}
}
ro_1
lst_int_st
lst_int_st[[1]]
lst_int_st[[2]]
M1_mod_3 = cbind(M1_mod2_st, ro_1, ro_2)
View(M1_mod_3)
source('~/diss/code/dataset_serie_a_2019.R', encoding = 'UTF-8', echo=TRUE)
source('~/diss/code/mod_3_CVXR.R', echo=TRUE)
load("sol/mod_2_CVXR.RData")
load("sol/mod_2_CVXR.RData")
length(mod_2_CVXR$par)
plot(mod_2_CVXR$par, mod_2_CVXR$pars[1:45])
plot(exp(mod_2_CVXR$par), exp(mod_2_CVXR$pars[1:45]))
plot(exp(mod_2_CVXR$par), exp(mod_2_CVXR$par[1:45]))
plot(exp(mod_2_CVXR$par), exp(mod_3_CVXR$par[1:45]))
plot(exp(mod_3_CVXR$par), mod_3_Rsolnp$pars)
cor(exp(mod_3_CVXR$par), mod_3_Rsolnp$pars)
View(exp(mod_3_CVXR$par))
source('~/diss/code/mod_3_Rsolnp.R', echo=TRUE)
source('~/diss/code/mod_2_CVXR.R', echo=TRUE)
source('~/diss/code/mod_3_CVXR.R', echo=TRUE)
mod_3_CVXR$duration
