load("data/reds_cbf_serie_a.RData")
load("data/reds_cbf_serie_b.RData")
reds = rbind(reds_cbf_serie_a, reds_cbf_serie_b)
View(reds)
library(dplyr)
library(stringr)
load("data/scrape_reds_cbf_serie_a.RData")
load("data/resultados.RData")
jogo = unlist(lst_jogo)
confronto = unlist(lst_confronto)
ano = unlist(lst_ano)
red = unlist(lst_red)
mandante = str_extract(confronto, ".*(?=\\sX\\s)") %>%
str_replace_all(" / ", "/")
visitante = str_extract(confronto, "(?<=\\sX\\s).*") %>%
str_replace_all(" / ", "/")
split = str_split_fixed(red, " ", 2)
minuto = split[,1] %>%
str_replace_all(":00", "")
split2 = split[,2] %>%
str_split_fixed(" ", 2)
tempo = split2[,1]
tempo[which(!tempo %in% c("1T", "2T", "PJ", "INT"))] = "PJ"
tempo[which(tempo == "INT")] = "2T" # Intervalos estão como 0 minuto do segundo tempo
minuto[which(tempo == "INT")] = 0
tempo = str_replace_all(tempo, "T", "º")
tempo
split
split2[,2]
numero = split2[,2] %>%
str_extract_all(".*(?=\\s)") %>%
unlist()
numero
numero = split2[,2] %>%
str_extract(".*(?=\\s)") %>%
unlist()
numero
numero = split2[,2] %>%
str_sub(start = 1, end = 2)
numero
numero = split2[,2] %>%
str_sub(start = 1, end = 2) %>%
str_squish()
numero
source('~/diss/code/estruturando_reds_cbf_serie_a.R', encoding = 'UTF-8', echo=TRUE)
View(reds_cbf_serie_a)
reds_cbf_serie_a = reds_cbf_serie_a %>%
filter(Minuto != NA)
reds_cbf_serie_a = reds_cbf_serie_a %>%
filter(!is.na(Minuto))
library(dplyr)
library(stringr)
load("data/scrape_reds_cbf_serie_a.RData")
load("data/resultados.RData")
jogo = unlist(lst_jogo)
confronto = unlist(lst_confronto)
ano = unlist(lst_ano)
red = unlist(lst_red)
mandante = str_extract(confronto, ".*(?=\\sX\\s)") %>%
str_replace_all(" / ", "/")
visitante = str_extract(confronto, "(?<=\\sX\\s).*") %>%
str_replace_all(" / ", "/")
split = str_split_fixed(red, " ", 2)
minuto = split[,1] %>%
str_replace_all(":00", "")
split2 = split[,2] %>%
str_split_fixed(" ", 2)
tempo = split2[,1]
tempo[which(!tempo %in% c("1T", "2T", "PJ", "INT"))] = "PJ"
tempo[which(tempo == "INT")] = "2T" # Intervalos estão como 0 minuto do segundo tempo
minuto[which(tempo == "INT")] = 0
tempo = str_replace_all(tempo, "T", "º")
time = split2[,2] %>%
str_extract_all("(?<=\\s\\-\\s).*") %>%
unlist()
numero = split2[,2] %>%
str_sub(start = 1, end = 2) %>%
str_squish()
time2 = NULL
for(i in 1:length(time)) {
time2[i] = ifelse(time[i] == mandante[i], "Mandante",
ifelse(time[i] == visitante[i], "Visitante",
"Erro"))
}
# tibble(mandante, visitante, time, time2, ano) %>% View() # Todos os erros tão em 2014 porque o nome dos times tá completo
tmp = readxl::read_excel("time_manual.xlsx")
time2[1:82] = tmp$V2
resultados = resultados %>%
filter(Campeonato == "Campeonato Brasileiro Série A") %>%
select(Campeonato, Ano, Jogo, Data, Time_1, Placar_1, Placar_2, Time_2)
tib = tibble(Minuto = minuto, Tempo = tempo, Time = time2, Número = numero, Jogo = jogo, Ano = ano)
reds_cbf_serie_a = inner_join(resultados, tib)
primeiro_caractere = substr(minuto, start = 1, stop = 1)
acres = minuto
acres[which(primeiro_caractere != "+")] = NA
acres = str_replace_all(acres, "\\+", "")
reds_cbf_serie_a$Minuto[which(!is.na(acres))] = 45
reds_cbf_serie_a$Acréscimo = acres
reds_cbf_serie_a$Minuto[which(reds_cbf_serie_a$Tempo == "PJ")] = NA
reds_cbf_serie_a = reds_cbf_serie_a %>%
filter(!is.na(Minuto))
library(dplyr)
library(stringr)
load("data/scrape_reds_cbf_serie_a.RData")
load("data/resultados.RData")
jogo = unlist(lst_jogo)
confronto = unlist(lst_confronto)
ano = unlist(lst_ano)
red = unlist(lst_red)
mandante = str_extract(confronto, ".*(?=\\sX\\s)") %>%
str_replace_all(" / ", "/")
visitante = str_extract(confronto, "(?<=\\sX\\s).*") %>%
str_replace_all(" / ", "/")
split = str_split_fixed(red, " ", 2)
minuto = split[,1] %>%
str_replace_all(":00", "")
split2 = split[,2] %>%
str_split_fixed(" ", 2)
tempo = split2[,1]
tempo[which(!tempo %in% c("1T", "2T", "PJ", "INT"))] = "PJ"
tempo[which(tempo == "INT")] = "2T" # Intervalos estão como 0 minuto do segundo tempo
minuto[which(tempo == "INT")] = 0
tempo = str_replace_all(tempo, "T", "º")
time = split2[,2] %>%
str_extract_all("(?<=\\s\\-\\s).*") %>%
unlist()
numero = split2[,2] %>%
str_sub(start = 1, end = 2) %>%
str_squish()
time2 = NULL
for(i in 1:length(time)) {
time2[i] = ifelse(time[i] == mandante[i], "Mandante",
ifelse(time[i] == visitante[i], "Visitante",
"Erro"))
}
# tibble(mandante, visitante, time, time2, ano) %>% View() # Todos os erros tão em 2014 porque o nome dos times tá completo
tmp = readxl::read_excel("time_manual.xlsx")
time2[1:82] = tmp$V2
resultados = resultados %>%
filter(Campeonato == "Campeonato Brasileiro Série A") %>%
select(Campeonato, Ano, Jogo, Data, Time_1, Placar_1, Placar_2, Time_2)
tib = tibble(Minuto = minuto, Tempo = tempo, Time = time2, Número = numero, Jogo = jogo, Ano = ano)
reds_cbf_serie_a = inner_join(resultados, tib)
primeiro_caractere = substr(minuto, start = 1, stop = 1)
acres = minuto
acres[which(primeiro_caractere != "+")] = NA
acres = str_replace_all(acres, "\\+", "")
reds_cbf_serie_a$Minuto[which(!is.na(acres))] = 45
reds_cbf_serie_a$Acréscimo = acres
reds_cbf_serie_a$Minuto[which(reds_cbf_serie_a$Tempo == "PJ")] = NA
reds_cbf_serie_a = reds_cbf_serie_a %>%
filter(!is.na(Minuto)) %>% # tirando os PJ
mutate(Numero = as.integer(Numero)) %>%
filter(!is.na(Numero)) %>%
select(-Numero)
library(dplyr)
library(stringr)
load("data/scrape_reds_cbf_serie_a.RData")
load("data/resultados.RData")
jogo = unlist(lst_jogo)
confronto = unlist(lst_confronto)
ano = unlist(lst_ano)
red = unlist(lst_red)
mandante = str_extract(confronto, ".*(?=\\sX\\s)") %>%
str_replace_all(" / ", "/")
visitante = str_extract(confronto, "(?<=\\sX\\s).*") %>%
str_replace_all(" / ", "/")
split = str_split_fixed(red, " ", 2)
minuto = split[,1] %>%
str_replace_all(":00", "")
split2 = split[,2] %>%
str_split_fixed(" ", 2)
tempo = split2[,1]
tempo[which(!tempo %in% c("1T", "2T", "PJ", "INT"))] = "PJ"
tempo[which(tempo == "INT")] = "2T" # Intervalos estão como 0 minuto do segundo tempo
minuto[which(tempo == "INT")] = 0
tempo = str_replace_all(tempo, "T", "º")
time = split2[,2] %>%
str_extract_all("(?<=\\s\\-\\s).*") %>%
unlist()
numero = split2[,2] %>%
str_sub(start = 1, end = 2) %>%
str_squish()
time2 = NULL
for(i in 1:length(time)) {
time2[i] = ifelse(time[i] == mandante[i], "Mandante",
ifelse(time[i] == visitante[i], "Visitante",
"Erro"))
}
# tibble(mandante, visitante, time, time2, ano) %>% View() # Todos os erros tão em 2014 porque o nome dos times tá completo
tmp = readxl::read_excel("time_manual.xlsx")
time2[1:82] = tmp$V2
resultados = resultados %>%
filter(Campeonato == "Campeonato Brasileiro Série A") %>%
select(Campeonato, Ano, Jogo, Data, Time_1, Placar_1, Placar_2, Time_2)
tib = tibble(Minuto = minuto, Tempo = tempo, Time = time2, Número = numero, Jogo = jogo, Ano = ano)
reds_cbf_serie_a = inner_join(resultados, tib)
primeiro_caractere = substr(minuto, start = 1, stop = 1)
acres = minuto
acres[which(primeiro_caractere != "+")] = NA
acres = str_replace_all(acres, "\\+", "")
reds_cbf_serie_a$Minuto[which(!is.na(acres))] = 45
reds_cbf_serie_a$Acréscimo = acres
reds_cbf_serie_a$Minuto[which(reds_cbf_serie_a$Tempo == "PJ")] = NA
View(reds_cbf_serie_a)
source('~/diss/code/estruturando_reds_cbf_serie_a.R', encoding = 'UTF-8', echo=TRUE)
View(reds_cbf_serie_a)
source('~/diss/code/estruturando_reds_cbf_serie_a.R', encoding = 'UTF-8', echo=TRUE)
source('~/diss/code/estruturando_reds_cbf_serie_b.R', encoding = 'UTF-8', echo=TRUE)
View(reds_cbf_serie_b)
source('~/diss/code/estruturando_reds_cbf_serie_b.R', encoding = 'UTF-8', echo=TRUE)
View(reds_cbf_serie_b)
source('~/diss/code/estruturando_reds_cbf_serie_b.R', encoding = 'UTF-8', echo=TRUE)
View(reds_cbf_serie_b)
library(dplyr)
library(stringr)
load("data/scrape_reds_cbf_serie_b.RData")
load("data/resultados.RData")
jogo = unlist(lst_jogo)
confronto = unlist(lst_confronto)
ano = unlist(lst_ano)
red = unlist(lst_red)
mandante = str_extract(confronto, ".*(?=\\sX\\s)") %>%
str_replace_all(" / ", "/")
visitante = str_extract(confronto, "(?<=\\sX\\s).*") %>%
str_replace_all(" / ", "/")
split = str_split_fixed(red, " ", 2)
minuto = split[,1] %>%
str_replace_all(":00", "")
split2 = split[,2] %>%
str_split_fixed(" ", 2)
tempo = split2[,1]
tempo[which(!tempo %in% c("1T", "2T", "PJ", "INT"))] = "PJ"
tempo[which(tempo == "INT")] = "2T" # Intervalos estão como 0 minuto do segundo tempo
minuto[which(tempo == "INT")] = 0
tempo = str_replace_all(tempo, "T", "º")
time = split2[,2] %>%
str_extract_all("(?<=\\s\\-\\s).*") %>%
unlist()
numero = split2[,2] %>%
str_sub(start = 1, end = 2) %>%
str_squish()
time2 = NULL
for(i in 1:length(time)) {
time2[i] = ifelse(time[i] == mandante[i], "Mandante",
ifelse(time[i] == visitante[i], "Visitante",
"Erro"))
}
tibble(mandante, visitante, time, time2, ano) %>% View()
source('~/diss/code/estruturando_reds_cbf_serie_b.R', encoding = 'UTF-8', echo=TRUE)
View(reds_cbf_serie_b)
source('~/diss/code/estruturando_reds_cbf_serie_b.R', encoding = 'UTF-8', echo=TRUE)
source('~/diss/code/reds.R', echo=TRUE)
View(reds)
load("~/diss/code/data/reds.RData")
View(reds)
table(reds$Minuto)
library(dplyr)
library(stringr)
load("data/scrape_reds_cbf_serie_a.RData")
load("data/resultados.RData")
jogo = unlist(lst_jogo)
confronto = unlist(lst_confronto)
ano = unlist(lst_ano)
red = unlist(lst_red)
mandante = str_extract(confronto, ".*(?=\\sX\\s)") %>%
str_replace_all(" / ", "/")
visitante = str_extract(confronto, "(?<=\\sX\\s).*") %>%
str_replace_all(" / ", "/")
split = str_split_fixed(red, " ", 2)
minuto = split[,1] %>%
str_replace_all(":00", "")
split2 = split[,2] %>%
str_split_fixed(" ", 2)
tempo = split2[,1]
tempo[which(!tempo %in% c("1T", "2T", "PJ", "INT"))] = "PJ"
tempo[which(tempo == "INT")] = "2T" # Intervalos estão como 0 minuto do segundo tempo
minuto[which(tempo == "INT")] = 0
tempo = str_replace_all(tempo, "T", "º")
tempo
table(minuto)
which(minuto == 0)
library(dplyr)
library(stringr)
load("data/scrape_reds_cbf_serie_a.RData")
load("data/resultados.RData")
jogo = unlist(lst_jogo)
confronto = unlist(lst_confronto)
ano = unlist(lst_ano)
red = unlist(lst_red)
mandante = str_extract(confronto, ".*(?=\\sX\\s)") %>%
str_replace_all(" / ", "/")
visitante = str_extract(confronto, "(?<=\\sX\\s).*") %>%
str_replace_all(" / ", "/")
split = str_split_fixed(red, " ", 2)
minuto = split[,1] %>%
str_replace_all(":00", "")
split2 = split[,2] %>%
str_split_fixed(" ", 2)
tempo = split2[,1]
table(tempo)
which(tempo == "INT")
minuto[which(tempo == "INT")]
minuto[which(tempo == "INT")] = 0
minuto[which(tempo == "INT")]
source('~/diss/code/estruturando_reds_cbf_serie_a.R', encoding = 'UTF-8', echo=TRUE)
source('~/diss/code/estruturando_reds_cbf_serie_b.R', encoding = 'UTF-8', echo=TRUE)
source('~/diss/code/reds.R', echo=TRUE)
View(reds)
table(reds$Minuto)
load("data/reds_cbf_serie_a.RData")
load("data/reds_cbf_serie_b.RData")
reds = rbind(reds_cbf_serie_a, reds_cbf_serie_b)
save(reds, file = "data/reds.RData")
table(reds$Minuto)
