gols = gols %>%
filter(Campeonato == "Campeonato Brasileiro Série A",
Ano == 2019) %>%
mutate(J = ifelse(Time == "Visitante", 1, 0))
gols$Acréscimo[is.na(gols$Acréscimo)] = 0
gols$Minuto[which(gols$Tempo == "2º")] = gols$Minuto[which(gols$Tempo == "2º")] + 45
gols$Minuto = gols$Minuto + gols$Acréscimo
# t1, t2, J1, J2, x1, x2, y1, y2, m1, m2, I1, I2
gols_primeiro_tempo = gols %>%
filter(Tempo == "1º")
gols_segundo_tempo = gols %>%
filter(Tempo == "2º")
t1 = list(); t2 = list(); J1 = list(); J2 = list()
x1 = list(); x2 = list(); y1 = list(); y2 = list()
m1 = NULL; m2 = NULL
for(k in 1:N) {
primeiro_tempo = gols_primeiro_tempo %>%
filter(Jogo == k)
segundo_tempo = gols_segundo_tempo %>%
filter(Jogo == k)
t1[[k]] = primeiro_tempo$Minuto
t2[[k]] = segundo_tempo$Minuto
J1[[k]] = primeiro_tempo$J
J2[[k]] = segundo_tempo$J
m1[k] = nrow(primeiro_tempo)
m2[k] = nrow(segundo_tempo)
if(nrow(primeiro_tempo) > 0) {
tmp_x1 = rep(0, 45+T1[k]+1) # primeira entrada é o minuto 0
tmp_y1 = rep(0, 45+T1[k]+1)
mandante = primeiro_tempo %>%
filter(J == 0)
visitante = primeiro_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x1[(mandante$Minuto[m]+1):(45+T1[k]+1)] = tmp_x1[mandante$Minuto[m]]+1
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y1[(visitante$Minuto[m]+1):(45+T1[k]+1)] = tmp_y1[visitante$Minuto[m]]+1
}
}
x1[[k]] = tmp_x1
y1[[k]] = tmp_y1
} else {
x1[[k]] = rep(0, (45+T1[k]+1))
y1[[k]] = rep(0, (45+T1[k]+1))
}
if(nrow(segundo_tempo) > 0) {
tmp_x2 = rep(0, 45+T2[k]+1) # primeira entrada é o minuto 45
tmp_y2 = rep(0, 45+T2[k]+1)
mandante = segundo_tempo %>%
filter(J == 0)
visitante = segundo_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x2[(mandante$Minuto[m]+1-45):(45+T2[k]+1)] = tmp_x2[mandante$Minuto[m]-45]+1
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y2[(visitante$Minuto[m]+1-45):(45+T2[k]+1)] = tmp_y2[visitante$Minuto[m]-45]+1
}
}
x2[[k]] = tmp_x2
y2[[k]] = tmp_y2
} else {
x2[[k]] = rep(0, (45+T2[k]+1))
y2[[k]] = rep(0, (45+T2[k]+1))
}
}
I1 = list(); I2 = list()
for(k in 1:N) {
I1[[k]] = c(0, t1[[k]], 45+T1[k]) %>%
#unique() %>%
sort()
I2[[k]] = c(45, t2[[k]], 90+T2[k]) %>%
#unique() %>%
sort()
}
#### Reds
reds = reds %>%
filter(Campeonato == "Campeonato Brasileiro Série A",
Ano == 2019) %>%
mutate(J = ifelse(Time == "Visitante", 1, 0))
reds$Acréscimo[is.na(reds$Acréscimo)] = 0
reds$Minuto[which(reds$Tempo == "2º")] = reds$Minuto[which(reds$Tempo == "2º")] + 45
reds$Minuto = reds$Minuto + reds$Acréscimo
# t1s, t2s, J1s, J2s, x1s, x2s, y1s, y2s, m1s, m2s
reds_primeiro_tempo = reds %>%
filter(Tempo == "1º")
reds_segundo_tempo = reds %>%
filter(Tempo == "2º")
t1s = list(); t2s = list(); J1s = list(); J2s = list()
x1s = list(); x2s = list(); y1s = list(); y2s = list()
m1s = NULL; m2s = NULL
for(k in 1:N) {
primeiro_tempo = reds_primeiro_tempo %>%
filter(Jogo == k)
segundo_tempo = reds_segundo_tempo %>%
filter(Jogo == k)
t1s[[k]] = primeiro_tempo$Minuto
t2s[[k]] = segundo_tempo$Minuto
J1s[[k]] = primeiro_tempo$J
J2s[[k]] = segundo_tempo$J
m1s[k] = nrow(primeiro_tempo)
m2s[k] = nrow(segundo_tempo)
if(nrow(primeiro_tempo) > 0) {
tmp_x1 = rep(0, 45+T1[k]+1) # primeira entrada é o minuto 0
tmp_y1 = rep(0, 45+T1[k]+1)
mandante = primeiro_tempo %>%
filter(J == 0)
visitante = primeiro_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x1[(mandante$Minuto[m]+1):(45+T1[k]+1)] = tmp_x1[mandante$Minuto[m]]+1
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y1[(visitante$Minuto[m]+1):(45+T1[k]+1)] = tmp_y1[visitante$Minuto[m]]+1
}
}
x1s[[k]] = tmp_x1
y1s[[k]] = tmp_y1
} else {
x1s[[k]] = rep(0, (45+T1[k]+1))
y1s[[k]] = rep(0, (45+T1[k]+1))
}
if(nrow(segundo_tempo) > 0) {
tmp_x2 = rep(0, 45+T2[k]+1) # primeira entrada é o minuto 45
tmp_y2 = rep(0, 45+T2[k]+1)
mandante = segundo_tempo %>%
filter(J == 0)
visitante = segundo_tempo %>%
filter(J == 1)
if(nrow(mandante > 0)) {
for(m in 1:nrow(mandante)) {
tmp_x2[(mandante$Minuto[m]+1-45):(45+T2[k]+1)] = tmp_x2[mandante$Minuto[m]-45]+1
}
}
if(nrow(visitante > 0)) {
for(m in 1:nrow(visitante)) {
tmp_y2[(visitante$Minuto[m]+1-45):(45+T2[k]+1)] = tmp_y2[visitante$Minuto[m]-45]+1
}
}
x2s[[k]] = tmp_x2
y2s[[k]] = tmp_y2
} else {
x2s[[k]] = rep(0, (45+T2[k]+1))
y2s[[k]] = rep(0, (45+T2[k]+1))
}
}
## H1, H2, A1, A2
J1s
J1
H1 = list(); H2 = list(); A1 = list(); A2 = list()
J1
J1[[1]]
!J1[[1]]
as.integer(!J1[[1]])
J1
j1
J1
for(k in 1:N) {
H1[[k]] = c(as.integer(!J1[[k]]), 0)
H2[[k]] = c(as.integer(!J2[[k]]), 0)
A1[[k]] = c(J1[[k]], 0)
A2[[k]] = c(J1[[k]], 0)
}
H1
H2
H1
H2
A1
A2
I1
for(k in 1:N) {
H1[[k]] = c(as.integer(!J1[[k]]), 0)
H2[[k]] = c(as.integer(!J2[[k]]), 0)
A1[[k]] = c(J1[[k]], 0)
A2[[k]] = c(J2[[k]], 0)
}
source('~/diss/code/dados_serie_a_2019.R', encoding = 'UTF-8', echo=TRUE)
library(dplyr)
load("dados_serie_a_2019.RData")
# delta1, delta2, L1, L2, M1_lambda, M1_mu, M2_lambda, M2_mu
diff1 = list()
diff2 = list()
for(k in 1:N) {
diff1[[k]] = diff(I1[[k]])
diff2[[k]] = diff(I2[[k]])
}
delta1 = unlist(diff1)
delta2 = unlist(diff2)
library(dplyr)
load("dados_serie_a_2019.RData")
# delta1, delta2, L1, L2, M1_lambda, M1_mu, M2_lambda, M2_mu
diff1 = list()
diff2 = list()
for(k in 1:N) {
diff1[[k]] = diff(I1[[k]])
diff2[[k]] = diff(I2[[k]])
}
delta1 = unlist(diff1)
delta2 = unlist(diff2)
delta1
L1 = length(delta1)
L2 = length(delta2)
L1
L2
source('~/diss/code/dados_mod_1.R', echo=TRUE)
library(dplyr)
load("dados_serie_a_2019.RData")
# delta1, delta2, L1, L2, M1_lambda, M1_mu, M2_lambda, M2_mu
diff1 = list()
diff2 = list()
for(k in 1:N) {
diff1[[k]] = diff(I1[[k]])
diff2[[k]] = diff(I2[[k]])
}
delta1 = unlist(diff1)
delta2 = unlist(diff2)
L1 = length(delta1)
L2 = length(delta2)
M1_lambda = matrix(0, ncol = 40, nrow = L1)
row = 0
for(k in 1:N) {
alpha = rep(0, 20)
beta = rep(0, 20)
alpha[i[k]] = 1
beta[j[k]] = 1
tmp = c(alpha, beta)
for(l in 1:length(diff1[[k]])) {
M1_lambda[(row+l),] = tmp
}
row = row + length(diff1[[k]])
}
gamma = rep(1, L1)
M1_lambda = cbind(M1_lambda, gamma)
M1_lambda = M1_lambda[,-1]
colnames(M1_lambda) = c(paste0("alpha_", 2:20), paste0("beta", 1:20), "gamma")
M2_lambda = matrix(0, ncol = 40, nrow = L2)
row = 0
for(k in 1:N) {
alpha = rep(0, 20)
beta = rep(0, 20)
alpha[i[k]] = 1
beta[j[k]] = 1
tmp = c(alpha, beta)
for(l in 1:length(diff2[[k]])) {
M2_lambda[(row+l),] = tmp
}
row = row + length(diff2[[k]])
}
gamma = rep(1, L2)
M2_lambda = cbind(M2_lambda, gamma)
M2_lambda = M2_lambda[,-1]
colnames(M2_lambda) = c(paste0("alpha_", 2:20), paste0("beta", 1:20), "gamma")
M1_mu = matrix(0, ncol = 40, nrow = L1)
row = 0
for(k in 1:N) {
alpha = rep(0, 20)
beta = rep(0, 20)
alpha[j[k]] = 1
beta[i[k]] = 1
tmp = c(alpha, beta)
for(l in 1:(length(diff1[[k]]))) {
M1_mu[(row+l),] = tmp
}
row = row + length(diff1[[k]])
}
gamma = rep(0, L1)
M1_mu = cbind(M1_mu, gamma)
M1_mu = M1_mu[,-1]
colnames(M1_mu) = c(paste0("alpha_", 2:20), paste0("beta", 1:20), "gamma")
M2_mu = matrix(0, ncol = 40, nrow = L2)
row = 0
for(k in 1:N) {
alpha = rep(0, 20)
beta = rep(0, 20)
alpha[j[k]] = 1
beta[i[k]] = 1
tmp = c(alpha, beta)
for(l in 1:(length(diff2[[k]]))) {
M2_mu[(row+l),] = tmp
}
row = row + length(diff2[[k]])
}
gamma = rep(0, L2)
M2_mu = cbind(M2_mu, gamma)
M2_mu = M2_mu[,-1]
colnames(M2_mu) = c(paste0("alpha_", 2:20), paste0("beta", 1:20), "gamma")
# r1, s1, r2, s2
r1 = unlist(lapply(t1, function(x) length(x < 45)))
s1 = unlist(lapply(t1s, function(x) length(x < 45)))
r2 = unlist(lapply(t2, function(x) length(x < 90)))
s2 = unlist(lapply(t2s, function(x) length(x < 90)))
rm(list = setdiff(ls(), c("delta1", "delta2", "L1", "L2", "M1_lambda", "M1_mu", "M2_lambda",
"M2_mu", "r1", "s1", "r2", "s2")))
save.image("dados_mod_1.RData")
library(dplyr)
library(CVXR)
load("dados_serie_a_2019.RData")
load("dados_mod_1.RData")
#delta1 = delta1/90
#delta2 = delta2/90
t0 = Sys.time()
alpha = Variable(19)
beta = Variable(20)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
tau = Variable(2)
phi = Variable(2)
omega = Variable(2)
pi1 = tau[1] + phi[1] * r1 + omega[1] * s1
pi2 = tau[2] + phi[2] * r2 + omega[2] * s2
H1
source('~/diss/code/mod_1.R', echo=TRUE)
H1
source('~/diss/code/dados_serie_a_2019.R', encoding = 'UTF-8', echo=TRUE)
source('~/diss/code/dados_mod_1.R', echo=TRUE)
source('~/diss/code/mod_1.R', echo=TRUE)
source('~/diss/code/dados_mod_2.R', echo=TRUE)
source('~/diss/code/mod_2.R', echo=TRUE)
source('~/diss/code/mod_2.R', echo=TRUE)
source('~/diss/code/mod_2.R', echo=TRUE)
rank(mod_2$par[1:20])
rank(mod_2_CVXR$par[1:20])
rank(mod_2$par[21:40])
rank(mod_2_CVXR$par[21:40])
library(dplyr)
library(CVXR)
load("dados_serie_a_2019.RData")
load("dados_mod_1.RData")
# delta1 = delta1/90
# delta2 = delta2/90
t0 = Sys.time()
alpha = Variable(19)
beta = Variable(20)
gamma = Variable(1)
theta = vstack(alpha, beta, gamma)
tau = Variable(2)
phi = Variable(2)
omega = Variable(2)
pi1 = tau[1] + phi[1] * r1 + omega[1] * s1
pi2 = tau[2] + phi[2] * r2 + omega[2] * s2
log_lik = -t(delta1)%*%exp(M1_lambda%*%theta) -t(delta1)%*%exp(M1_mu%*%theta) -t(delta2)%*%exp(M2_lambda%*%theta) -t(delta2)%*%exp(M2_mu%*%theta) +
t(H1)%*%M1_lambda%*%theta +t(A1)%*%M1_mu%*%theta + t(H2)%*%M2_lambda%*%theta + t(A2)%*%M2_mu%*%theta +
t(T1) %*% log(pi1) + t(T2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik)
problem = Problem(objective)
set.seed(1)
solution = solve(problem, solver = "MOSEK")
duration = Sys.time() - t0
mod_1 = list(par = tibble(par = c(paste0("alpha_", 1:20), paste0("beta_", 1:20),
"omega", "tau_1", "tau_2", "phi_1", "phi_2", "omega_1", "omega_2"),
val = c(0, solution$getValue(alpha), solution$getValue(beta), solution$getValue(gamma),
solution$getValue(tau), solution$getValue(phi), solution$getValue(omega))),
value = solution$value,
duration = duration)
save(mod_1, file = "mod_1.RData")
library(ggplot2)
load("dixon robinson/sol/mod_1_CVXR.RData")
tibble(new = mod_1$par[1:41], old = mod_1_CVXR$par, par = c(rep("alpha", 20), rep("beta", 20), "gamma")) %>%
ggplot(aes(x = new, y = old, col = par)) +
geom_point(size = 2) +
theme_bw()
mod_1$value
mod_1$par
tibble(new = mod_1$par$val[1:41], old = mod_1_CVXR$par, par = c(rep("alpha", 20), rep("beta", 20), "gamma")) %>%
ggplot(aes(x = new, y = old, col = par)) +
geom_point(size = 2) +
theme_bw()
library(dplyr)
library(CVXR)
load("dados_serie_a_2019.RData")
load("dados_mod_2.RData")
# delta1 = delta1/90
# delta2 = delta2/90
t0 = Sys.time()
alpha = Variable(19)
beta = Variable(20)
gamma = Variable(1)
lambda_xy = Variable(2)
mu_xy = Variable(2)
theta = vstack(alpha, beta, gamma, lambda_xy, mu_xy)
tau = Variable(2)
phi = Variable(2)
omega = Variable(2)
pi1 = tau[1] + phi[1] * r1 + omega[1] * s1
pi2 = tau[2] + phi[2] * r2 + omega[2] * s2
log_lik = -t(delta1)%*%exp(M1_lambda%*%theta) -t(delta1)%*%exp(M1_mu%*%theta) -t(delta2)%*%exp(M2_lambda%*%theta) -t(delta2)%*%exp(M2_mu%*%theta) +
t(H1)%*%M1_lambda%*%theta +t(A1)%*%M1_mu%*%theta + t(H2)%*%M2_lambda%*%theta + t(A2)%*%M2_mu%*%theta +
t(T1) %*% log(pi1) + t(T2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik)
problem = Problem(objective)
set.seed(1)
solution = solve(problem, solver = "MOSEK")
duration = Sys.time() - t0
mod_2 = list(par = tibble(par = c(paste0("alpha_", 1:20), paste0("beta_", 1:20),
"lambda_10", "lambda_01", "mu_10", "mu_01",
"omega", "tau_1", "tau_2", "phi_1", "phi_2", "omega_1", "omega_2"),
val = c(0, solution$getValue(alpha), solution$getValue(beta), solution$getValue(gamma),
solution$getValue(tau), solution$getValue(phi), solution$getValue(omega))),
value = solution$value,
duration = duration)
library(dplyr)
library(CVXR)
load("dados_serie_a_2019.RData")
load("dados_mod_2.RData")
# delta1 = delta1/90
# delta2 = delta2/90
t0 = Sys.time()
alpha = Variable(19)
beta = Variable(20)
gamma = Variable(1)
lambda_xy = Variable(2)
mu_xy = Variable(2)
theta = vstack(alpha, beta, gamma, lambda_xy, mu_xy)
tau = Variable(2)
phi = Variable(2)
omega = Variable(2)
pi1 = tau[1] + phi[1] * r1 + omega[1] * s1
pi2 = tau[2] + phi[2] * r2 + omega[2] * s2
log_lik = -t(delta1)%*%exp(M1_lambda%*%theta) -t(delta1)%*%exp(M1_mu%*%theta) -t(delta2)%*%exp(M2_lambda%*%theta) -t(delta2)%*%exp(M2_mu%*%theta) +
t(H1)%*%M1_lambda%*%theta +t(A1)%*%M1_mu%*%theta + t(H2)%*%M2_lambda%*%theta + t(A2)%*%M2_mu%*%theta +
t(T1) %*% log(pi1) + t(T2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik)
problem = Problem(objective)
set.seed(1)
solution = solve(problem, solver = "MOSEK")
duration = Sys.time() - t0
mod_2 = list(par = tibble(par = c(paste0("alpha_", 1:20), paste0("beta_", 1:20),
"lambda_10", "lambda_01", "mu_10", "mu_01",
"omega", "tau_1", "tau_2", "phi_1", "phi_2", "omega_1", "omega_2"),
val = c(0, solution$getValue(alpha), solution$getValue(beta), solution$getValue(gamma),
solution$getValue(lambda_xy), solution$getValue(mu_xy),
solution$getValue(tau), solution$getValue(phi), solution$getValue(omega))),
value = solution$value,
duration = duration)
save(mod_2, file = "mod_2.RData")
mod_2
load("dixon robinson/sol/mod_2_CVXR.RData")
tibble(new = mod_2$par$val[1:41], old = mod_2_CVXR$par[1:41],
par = c(rep("alpha", 20), rep("beta", 20), "gamma")) %>%
ggplot(aes(x = new, y = old, col = par)) +
geom_point(size = 2) +
theme_bw()
mod_2$par$val[42:45]
mod_2_CVXR$par[42:45]
load("mod_1.RData")
mod_2$par$val[46:51]
mod_1$par$val[42:47]
rank(mod_2$par$val[1:20])
rank(mod_2_CVXR$par[1:20])
rank(mod_2$par$val[21:40])
rank(mod_2_CVXR$par[21:40])
library(dplyr)
library(CVXR)
load("dados_serie_a_2019.RData")
load("dados_mod_2.RData")
# delta1 = delta1/90
# delta2 = delta2/90
t0 = Sys.time()
alpha = Variable(19)
beta = Variable(20)
gamma = Variable(1)
lambda_xy = Variable(2)
mu_xy = Variable(2)
theta = vstack(alpha, beta, gamma, lambda_xy, mu_xy)
tau = Variable(2)
phi = Variable(2)
omega = Variable(2)
pi1 = tau[1] + phi[1] * r1 + omega[1] * s1
pi2 = tau[2] + phi[2] * r2 + omega[2] * s2
log_lik = -t(delta1)%*%exp(M1_lambda%*%theta) -t(delta1)%*%exp(M1_mu%*%theta) -t(delta2)%*%exp(M2_lambda%*%theta) -t(delta2)%*%exp(M2_mu%*%theta) +
t(H1)%*%M1_lambda%*%theta +t(A1)%*%M1_mu%*%theta + t(H2)%*%M2_lambda%*%theta + t(A2)%*%M2_mu%*%theta +
t(T1) %*% log(pi1) + t(T2) %*% log(pi2) - sum_entries(pi1) - sum_entries(pi2)
objective = Maximize(log_lik)
problem = Problem(objective)
set.seed(1)
solution = solve(problem, solver = "MOSEK")
duration = Sys.time() - t0
mod_2 = list(par = tibble(par = c(paste0("alpha_", 1:20), paste0("beta_", 1:20),
"lambda_10", "lambda_01", "mu_10", "mu_01",
"omega", "tau_1", "tau_2", "phi_1", "phi_2", "omega_1", "omega_2"),
val = c(0, solution$getValue(alpha), solution$getValue(beta), solution$getValue(gamma),
solution$getValue(lambda_xy), solution$getValue(mu_xy),
solution$getValue(tau), solution$getValue(phi), solution$getValue(omega))),
value = solution$value,
duration = duration)
save(mod_2, file = "mod_2.RData")
library(ggplot2)
load("dixon robinson/sol/mod_2_CVXR.RData")
tibble(new = mod_2$par$val[1:41], old = mod_2_CVXR$par[1:41],
par = c(rep("alpha", 20), rep("beta", 20), "gamma")) %>%
ggplot(aes(x = new, y = old, col = par)) +
geom_point(size = 2) +
theme_bw()
mod_2$par$val[42:45]
mod_2_CVXR$par[42:45]
load("mod_1.RData")
mod_2$par$val[46:51]
mod_1$par$val[42:47]
rank(mod_2$par$val[1:20])
rank(mod_2_CVXR$par[1:20])
rank(mod_2$par$val[21:40])
rank(mod_2_CVXR$par[21:40])
