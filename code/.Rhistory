mu_01 = c(NA,
NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[49],
mod_5_Rsolnp$pars[51]),
mu_21 = c(NA,
NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[52]),
mu_12 = c(NA,
NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[53]))
kable(param, digits = 4, caption = "Demais parâmetros")
veross = tibble(Modelo = names(alphas)[-c(1,2)],
log_likelihood = c(-mod_0_Rsolnp$values[length(mod_0_Rsolnp$values)],
-mod_1_Rsolnp$values[length(mod_1_Rsolnp$values)],
-mod_2_Rsolnp$values[length(mod_2_Rsolnp$values)],
-mod_3_Rsolnp$values[length(mod_3_Rsolnp$values)],
-mod_4_Rsolnp$values[length(mod_4_Rsolnp$values)],
-mod_5_Rsolnp$values[length(mod_5_Rsolnp$values)]))
kable(veross, digits = 4, caption = "log Verossimilhanças com os parâmetros encontrados")
options(OutDec = ",")
options(knitr.kable.NA = "-")
library(dplyr)
library(knitr)
load("serie_a_2019.RData")
load("sol/mod_0_glm.RData")
load("sol/mod_0_Rsolnp.RData")
load("sol/mod_1_Rsolnp.RData")
load("sol/mod_2_Rsolnp.RData")
load("sol/mod_3_Rsolnp.RData")
load("sol/mod_4_Rsolnp.RData")
load("sol/mod_5_Rsolnp.RData")
alphas = tibble(Time = times$Time,
glm = c(1, exp(mod_0_glm$coefficients[21:39])),
mod_0 = mod_0_Rsolnp$pars[1:20],
mod_1 = mod_1_Rsolnp$pars[1:20],
mod_2 = mod_2_Rsolnp$pars[1:20],
mod_3 = mod_3_Rsolnp$pars[1:20],
mod_4 = mod_4_Rsolnp$pars[1:20],
mod_5 = mod_5_Rsolnp$pars[1:20])
kable(alphas, digits = 4, caption = "Alphas")
betas = tibble(Time = times$Time,
glm = exp(mod_0_glm$coefficients[1:20]),
mod_0 = mod_0_Rsolnp$pars[21:40],
mod_1 = mod_1_Rsolnp$pars[21:40],
mod_2 = mod_2_Rsolnp$pars[21:40],
mod_3 = mod_3_Rsolnp$pars[21:40],
mod_4 = mod_4_Rsolnp$pars[21:40],
mod_5 = mod_5_Rsolnp$pars[21:40])
kable(betas, digits = 4, caption = "Betas")
param = tibble(Modelo = names(alphas)[-1],
gamma = c(mod_0_glm$coefficients[40],
mod_0_Rsolnp$pars[41],
mod_1_Rsolnp$pars[41],
mod_2_Rsolnp$pars[41],
mod_3_Rsolnp$pars[41],
mod_4_Rsolnp$pars[41],
mod_5_Rsolnp$pars[41]),
csi_1 = c(NA,
NA,
NA,
mod_2_Rsolnp$pars[42],
mod_3_Rsolnp$pars[42],
mod_4_Rsolnp$pars[42],
mod_5_Rsolnp$pars[42]),
csi_2 = c(NA,
NA,
NA,
mod_2_Rsolnp$pars[43],
mod_3_Rsolnp$pars[43],
mod_4_Rsolnp$pars[43],
mod_5_Rsolnp$pars[43]),
ro_1 = c(NA,
NA,
NA,
NA,
mod_3_Rsolnp$pars[44],
mod_4_Rsolnp$pars[44],
mod_5_Rsolnp$pars[44]),
ro_2 = c(NA,
NA,
NA,
NA,
mod_3_Rsolnp$pars[45],
mod_4_Rsolnp$pars[45],
mod_5_Rsolnp$pars[45]),
lambda_10 = c(NA,
NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[46],
mod_5_Rsolnp$pars[46]),
lambda_01 = c(NA,
NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[47],
mod_5_Rsolnp$pars[47]),
lambda_21 = c(NA,
NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[48]),
lambda_12 = c(NA,
NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[49]),
mu_10 = c(NA,
NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[48],
mod_5_Rsolnp$pars[50]),
mu_01 = c(NA,
NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[49],
mod_5_Rsolnp$pars[51]),
mu_21 = c(NA,
NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[52]),
mu_12 = c(NA,
NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[53]))
kable(param, digits = 4, caption = "Demais parâmetros")
veross = tibble(Modelo = names(alphas)[-c(1,2)],
log_likelihood = c(-mod_0_Rsolnp$values[length(mod_0_Rsolnp$values)],
-mod_1_Rsolnp$values[length(mod_1_Rsolnp$values)],
-mod_2_Rsolnp$values[length(mod_2_Rsolnp$values)],
-mod_3_Rsolnp$values[length(mod_3_Rsolnp$values)],
-mod_4_Rsolnp$values[length(mod_4_Rsolnp$values)],
-mod_5_Rsolnp$values[length(mod_5_Rsolnp$values)]))
kable(veross, digits = 4, caption = "log Verossimilhanças com os parâmetros encontrados")
options(OutDec = ",")
options(knitr.kable.NA = "-")
library(dplyr)
library(knitr)
load("serie_a_2019.RData")
load("sol/mod_0_glm.RData")
load("sol/mod_0_Rsolnp.RData")
load("sol/mod_1_Rsolnp.RData")
load("sol/mod_2_Rsolnp.RData")
load("sol/mod_3_Rsolnp.RData")
load("sol/mod_4_Rsolnp.RData")
load("sol/mod_5_Rsolnp.RData")
alphas = tibble(Time = times$Time,
glm = c(1, exp(mod_0_glm$coefficients[21:39])),
mod_0 = mod_0_Rsolnp$pars[1:20],
mod_1 = mod_1_Rsolnp$pars[1:20],
mod_2 = mod_2_Rsolnp$pars[1:20],
mod_3 = mod_3_Rsolnp$pars[1:20],
mod_4 = mod_4_Rsolnp$pars[1:20],
mod_5 = mod_5_Rsolnp$pars[1:20])
kable(alphas, digits = 4, caption = "Alphas")
betas = tibble(Time = times$Time,
glm = exp(mod_0_glm$coefficients[1:20]),
mod_0 = mod_0_Rsolnp$pars[21:40],
mod_1 = mod_1_Rsolnp$pars[21:40],
mod_2 = mod_2_Rsolnp$pars[21:40],
mod_3 = mod_3_Rsolnp$pars[21:40],
mod_4 = mod_4_Rsolnp$pars[21:40],
mod_5 = mod_5_Rsolnp$pars[21:40])
kable(betas, digits = 4, caption = "Betas")
param = tibble(Modelo = names(alphas)[-1],
gamma = c(exp(mod_0_glm$coefficients[40]),
mod_0_Rsolnp$pars[41],
mod_1_Rsolnp$pars[41],
mod_2_Rsolnp$pars[41],
mod_3_Rsolnp$pars[41],
mod_4_Rsolnp$pars[41],
mod_5_Rsolnp$pars[41]),
csi_1 = c(NA,
NA,
NA,
mod_2_Rsolnp$pars[42],
mod_3_Rsolnp$pars[42],
mod_4_Rsolnp$pars[42],
mod_5_Rsolnp$pars[42]),
csi_2 = c(NA,
NA,
NA,
mod_2_Rsolnp$pars[43],
mod_3_Rsolnp$pars[43],
mod_4_Rsolnp$pars[43],
mod_5_Rsolnp$pars[43]),
ro_1 = c(NA,
NA,
NA,
NA,
mod_3_Rsolnp$pars[44],
mod_4_Rsolnp$pars[44],
mod_5_Rsolnp$pars[44]),
ro_2 = c(NA,
NA,
NA,
NA,
mod_3_Rsolnp$pars[45],
mod_4_Rsolnp$pars[45],
mod_5_Rsolnp$pars[45]),
lambda_10 = c(NA,
NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[46],
mod_5_Rsolnp$pars[46]),
lambda_01 = c(NA,
NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[47],
mod_5_Rsolnp$pars[47]),
lambda_21 = c(NA,
NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[48]),
lambda_12 = c(NA,
NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[49]),
mu_10 = c(NA,
NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[48],
mod_5_Rsolnp$pars[50]),
mu_01 = c(NA,
NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[49],
mod_5_Rsolnp$pars[51]),
mu_21 = c(NA,
NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[52]),
mu_12 = c(NA,
NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[53]))
kable(param, digits = 4, caption = "Demais parâmetros")
veross = tibble(Modelo = names(alphas)[-c(1,2)],
log_likelihood = c(-mod_0_Rsolnp$values[length(mod_0_Rsolnp$values)],
-mod_1_Rsolnp$values[length(mod_1_Rsolnp$values)],
-mod_2_Rsolnp$values[length(mod_2_Rsolnp$values)],
-mod_3_Rsolnp$values[length(mod_3_Rsolnp$values)],
-mod_4_Rsolnp$values[length(mod_4_Rsolnp$values)],
-mod_5_Rsolnp$values[length(mod_5_Rsolnp$values)]))
kable(veross, digits = 4, caption = "log Verossimilhanças com os parâmetros encontrados")
library(Rsolnp)
load("serie_a_2019.RData")
log_lik <- function(par) {
log_lik_k <- function(k) {
lambda_xy <- function(t) {
x = lst_x[[k]][round(90*t)+1]
y = lst_y[[k]][round(90*t)+1]
ifelse(x==1 & y==0, lambda_10,
ifelse(x==0 & y==1, lambda_01,
ifelse(x+y>1 & x-y>=1, lambda_21,
ifelse(x+y>1 & x-y<=-1, lambda_12, 1))))
}
mu_xy <- function(t) {
x = lst_x[[k]][round(90*t)+1]
y = lst_y[[k]][round(90*t)+1]
ifelse(x==1 & y==0, mu_10,
ifelse(x==0 & y==1, mu_01,
ifelse(x+y>1 & x-y>=1, mu_21,
ifelse(x+y>1 & x-y<=-1, mu_12, 1))))
}
lambda_k <- function(t) {
ro_1^(t==0.5)*ro_2^(t==1)*lambda_xy(t-1/90)*gamma*alpha[i[k]]*beta[j[k]]+csi_1*t
}
mu_k <- function(t) {
ro_1^(t==0.5)*ro_2^(t==1)*mu_xy(t-1/90)*alpha[j[k]]*beta[i[k]]+csi_2*t
}
int_lambda <- function(t1, t2) {
ro_1^(t2==0.5)*ro_2^(t2==1)*lambda_xy(t1)*gamma*alpha[i[k]]*beta[j[k]]*(t2-t1) + csi_1*(t2^2-t1^2)*0.5
}
int_mu <- function(t1, t2) {
ro_1^(t2==0.5)*ro_2^(t2==1)*mu_xy(t1)*alpha[j[k]]*beta[i[k]]*(t2-t1) + csi_2*(t2^2-t1^2)*0.5
}
v_int_lambda = NULL
v_int_mu = NULL
for(int in 1:(length(lst_int[[k]])-1)) {
v_int_lambda[int] = int_lambda(t1 = lst_int[[k]][int]/90, t2 = lst_int[[k]][int+1]/90)
v_int_mu[int] = int_mu(t1 = lst_int[[k]][int]/90, t2 = lst_int[[k]][int+1]/90)
}
sum_l_mk = ifelse(is.na(lst_J[[k]][1]), 0,
sum((1-lst_J[[k]])*log(lambda_k(lst_t[[k]]))+lst_J[[k]]*log(mu_k(lst_t[[k]]))))
sum_l_mk - sum(v_int_lambda) - sum(v_int_mu)
}
print(par)
alpha = par[1:20]
beta = par[21:40]
gamma = par[41]
csi_1 = par[42]
csi_2 = par[43]
ro_1 = par[44]
ro_2 = par[45]
lambda_10 = par[46]
lambda_01 = par[47]
lambda_21 = par[48]
lambda_12 = par[49]
mu_10 = par[50]
mu_01 = par[51]
mu_21 = par[52]
mu_12 = par[53]
ret = NULL
for(k in 1:N) {
ret[k] = log_lik_k(k)
}
-sum(ret)
}
set.seed(1)
mod_5_Rsolnp = solnp(pars = rep(1, 53), log_lik, LB = rep(0, 53), eqfun = function(par) par[1], eqB = 1)
mod_5_Rsolnp
load("mod_1_CVXR.RData")
load("sol/mod_1_CVXR.RData")
mod_1_CVXR
load("~/diss/code/sol/teste_mod_1_CVXR.RData")
teste_mod_1_CVXR
load("~/diss/code/sol/mod_1_CVXR.RData")
mod_1_CVXR
plot(mod_1_CVXR$par, teste_mod_1_CVXR$par)
t0 = Sys.time()
library(CVXR)
load("serie_a_2019.RData")
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
lst_log_lik = list()
for(k in 1:N) {
lambda = gamma+alpha[i[k]]+beta[j[k]]
mu = alpha[j[k]]+beta[i[k]]
if(is.na(lst_J[[k]][1])) {
sum_l_mk[[k]] = 0
} else {
sum_l_mk[[k]] = sum((1-lst_J[[k]])*lambda+lst_J[[k]]*mu)
}
}
t0 = Sys.time()
library(CVXR)
load("serie_a_2019.RData")
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
sum_l_ml = list()
for(k in 1:N) {
lambda = gamma+alpha[i[k]]+beta[j[k]]
mu = alpha[j[k]]+beta[i[k]]
if(is.na(lst_J[[k]][1])) {
sum_l_mk[[k]] = 0
} else {
sum_l_mk[[k]] = sum((1-lst_J[[k]])*lambda+lst_J[[k]]*mu)
}
}
t0 = Sys.time()
library(CVXR)
load("serie_a_2019.RData")
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
sum_l_mk = list()
for(k in 1:N) {
lambda = gamma+alpha[i[k]]+beta[j[k]]
mu = alpha[j[k]]+beta[i[k]]
if(is.na(lst_J[[k]][1])) {
sum_l_mk[[k]] = 0
} else {
sum_l_mk[[k]] = sum((1-lst_J[[k]])*lambda+lst_J[[k]]*mu)
}
print(k)
}
t0 = Sys.time()
library(CVXR)
load("serie_a_2019.RData")
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
sum_l_mk = list()
for(k in 1:N) {
lambda = gamma+alpha[i[k]]+beta[j[k]]
mu = alpha[j[k]]+beta[i[k]]
if(is.na(lst_J[[k]][1])) {
sum_l_mk[[k]] = 0
} else {
sum_l_mk[[k]] = sum_entries((1-lst_J[[k]])*lambda+lst_J[[k]]*mu)
}
print(k)
}
source('~/diss/code/mod_1_CVXR_2.R', echo=TRUE)
mod_1_CVXR
exp(mod_1_CVXR$par)
?Exp
t0 = Sys.time()
library(CVXR)
load("serie_a_2019.RData")
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
?Exp
Exp(gamma)
source('~/diss/code/mod_1_CVXR_2.R', echo=TRUE)
mod_1_CVXR
load("sol/mod_1_CVXR_2.RData")
load("sol_mod_1_Rsolnp.RData")
load("sol/mod_1_Rsolnp.RData")
plot(mod_1_Rsolnp$pars, exp(mod_1_CVXR$value))
plot(mod_1_Rsolnp$pars, exp(mod_1_CVXR$pars))
exp(mod_1_CVXR$pars)
mod_1_CVXR$par
plot(mod_1_Rsolnp$par, exp(mod_1_CVXR$par))
t0 = Sys.time()
library(CVXR)
load("serie_a_2019.RData")
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
lst_log_lik = list()
for(k in 1:N) {
lambda = gamma+alpha[i[k]]+beta[j[k]]
mu = alpha[j[k]]+beta[i[k]]
if(is.na(lst_J[[k]][1])) {
sum_entries_l_mk = 0
} else {
sum_entries_l_mk = sum_entries((1-lst_J[[k]])*lambda+lst_J[[k]]*mu)
}
number_of_intervals = length(lst_int[[k]])-1
lst_int_lambda = list()
lst_int_mu = list()
for(int in 1:number_of_intervals) {
length_of_interval = lst_int[[k]][int+1]/90-lst_int[[k]][int]/90
lst_int_lambda[[int]] = exp(lambda) * length_of_interval
lst_int_mu[[int]] = exp(mu) * length_of_interval
}
int_lambda = sum_entries(do.call(vstack, lst_int_lambda))
int_mu = sum_entries(do.call(vstack, lst_int_mu))
lst_log_lik[[k]] = sum_entries_l_mk - int_lambda - int_mu
}
log_lik = sum_entries(do.call(vstack, lst_log_lik))
t0 = Sys.time()
library(CVXR)
load("serie_a_2019.RData")
alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
lst_log_lik = list()
for(k in 1:10) {
lambda = gamma+alpha[i[k]]+beta[j[k]]
mu = alpha[j[k]]+beta[i[k]]
if(is.na(lst_J[[k]][1])) {
sum_entries_l_mk = 0
} else {
sum_entries_l_mk = sum_entries((1-lst_J[[k]])*lambda+lst_J[[k]]*mu)
}
number_of_intervals = length(lst_int[[k]])-1
lst_int_lambda = list()
lst_int_mu = list()
for(int in 1:number_of_intervals) {
length_of_interval = lst_int[[k]][int+1]/90-lst_int[[k]][int]/90
lst_int_lambda[[int]] = exp(lambda) * length_of_interval
lst_int_mu[[int]] = exp(mu) * length_of_interval
}
int_lambda = sum_entries(do.call(vstack, lst_int_lambda))
int_mu = sum_entries(do.call(vstack, lst_int_mu))
lst_log_lik[[k]] = sum_entries_l_mk - int_lambda - int_mu
}
log_lik = sum_entries(do.call(vstack, lst_log_lik))
log_lik
