#  Description :
#    Implements a basic tutorial example with affine conic constraints:
#
#    maximize x_1^(1/3) + (x_1+x_2+0.1)^(1/4)
#    st.      (x_1-0.5)^2 + (x_2-0.6)^2 <= 1
#             0 <= x_1 <= x_2 + 1
#
##
library("Rmosek")
affco1 <- function()
{
prob <- list(sense="max")
# Variables [x1; x2; t1; t2]
prob$c <- c(0, 0, 1, 1)
# Linear inequality x_1 - x_2 <= 1
prob$A <- Matrix(c(1, -1, 0, 0), nrow=1, sparse=TRUE)
prob$bc <- rbind(blc=-Inf, buc=1)
prob$bx <- rbind(blx=rep(-Inf,4), bux=rep(Inf,4))
# The quadratic cone
FQ <- rbind(c(0,0,0,0), c(1,0,0,0), c(0,1,0,0))
gQ <- c(1, -0.5, -0.6)
cQ <- matrix(list("QUAD", 3, NULL), nrow=3, ncol=1)
# The power cone for (x_1, 1, t_1) \in POW3^(1/3,2/3)
FP1 <- rbind(c(1,0,0,0), c(0,0,0,0), c(0,0,1,0))
gP1 <- c(0, 1, 0)
cP1 <- matrix(list("PPOW", 3, c(1/3, 2/3)), nrow=3, ncol=1)
# The power cone for (x_1+x_2+0.1, 1, t_2) \in POW3^(1/4,3/4)
FP2 <- rbind(c(1,1,0,0), c(0,0,0,0), c(0,0,0,1))
gP2 <- c(0.1, 1, 0)
cP2 <- matrix(list("PPOW", 3, c(1.0, 3.0)), nrow=3, ncol=1)
# All cones
prob$F <- rbind(FQ, FP1, FP2)
prob$g <- cbind(gQ, gP1, gP2)
prob$cones <- cbind(cQ, cP1, cP2)
rownames(prob$cones) <- c("type","dim","conepar")
r <- mosek(prob, list(soldetail=1))
stopifnot(identical(r$response$code, 0))
print(r$sol$itr$pobjval)
print(r$sol$itr$xx[1:2])
}
affco1()
source("C:/Program Files/Mosek/9.2/tools/platform/win64x86/rmosek/builder.R")
attachbuilder()
install.rmosek()
install.packages(pkgs = pkgs, repos = repos, type = type, INSTALL_opts = INSTALL_opts, configure.vars = configure.vars, ...)
require("Rmosek")
installed_solvers()
library(CVXR)
installed_solvers()
source("C:/Program Files/Mosek/9.2/tools/platform/win64x86/rmosek/builder.R")
install.rmosek()
attachbuilder()
install.rmosek()
install.packages(pkgs = pkgs, repos = repos, type = type, INSTALL_opts = INSTALL_opts, configure.vars = configure.vars, ...)
load("C:/Users/LuizFernando/Documents/diss/code/sol/mod_1_CVXR.RData")
mod_1_CVXR
mod_1_CVXR[[1]]
exp(mod_1_CVXR[[1]])
options(OutDec = ",")
options(knitr.kable.NA = "-")
library(dplyr)
library(knitr)
load("serie_a_2019.RData")
load("sol/mod_0_Rsolnp.RData")
load("sol/mod_1_Rsolnp.RData")
load("sol/mod_2_Rsolnp.RData")
load("sol/mod_3_Rsolnp.RData")
load("sol/mod_4_Rsolnp.RData")
load("sol/mod_5_Rsolnp.RData")
alphas = tibble(Time = times$Time,
mod_0 = mod_0_Rsolnp$pars[1:20],
mod_1 = mod_1_Rsolnp$pars[1:20],
mod_2 = mod_2_Rsolnp$pars[1:20],
mod_3 = mod_3_Rsolnp$pars[1:20],
mod_4 = mod_4_Rsolnp$pars[1:20],
mod_5 = mod_5_Rsolnp$pars[1:20])
kable(alphas, digits = 4, caption = "Alphas")
betas = tibble(Time = times$Time,
mod_0 = mod_0_Rsolnp$pars[21:40],
mod_1 = mod_1_Rsolnp$pars[21:40],
mod_2 = mod_2_Rsolnp$pars[21:40],
mod_3 = mod_3_Rsolnp$pars[21:40],
mod_4 = mod_4_Rsolnp$pars[21:40],
mod_5 = mod_5_Rsolnp$pars[21:40])
kable(alphas, digits = 4, caption = "Betas")
param = tibble(Modelo = names(alphas)[-1],
gamma = c(mod_0_Rsolnp$pars[41],
mod_1_Rsolnp$pars[41],
mod_2_Rsolnp$pars[41],
mod_3_Rsolnp$pars[41],
mod_4_Rsolnp$pars[41],
mod_5_Rsolnp$pars[41]),
csi_1 = c(NA,
NA,
mod_2_Rsolnp$pars[42],
mod_3_Rsolnp$pars[42],
mod_4_Rsolnp$pars[42],
mod_5_Rsolnp$pars[42]),
csi_2 = c(NA,
NA,
mod_2_Rsolnp$pars[43],
mod_3_Rsolnp$pars[43],
mod_4_Rsolnp$pars[43],
mod_5_Rsolnp$pars[43]),
ro_1 = c(NA,
NA,
NA,
mod_3_Rsolnp$pars[44],
mod_4_Rsolnp$pars[44],
mod_5_Rsolnp$pars[44]),
ro_2 = c(NA,
NA,
NA,
mod_3_Rsolnp$pars[45],
mod_4_Rsolnp$pars[45],
mod_5_Rsolnp$pars[45]),
lambda_10 = c(NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[46],
mod_5_Rsolnp$pars[46]),
lambda_01 = c(NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[47],
mod_5_Rsolnp$pars[47]),
lambda_21 = c(NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[48]),
lambda_12 = c(NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[49]),
mu_10 = c(NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[48],
mod_5_Rsolnp$pars[50]),
mu_01 = c(NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[49],
mod_5_Rsolnp$pars[51]),
mu_21 = c(NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[52]),
mu_12 = c(NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[53]))
kable(param, digits = 4, caption = "Demais parâmetros")
veross = tibble(Modelo = names(alphas)[-1],
log_likelihood = c(-mod_0_Rsolnp$values[length(mod_0_Rsolnp$values)],
-mod_1_Rsolnp$values[length(mod_1_Rsolnp$values)],
-mod_2_Rsolnp$values[length(mod_2_Rsolnp$values)],
-mod_3_Rsolnp$values[length(mod_3_Rsolnp$values)],
-mod_4_Rsolnp$values[length(mod_4_Rsolnp$values)],
-mod_5_Rsolnp$values[length(mod_5_Rsolnp$values)]))
kable(veross, digits = 4, caption = "log Verossimilhanças com os parâmetros encontrados")
options(OutDec = ",")
options(knitr.kable.NA = "-")
library(dplyr)
library(knitr)
load("serie_a_2019.RData")
load("sol/mod_0_Rsolnp.RData")
load("sol/mod_1_Rsolnp.RData")
load("sol/mod_2_Rsolnp.RData")
load("sol/mod_3_Rsolnp.RData")
load("sol/mod_4_Rsolnp.RData")
load("sol/mod_5_Rsolnp.RData")
alphas = tibble(Time = times$Time,
mod_0 = mod_0_Rsolnp$pars[1:20],
mod_1 = mod_1_Rsolnp$pars[1:20],
mod_2 = mod_2_Rsolnp$pars[1:20],
mod_3 = mod_3_Rsolnp$pars[1:20],
mod_4 = mod_4_Rsolnp$pars[1:20],
mod_5 = mod_5_Rsolnp$pars[1:20])
kable(alphas, digits = 4, caption = "Alphas")
betas = tibble(Time = times$Time,
mod_0 = mod_0_Rsolnp$pars[21:40],
mod_1 = mod_1_Rsolnp$pars[21:40],
mod_2 = mod_2_Rsolnp$pars[21:40],
mod_3 = mod_3_Rsolnp$pars[21:40],
mod_4 = mod_4_Rsolnp$pars[21:40],
mod_5 = mod_5_Rsolnp$pars[21:40])
kable(alphas, digits = 4, caption = "Betas")
param = tibble(Modelo = names(alphas)[-1],
gamma = c(mod_0_Rsolnp$pars[41],
mod_1_Rsolnp$pars[41],
mod_2_Rsolnp$pars[41],
mod_3_Rsolnp$pars[41],
mod_4_Rsolnp$pars[41],
mod_5_Rsolnp$pars[41]),
csi_1 = c(NA,
NA,
mod_2_Rsolnp$pars[42],
mod_3_Rsolnp$pars[42],
mod_4_Rsolnp$pars[42],
mod_5_Rsolnp$pars[42]),
csi_2 = c(NA,
NA,
mod_2_Rsolnp$pars[43],
mod_3_Rsolnp$pars[43],
mod_4_Rsolnp$pars[43],
mod_5_Rsolnp$pars[43]),
ro_1 = c(NA,
NA,
NA,
mod_3_Rsolnp$pars[44],
mod_4_Rsolnp$pars[44],
mod_5_Rsolnp$pars[44]),
ro_2 = c(NA,
NA,
NA,
mod_3_Rsolnp$pars[45],
mod_4_Rsolnp$pars[45],
mod_5_Rsolnp$pars[45]),
lambda_10 = c(NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[46],
mod_5_Rsolnp$pars[46]),
lambda_01 = c(NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[47],
mod_5_Rsolnp$pars[47]),
lambda_21 = c(NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[48]),
lambda_12 = c(NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[49]),
mu_10 = c(NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[48],
mod_5_Rsolnp$pars[50]),
mu_01 = c(NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[49],
mod_5_Rsolnp$pars[51]),
mu_21 = c(NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[52]),
mu_12 = c(NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[53]))
kable(param, digits = 4, caption = "Demais parâmetros")
veross = tibble(Modelo = names(alphas)[-1],
log_likelihood = c(-mod_0_Rsolnp$values[length(mod_0_Rsolnp$values)],
-mod_1_Rsolnp$values[length(mod_1_Rsolnp$values)],
-mod_2_Rsolnp$values[length(mod_2_Rsolnp$values)],
-mod_3_Rsolnp$values[length(mod_3_Rsolnp$values)],
-mod_4_Rsolnp$values[length(mod_4_Rsolnp$values)],
-mod_5_Rsolnp$values[length(mod_5_Rsolnp$values)]))
kable(veross, digits = 4, caption = "log Verossimilhanças com os parâmetros encontrados")
options(OutDec = ",")
options(knitr.kable.NA = "-")
library(dplyr)
library(knitr)
load("serie_a_2019.RData")
load("sol/mod_0_Rsolnp.RData")
load("sol/mod_1_Rsolnp.RData")
load("sol/mod_2_Rsolnp.RData")
load("sol/mod_3_Rsolnp.RData")
load("sol/mod_4_Rsolnp.RData")
load("sol/mod_5_Rsolnp.RData")
alphas = tibble(Time = times$Time,
mod_0 = mod_0_Rsolnp$pars[1:20],
mod_1 = mod_1_Rsolnp$pars[1:20],
mod_2 = mod_2_Rsolnp$pars[1:20],
mod_3 = mod_3_Rsolnp$pars[1:20],
mod_4 = mod_4_Rsolnp$pars[1:20],
mod_5 = mod_5_Rsolnp$pars[1:20])
kable(alphas, digits = 4, caption = "Alphas")
betas = tibble(Time = times$Time,
mod_0 = mod_0_Rsolnp$pars[21:40],
mod_1 = mod_1_Rsolnp$pars[21:40],
mod_2 = mod_2_Rsolnp$pars[21:40],
mod_3 = mod_3_Rsolnp$pars[21:40],
mod_4 = mod_4_Rsolnp$pars[21:40],
mod_5 = mod_5_Rsolnp$pars[21:40])
kable(alphas, digits = 4, caption = "Betas")
param = tibble(Modelo = names(alphas)[-1],
gamma = c(mod_0_Rsolnp$pars[41],
mod_1_Rsolnp$pars[41],
mod_2_Rsolnp$pars[41],
mod_3_Rsolnp$pars[41],
mod_4_Rsolnp$pars[41],
mod_5_Rsolnp$pars[41]),
csi_1 = c(NA,
NA,
mod_2_Rsolnp$pars[42],
mod_3_Rsolnp$pars[42],
mod_4_Rsolnp$pars[42],
mod_5_Rsolnp$pars[42]),
csi_2 = c(NA,
NA,
mod_2_Rsolnp$pars[43],
mod_3_Rsolnp$pars[43],
mod_4_Rsolnp$pars[43],
mod_5_Rsolnp$pars[43]),
ro_1 = c(NA,
NA,
NA,
mod_3_Rsolnp$pars[44],
mod_4_Rsolnp$pars[44],
mod_5_Rsolnp$pars[44]),
ro_2 = c(NA,
NA,
NA,
mod_3_Rsolnp$pars[45],
mod_4_Rsolnp$pars[45],
mod_5_Rsolnp$pars[45]),
lambda_10 = c(NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[46],
mod_5_Rsolnp$pars[46]),
lambda_01 = c(NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[47],
mod_5_Rsolnp$pars[47]),
lambda_21 = c(NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[48]),
lambda_12 = c(NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[49]),
mu_10 = c(NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[48],
mod_5_Rsolnp$pars[50]),
mu_01 = c(NA,
NA,
NA,
NA,
mod_4_Rsolnp$pars[49],
mod_5_Rsolnp$pars[51]),
mu_21 = c(NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[52]),
mu_12 = c(NA,
NA,
NA,
NA,
NA,
mod_5_Rsolnp$pars[53]))
kable(param, digits = 4, caption = "Demais parâmetros")
veross = tibble(Modelo = names(alphas)[-1],
log_likelihood = c(-mod_0_Rsolnp$values[length(mod_0_Rsolnp$values)],
-mod_1_Rsolnp$values[length(mod_1_Rsolnp$values)],
-mod_2_Rsolnp$values[length(mod_2_Rsolnp$values)],
-mod_3_Rsolnp$values[length(mod_3_Rsolnp$values)],
-mod_4_Rsolnp$values[length(mod_4_Rsolnp$values)],
-mod_5_Rsolnp$values[length(mod_5_Rsolnp$values)]))
kable(veross, digits = 4, caption = "log Verossimilhanças com os parâmetros encontrados")
nao_tem = "11000023"
tem = "11000201"
library(dplyr)
library(RSelenium)
library(rvest)
library(stringr)
rs = rsDriver(browser = "chrome", port = 4567L, chromever = "86.0.4240.22")
rd = rs$client
rd$navigate("http://sistemasprovabrasil.inep.gov.br/provaBrasilResultados/view/selecaoAno.seam") # Vai para o site
we = rd$findElement(using = "css", "#formSelecaoAnoDecorate\\:formSelecaoAnoSelect") # Altera o ano para 2017
we$sendKeysToElement(list("2017", key  = "enter", key = "enter"))
we = rd$findElement(using = "css", "#j_id36_body > div:nth-child(3) > input[type=image]") # Clica em prosseguir
we$clickElement()
Sys.sleep(1) # Espera a página carregar
we = rd$findElement(using = "css", "#codEscolaDecorate\\:codEscolaInput") # Insere o código da escola
we$clickElement()
we$sendKeysToElement(list(tem))
we = rd$findElement(using = "css", "#btnPesquisar") # Clica em pesquisar
we$clickElement()
achou = !rd$getPageSource() %>% # achou = TRUE, se encontrou a escola
.[[1]] %>%                    #         FALSE, se não encontrou a escola
read_html() %>%
as.character() %>%
str_detect("Para os filtros informados não existem resultados")
if(achou) {
we = rd$findElement(using = "css", "#boletimDesempenho\\:0\\:j_id101 > a")
we$clickElement()
}
# O arquivo gerado não é .pdf, como prosseguir?
achou = !rd$getPageSource() %>% # achou = TRUE, se encontrou a escola
.[[1]] %>%                    #         FALSE, se não encontrou a escola
read_html() %>%
as.character() %>%
str_detect("Para os filtros informados não existem resultados")
if(achou) {
we = rd$findElement(using = "css", "#boletimDesempenho\\:0\\:j_id101 > a")
we$clickElement()
}
rd$getCurrentWindowHandle()
rd$getCurrentWindowHandles()
rd$getWindowHandles()
rd$click()
rd$getWindowHandles()
rd$click()
rd$getWindowHandles()
rd$switchToWindow("CDwindow-42EC05648C526A0620420406E309E25E")
rd$click()
rd$switchToWindow("CDwindow-D4FD15492A798DDF4FDF15E896CDD1B8")
rd$click()
we = rd$findElement(using = "css", "#plugin")
rd$switchToWindow()
rd$switchToWindow("1")
rd$getWindowHandles()
rd$getCurrentWindowHandle()
rd$switchToWindow(rd$getWindowHandles()[[2]])
rd$getCurrentWindowHandle()
rd$switchToWindow(rd$getWindowHandles()[[2]])
rd$getCurrentWindowHandle()
rd$switchToWindow(rd$getWindowHandles()[[1]])
rd$getCurrentWindowHandle()
rd$getCurrentWindowHandle()
we = rd$findElement(using = "css", "body")
we$sendKeysToActiveElement(list("Keys.CONTROL + 't'"))
we = rd$findElement(using = "css", "body")
we$sendKeysToActiveElement(list("Keys.CONTROL + 't'"))
we$getWindowHandles()
rd$getWindowHandles()
rd$getCurrentWindowHandle()
rd$switchToWindow("CDwindow-42EC05648C526A0620420406E309E25E")
rd$getCurrentWindowHandle()
rd$switchToWindow(2)
rd$getCurrentWindowHandle()
rd$getWindowHandles()
rd$switchToWindow("CDwindow-42EC05648C526A0620420406E309E25E")
we = rd$findElement(using = "css", "body")
we$sendKeysToActiveElement(list("Keys.CONTROL + 't'"))
we$sendKeysToActiveElement(list("CONTROL + T"))
we = rd$findElement(using = "css", "body")
we$sendKeysToActiveElement(list("CONTROL + T"))
rd$sendKeysToActiveElement(list("CONTROL + T"))
we$sendKeysToActiveElement(list("CONTROL + T"))
rd$getWindowHandles()
rd$closeWindow()
rd$getWindowHandles()
rd$getCurrentWindowHandle()
rd$getCurrentWindowHandle()
we = rd$findElement(using = "css", "body")
we = rd$findElement(using = "css", "body")
we = rd$findElement(using = "css", "#plugin")
we = rd$findElement(using = "css", "#plugin")
rd$getWindowHandles()
rd$switchToWindow("CDwindow-42EC05648C526A0620420406E309E25E")
rd$switchToWindow("CDwindow-42EC05648C526A0620420406E309E25E")
rd$getCurrentWindowHandle()
we$sendKeysToElement(list(tem))
rd$switchToWindow("CDwindow-42EC05648C526A0620420406E309E25E")
rd$switchToWindow("CDwindow-42EC05648C526A0620420406E309E25E")
rd$getCurrentWindowHandle()
rd$switchToWindow("{CDwindow-42EC05648C526A0620420406E309E25E}")
rd$getCurrentWindowHandle()
rd$switchToWindow("{42EC05648C526A0620420406E309E25E}")
rd$getCurrentWindowHandle()
load("sol/mod_2_CVXR_2.RData")
mod_2_CVXR
load("serie_a_2019.RData")
N
source('~/diss/code/mod_2_CVXR_2.R', echo=TRUE)
source('~/diss/code/mod_2_CVXR_2.R', echo=TRUE)
mod_2_CVXR
