
library(CVXR)

load("serie_a_2019.RData")

t0 = Sys.time()

alpha = Variable(20)
beta = Variable(20)
gamma = Variable(1)
param = vstack(beta, alpha[2:20], gamma)
lambda_xy = Variable(3)
mu_xy = Variable(3)

lst_IH = list()
lst_IA = list()
for(k in 1:length(lst_int)) {
  tmp_IH = list()
  tmp_IA = list()
  for(l in 1:(length(lst_int[[k]])-1)) {
    tmp_IH[[l]] = exp(lambda_xy[score_index_3[[k]][l]]) * lst_int[[k]][l+1]-lst_int[[k]][l] ##
    tmp_IA[[l]] = exp(mu_xy[score_index_3[[k]][l]]) * lst_int[[k]][l+1]-lst_int[[k]][l] ##
  }
  lst_IH[[k]] = sum_entries(do.call(vstack, tmp_IH))
  lst_IA[[k]] = sum_entries(do.call(vstack, tmp_IA))
}
IH = do.call(hstack, lst_IH)
IA = do.call(hstack, lst_IA)

lst_JH = list()
lst_JA = list()
for(k in 1:length(lst_J)) {
  tmp_JH = list()
  tmp_JA = list()
  if(is.na(lst_J[[k]][1])) {
    lst_JH[[k]] = 0
    lst_JA[[k]] = 0
  } else {
    for(l in 1:length(lst_J[[k]])) {
      lambda = alpha[i[k]] + beta[j[k]] + gamma
      mu = alpha[j[k]] + beta[i[k]]
      tmp_JH[[l]] = (1+lambda_xy[score_index_3[[k]][l]])/lambda * (1-lst_J[[k]][l]) ## 
      tmp_JA[[l]] = (1+mu_xy[score_index_3[[k]][l]])/mu * (lst_J[[k]][l]) ##
    }
    lst_JH[[k]] = sum_entries(do.call(vstack, tmp_JH))
    lst_JA[[k]] = sum_entries(do.call(vstack, tmp_JA))
  }
}
JH = do.call(hstack, lst_JH)
JA = do.call(hstack, lst_JA)

log_lik = -IH %*% exp(M1 %*% param) - IA %*% exp(M2 %*% param) + JH %*% (M1 %*% param) + JA %*% (M2 %*% param)
objective = Maximize(log_lik)
problem = Problem(objective, constraints = list(alpha[1] == 0, lambda_xy[1] == 0, mu_xy[1] == 0))
set.seed(1)
solution = solve(problem, solver = "MOSEK")

duration = Sys.time() - t0

mod_2_CVXR = list(par = c(solution$getValue(alpha), solution$getValue(beta), solution$getValue(gamma),
                          solution$getValue(lambda_xy)[2:3], solution$getValue(mu_xy)[2:3]),
                  value = solution$value,
                  duration = duration)
save(mod_2_CVXR, file = "sol/mod_2_CVXR.RData")

mod_2_CVXR$duration

load("sol/mod_2_Rsolnp.RData")
plot(exp(mod_2_CVXR$par), mod_2_Rsolnp$pars)
cor(exp(mod_2_CVXR$par), mod_2_Rsolnp$pars)
